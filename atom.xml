<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鄢玉兵的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yanyubing.xyz/"/>
  <updated>2019-11-26T10:50:45.771Z</updated>
  <id>https://yanyubing.xyz/</id>
  
  <author>
    <name>鄢玉兵</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java数据结构和算法</title>
    <link href="https://yanyubing.xyz/2019/11/26/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>https://yanyubing.xyz/2019/11/26/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</id>
    <published>2019-11-26T05:59:04.240Z</published>
    <updated>2019-11-26T10:50:45.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h1><h1 id="https-leetcode-cn-com-interview"><a href="#https-leetcode-cn-com-interview" class="headerlink" title="https://leetcode-cn.com/interview/"></a><a href="https://leetcode-cn.com/interview/" target="_blank" rel="noopener">https://leetcode-cn.com/interview/</a></h1><h2 id="1：数据结构分类"><a href="#1：数据结构分类" class="headerlink" title="1：数据结构分类"></a>1：数据结构分类</h2><p>线性结构</p><p>线性结构分类：数组，队列，链表，栈</p><p>储存结构分类：顺序储存结构和链式储存结构</p><p>非线性结构</p><p>非线性结构分类：二维数组，多维数组，广义表，树结构，图结构</p><h2 id="2：稀疏数组"><a href="#2：稀疏数组" class="headerlink" title="2：稀疏数组"></a>2：稀疏数组</h2><p>1：基本介绍博客：<a href="https://www.cnblogs.com/blizzawang/p/11411602.html" target="_blank" rel="noopener">https://www.cnblogs.com/blizzawang/p/11411602.html</a> </p><p>2：逻辑：稀疏数组第一行第一列表示二维数组的行数，第一行第二列表示二维数组的列数，第一行第三列表示二维数组非0的个数，下列每一行的三个数分别表示哪一行，哪一列，对应的数是多少。</p><p>3：二维数组与稀疏数组转换代码实现，核心思想为数据的对应转换！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">1：二维数组转换为稀疏数组思路：</span><br><span class="line">1.遍历原始的二维数组，得到有数据的个数n</span><br><span class="line">2.根据sum就可以创建稀疏数组sparseArr int[n+1][3]</span><br><span class="line">3.将二维数组的有效数据存入到稀疏数组</span><br><span class="line"></span><br><span class="line">2：稀疏数组转换为二维数组：</span><br><span class="line">1：先读取稀疏数组的第一行</span><br><span class="line">2：根据第一行的数据创建原始二位数组</span><br><span class="line">3：在读取稀疏数组后几行的数据，并赋给原始二维数组即可</span><br><span class="line"></span><br><span class="line">package com.it.sparsearray;</span><br><span class="line"></span><br><span class="line">//棋盘二维数组转换为稀疏数组</span><br><span class="line">public class SparseArray &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //先创建一个原始的二维数组 11*11</span><br><span class="line">        //0表示没有棋子，1表示黑子，2表示白子</span><br><span class="line">        int[][] chessArr1 = new int[11][11];</span><br><span class="line">        chessArr1[1][2] = 1;</span><br><span class="line">        chessArr1[2][3] = 2;</span><br><span class="line">        //原始的二维数组</span><br><span class="line">        for (int[] ints : chessArr1) &#123;</span><br><span class="line">            for (int anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + &quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        //将二维数组转为稀疏数组的思路</span><br><span class="line">        //1：先遍历二维数组，得到非0的个数</span><br><span class="line">        int sum = 0;</span><br><span class="line">        for (int i = 0; i &lt; 11; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; 11; j++) &#123;</span><br><span class="line">                if (chessArr1[i][j] != 0) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //2：创建对应的稀疏数组</span><br><span class="line">        int sparseArr[][] = new int[sum + 1][3];</span><br><span class="line">        //给稀疏数字赋值</span><br><span class="line">        sparseArr[0][0] = 11;</span><br><span class="line">        sparseArr[0][1] = 11;</span><br><span class="line">        sparseArr[0][2] = sum;</span><br><span class="line">        //遍历二维数组，将非0的值存放到稀疏数组中</span><br><span class="line">        int count = 0;//count用于记录是第几个非0数字</span><br><span class="line">        for (int i = 0; i &lt; 11; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; 11; j++) &#123;</span><br><span class="line">                if (chessArr1[i][j] != 0) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    sparseArr[count][0] = i;</span><br><span class="line">                    sparseArr[count][1] = j;</span><br><span class="line">                    sparseArr[count][2] = chessArr1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //输出稀疏数组</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(&quot;得到的稀疏数组如下&quot;);</span><br><span class="line">        for (int i = 0; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">            System.out.printf(&quot;%d\t%d\t%d\t\n&quot;, sparseArr[i][0], sparseArr[i][1], sparseArr[i][2]);</span><br><span class="line">        &#125;</span><br><span class="line">        //根据稀疏数组的第一行数据，创建元素二维数组</span><br><span class="line">        int[][] chessArr2 = new int[sparseArr[0][0]][sparseArr[0][1]];</span><br><span class="line">        //输出恢复后的二维数组</span><br><span class="line">        System.out.println(&quot;转换为二维数组如下&quot;);</span><br><span class="line">        for (int i = 1; i &lt; sparseArr[0][2] + 1; i++) &#123;</span><br><span class="line">            chessArr2[sparseArr[i][0]][sparseArr[i][1]] = sparseArr[i][2];</span><br><span class="line">        &#125;</span><br><span class="line">        for (int[] ints : chessArr2) &#123;</span><br><span class="line">            for (int anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + &quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构和算法&quot;&gt;&lt;a href=&quot;#数据结构和算法&quot; class=&quot;headerlink&quot; title=&quot;数据结构和算法&quot;&gt;&lt;/a&gt;数据结构和算法&lt;/h1&gt;&lt;h1 id=&quot;https-leetcode-cn-com-interview&quot;&gt;&lt;a href=&quot;#ht
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>怎么搭建自己的博客</title>
    <link href="https://yanyubing.xyz/2019/11/26/%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://yanyubing.xyz/2019/11/26/%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2019-11-26T04:32:14.553Z</published>
    <updated>2019-11-26T05:26:19.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><p>node.js</p><p>git</p><p>hexo</p><p>github账号</p><p>自己购买的域名</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>网上有很多基于hexo搭建github的博客可供参考：<a href="http://rosesnow.top/" target="_blank" rel="noopener">http://rosesnow.top</a> </p><p>这里主要描述流程和理解，方便遇到问题能够快速找到办法：</p><p>1：node.js是用于npm安装</p><p>2：hexo是本地博客servece</p><p>3：需要把hexo部署到github pages上</p><p>4：通过CNAME文件实现域名的重定向操作，最终实现自己的域名与hexo同步</p><p>5：直接在github上添加CANME文件可以实现一次转发，需要在blog/source目录下创建CNAME文件保证每次有效</p><p>6：最后在更新blog之后hexo  g ; hexo d 同步</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;工具准备&quot;&gt;&lt;a href=&quot;#工具准备&quot; class=&quot;headerlink&quot; title=&quot;工具准备&quot;&gt;&lt;/a&gt;工具准备&lt;/h1&gt;&lt;p&gt;node.js&lt;/p&gt;
&lt;p&gt;git&lt;/p&gt;
&lt;p&gt;hexo&lt;/p&gt;
&lt;p&gt;github账号&lt;/p&gt;
&lt;p&gt;自己购买的域名&lt;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
