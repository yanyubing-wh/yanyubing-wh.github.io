<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鄢玉兵的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yanyubing.xyz/"/>
  <updated>2020-05-05T07:46:43.407Z</updated>
  <id>https://yanyubing.xyz/</id>
  
  <author>
    <name>鄢玉兵</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python_gui</title>
    <link href="https://yanyubing.xyz/2020/05/01/python_gui/"/>
    <id>https://yanyubing.xyz/2020/05/01/python_gui/</id>
    <published>2020-05-01T15:31:31.016Z</published>
    <updated>2020-05-05T07:46:43.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PythonGUI-Tkinter"><a href="#PythonGUI-Tkinter" class="headerlink" title="PythonGUI-Tkinter"></a>PythonGUI-Tkinter</h3><p>为了做出可以提供给其他人使用的AI(CV方向)算法程序—实现切割纸张可视化（或者是制作label）</p><p>1：实现图片的切割，储存，检查，目录的创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"># Radio Buttons:单选框,创建多个单选框</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">from tkinter import *</span><br><span class="line"></span><br><span class="line"># 初始化窗口</span><br><span class="line">import cv2</span><br><span class="line">from PIL import ImageTk, Image</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line">root.title(&apos;GUI_cutPaper&apos;)</span><br><span class="line"></span><br><span class="line"># 创建目录</span><br><span class="line">Label(root, text=&apos;输入要创建的目录路径，如：‘勤学早/Unit1/第一课时/第一大题’&apos;).grid(row=1, column=0)</span><br><span class="line">e_Dir = Entry(root)</span><br><span class="line">e_Dir.grid(row=2, column=0)</span><br><span class="line"></span><br><span class="line"># 输入图片，用来切割</span><br><span class="line">Label(root, text=&apos;输入要切割的图片路径，如：‘book/1.jpg’&apos;).grid(row=3, column=0)</span><br><span class="line">e_book = Entry(root)</span><br><span class="line">e_book.grid(row=4, column=0)</span><br><span class="line"></span><br><span class="line"># 保存图片</span><br><span class="line">Label(root, text=&apos;输入图片的保存路径,如：‘勤学早/Unit1/第一课时/第一大题/1.jpg’&apos;).grid(row=5, column=0)</span><br><span class="line">e_saveImage = Entry(root)</span><br><span class="line">e_saveImage.grid(row=6, column=0)</span><br><span class="line"></span><br><span class="line"># 检测图片</span><br><span class="line">Label(root, text=&apos;输入要检测的目录路径，如：‘勤学早’&apos;).grid(row=7, column=0)</span><br><span class="line">e_check = Entry(root)</span><br><span class="line">e_check.grid(row=8, column=0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 鼠标事件，获取需要切割点的y坐标</span><br><span class="line">def on_EVENT_LBUTTONDOWN(event, x, y, flags, param):</span><br><span class="line">    if event == cv2.EVENT_LBUTTONDOWN:</span><br><span class="line">        xy = &quot;%d,%d&quot; % (x, y)</span><br><span class="line">        print(xy)</span><br><span class="line">        # cv2.circle(img, (x, y), 1, (255, 0, 0), thickness=-1)</span><br><span class="line">        # cv2.putText(img, xy, (x, y), cv2.FONT_HERSHEY_PLAIN,</span><br><span class="line">        #             1.0, (0, 0, 0), thickness=1)</span><br><span class="line">        dotsY.append(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建目录</span><br><span class="line">def createDir():</span><br><span class="line">    path = e_Dir.get()</span><br><span class="line">    if os.path.exists(path):</span><br><span class="line">        # 提示信息</span><br><span class="line">        Label(root, text=&apos;文件路径已存在，请重新输入&apos;).grid(row=0, column=3)</span><br><span class="line">    else:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">        Label(root, text=path + &apos; ：创建成功&apos;).grid(row=0, column=3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 存储切割的图片</span><br><span class="line">def saveImage():</span><br><span class="line">    # 遍历所有的file进行切割</span><br><span class="line">    global dotsY</span><br><span class="line">    dotsY = []</span><br><span class="line">    file_path_in = e_book.get()</span><br><span class="line">    global img</span><br><span class="line"></span><br><span class="line">    if not os.path.exists(file_path_in):</span><br><span class="line">        Label(root, text=file_path_in + &apos;输入的文件路径不存在，请重新输入&apos;).grid(row=0, column=3)</span><br><span class="line">    else:</span><br><span class="line">        img = cv2.imread(file_path_in)</span><br><span class="line">        cv2.namedWindow(&quot;image&quot;, 0)</span><br><span class="line">        cv2.resizeWindow(&apos;image&apos;, 600, 800)</span><br><span class="line">        cv2.imshow(&apos;image&apos;, img)</span><br><span class="line">        cv2.setMouseCallback(&quot;image&quot;, on_EVENT_LBUTTONDOWN)</span><br><span class="line">        cv2.waitKey(0)</span><br><span class="line">        cv2.destroyAllWindows()</span><br><span class="line">    print(&apos;得到的y坐标点为&apos;, dotsY)</span><br><span class="line">    file_path_out = e_saveImage.get()</span><br><span class="line">    if os.path.exists(file_path_out):</span><br><span class="line">        Label(root, text=file_path_in + &apos;输出的文件路径已经存在，请检查&apos;).grid(row=0, column=3)</span><br><span class="line">        return</span><br><span class="line">    image = img[dotsY[0]:dotsY[1], :]</span><br><span class="line">    # 处理带有中文的目录结构</span><br><span class="line">    cv2.imencode(&apos;.jpg&apos;, image)[1].tofile(file_path_out)</span><br><span class="line">    Label(root, text=file_path_out + &apos;文件保存成功&apos;).grid(row=0, column=3)</span><br><span class="line">    time.sleep(1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index = 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取所有的文件名</span><br><span class="line">def listdir(path, list_name):</span><br><span class="line">    for file in os.listdir(path):</span><br><span class="line">        file_path = os.path.join(path, file)</span><br><span class="line">        if os.path.isdir(file_path):</span><br><span class="line">            listdir(file_path, list_name)</span><br><span class="line">        elif os.path.splitext(file_path)[1] == &apos;.jpg&apos;:</span><br><span class="line">            list_name.append(file_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 储存列表名</span><br><span class="line">listName = []</span><br><span class="line"># 储存所有转换之后的图片</span><br><span class="line">my_images = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 检查图片</span><br><span class="line">def checkImage():</span><br><span class="line">    # 前进，后退，退出按钮</span><br><span class="line">    button_back = Button(root, text=&apos;&lt;&lt;&apos;, command=back)</span><br><span class="line">    button_quit = Button(root, text=&apos;Exit&apos;, command=root.quit)</span><br><span class="line">    button_forward = Button(root, text=&apos;&gt;&gt;&apos;, command=forward)</span><br><span class="line">    button_back.grid(row=11, column=2)</span><br><span class="line">    button_quit.grid(row=11, column=3)</span><br><span class="line">    button_forward.grid(row=11, column=4)</span><br><span class="line"></span><br><span class="line">    global listName</span><br><span class="line"></span><br><span class="line">    path = e_check.get()</span><br><span class="line">    listdir(path, listName)</span><br><span class="line">    print(len(listName))</span><br><span class="line">    global my_images</span><br><span class="line"></span><br><span class="line">    for i in range(len(listName)):</span><br><span class="line">        # 打开图片，图片放入对象，对象再放入screen</span><br><span class="line">        my_img = ImageTk.PhotoImage(Image.open(listName[i]).resize((600, 300)))</span><br><span class="line">        my_images.append(my_img)</span><br><span class="line">    Label(root, image=my_images[0]).grid(row=10, column=3)</span><br><span class="line">    mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def showImage(index):</span><br><span class="line">    my_label = Label(root, image=my_images[index])</span><br><span class="line">    my_label.grid(row=10, column=3)</span><br><span class="line"></span><br><span class="line">    message = &apos;路径:&apos; + listName[index] + &apos;  Image &apos; + str(index + 1) + &apos; of&apos; + str(len(listName))</span><br><span class="line">    # 添加状态栏(多少张图片，多少个)</span><br><span class="line"></span><br><span class="line">    Label(root, text=message).grid(row=9, column=3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def back():</span><br><span class="line">    # 申明全局变量</span><br><span class="line">    global index</span><br><span class="line">    index = (index - 1) % len(listName)</span><br><span class="line">    showImage(index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def forward():</span><br><span class="line">    # 申明全局变量</span><br><span class="line">    global index</span><br><span class="line">    index = (index + 1) % len(listName)</span><br><span class="line">    showImage(index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 三大组件位置</span><br><span class="line">button_CreateFile = Button(root, text=&quot;createDir&quot;, command=createDir)</span><br><span class="line">button_saveImage = Button(root, text=&quot;saveImage&quot;, command=saveImage)</span><br><span class="line">button_CheckImage = Button(root, text=&quot;checkImage&quot;, command=checkImage)</span><br><span class="line"></span><br><span class="line">button_CreateFile.grid(row=15, column=15, padx=2)</span><br><span class="line">button_saveImage.grid(row=16, column=15, padx=2)</span><br><span class="line">button_CheckImage.grid(row=17, column=15, padx=2)</span><br><span class="line"></span><br><span class="line">Label(root, text=&apos;使用步骤：&apos;).grid(row=12, column=0)</span><br><span class="line">Label(root, text=&apos;1、创建目录:输入需要创建的目录，点击createDir&apos;).grid(row=13, column=0)</span><br><span class="line">Label(root, text=&apos;2、切割图片:&apos;).grid(row=14, column=0)</span><br><span class="line">Label(root, text=&apos;①输入要切割的输入图片路径，以.jpg结尾&apos;).grid(row=15, column=0)</span><br><span class="line">Label(root, text=&apos;②输入需要保存的路径，以.jpg结尾&apos;).grid(row=16, column=0)</span><br><span class="line">Label(root, text=&apos;③点击saveImage进行切割操作&apos;).grid(row=17, column=0)</span><br><span class="line">Label(root, text=&apos;3、检测图片：输入需要检测图片的根目录，点击checkImage&apos;).grid(row=18, column=0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;PythonGUI-Tkinter&quot;&gt;&lt;a href=&quot;#PythonGUI-Tkinter&quot; class=&quot;headerlink&quot; title=&quot;PythonGUI-Tkinter&quot;&gt;&lt;/a&gt;PythonGUI-Tkinter&lt;/h3&gt;&lt;p&gt;为了做出可以提供给其
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>神经网络学习记录（已掌握）</title>
    <link href="https://yanyubing.xyz/2020/04/20/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E5%B7%B2%E6%8E%8C%E6%8F%A1%EF%BC%89/"/>
    <id>https://yanyubing.xyz/2020/04/20/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E5%B7%B2%E6%8E%8C%E6%8F%A1%EF%BC%89/</id>
    <published>2020-04-19T17:02:14.752Z</published>
    <updated>2020-05-04T14:34:22.361Z</updated>
    
    <content type="html"><![CDATA[<p>1：神经元</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">构建：包含初始化[w]，b；激活函数，前馈网络</span><br><span class="line"></span><br><span class="line">完成inputs→outputs的功能</span><br></pre></td></tr></table></figure><p>2：神经网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">构建：多个神经元构成，初始化[w],[b]；前馈网络</span><br><span class="line"></span><br><span class="line">完成inputs→outputs的功能</span><br></pre></td></tr></table></figure><p>3：神经网络的训练</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构建：定义损失函数，随机初始化[w],[b];前向传播;训练方法（通过随机梯度下降更新权重和偏置的过程，包含学习率，偏导，和批次数）;每10个epoch打印一次准确率或者损失值等，方便可视化</span><br></pre></td></tr></table></figure><p>4：神经网络的预测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是神经网络的前向传播</span><br></pre></td></tr></table></figure><p>5：计算机视觉发展史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如何让计算机理解视觉(圆柱表示法,直线表示法)→人脸识别（2000年）→SIFT（对象识别，基于特征（因为匹配整个物体非常困难（有很多干扰因素））））→图像金字塔，不同的分辨率带有同样的特征（2006）→梯度直方图（HoG，用来描述特征，表示向量机）→（2006-2012数据集的发展）开始对象识别（发展基于标准数据集的产生,PASCAL;imageNet(最大的数据集项目)）→大赛中卷积神经网络展现身手（2012年，使得错误率下降了10%，前五类识别）</span><br></pre></td></tr></table></figure><p>6：图片增强（适用于选择题判断）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1：文字扭曲（贝塞尔曲线实现）</span><br><span class="line">2：背景噪声（椒盐）</span><br><span class="line">椒盐噪声 = 椒噪声 + 盐噪声 ，椒盐噪声的值为0(黑色)或者255(白色)</span><br><span class="line">3：笔画粘连（膨胀）</span><br><span class="line">4：笔画断裂（腐蚀）</span><br><span class="line">5：风格迁移</span><br><span class="line">6：ImageEnhance（增强亮度，色泽等）</span><br><span class="line">7：滤镜</span><br><span class="line">8：加下划线（适用于下划线上面是答案的情况）</span><br><span class="line">9：底色加数字（适用于答案会写在数字上的情况）</span><br></pre></td></tr></table></figure><p>7：物体识别的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1：物体相机位置不一样，像素不一样</span><br><span class="line">2：物体光照，阴影等不一样</span><br><span class="line">3：物体只有部分可视</span><br><span class="line">4：背景和物体颜色类似</span><br><span class="line">5：物体的品种不一样（猫）</span><br></pre></td></tr></table></figure><p>8：数据驱动方法(Data-driver method)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1:收集数据</span><br><span class="line">2:训练模型</span><br><span class="line">3：使用模型预测</span><br><span class="line"></span><br><span class="line">def train(images,labels):</span><br><span class="line">#meching learning</span><br><span class="line">return model</span><br><span class="line"></span><br><span class="line">def predict(test_image,model):</span><br><span class="line">return test_labels</span><br></pre></td></tr></table></figure><p>9：第一个分类器(nearest neighbor)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">数据集使用CIFAR10</span><br><span class="line">原理就是对图片进行对比</span><br><span class="line">两个图片的对比第一种方式：L1曼哈顿距离(围成了矩形，会随着坐标旋转改变)</span><br><span class="line">sum(|Test[:]-train[:]|)，两个对应坐标像素的绝对值的和</span><br><span class="line">两个图片的对比第二种方式：L2欧几里得距离（围成的是圆，坐标不变）</span><br><span class="line">sum((Test[:]-train[:])的平方开根号）</span><br><span class="line"></span><br><span class="line">对于knn，你需要决策的是k取值和距离的取值，距离的标识L1或者L2（超参数）</span><br></pre></td></tr></table></figure><p>10：对于超参数的选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对于knn：</span><br><span class="line">K=1的时候训练更好（错误，需要多调整）</span><br><span class="line">超参数在测试集上更好就选择（错误，需要均衡）</span><br><span class="line">数据分为训练集，验证集和测试集：在验证集上选择超参数，测试集上测试（？暂时不理解）</span><br><span class="line">交叉验证是一个很好的设置超参数方式(但是不适合大型数据集，时间昂贵)</span><br></pre></td></tr></table></figure><p>11:SVM损失函数（Loss function）hinge loss(铰接损失)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">在训练集上，通过得分来衡量不准确率。对于不同给定的权值w，来衡量不同w的优劣。</span><br><span class="line">label:标签，用来定义输出类型,数据类型为Interage</span><br><span class="line">score</span><br><span class="line">label   True cat  carfrog</span><br><span class="line">cat 3.21.32.2</span><br><span class="line">car5.14.92.5</span><br><span class="line">frog-1.72.0-3.1</span><br><span class="line"></span><br><span class="line">(每一类：如frog)Loss=max(2.2-(-3.1)+1,0)+max(2.5-(-3.1)+1,0)（True得分减去其他类得分&gt;1则置0，小于0取实际值）</span><br><span class="line">Li=∑max(Sj-syi+1,0)(j≠i)</span><br><span class="line">(Sj为预测的类别得分，Syi为预测为实际类别的得分):目的是让我们通过权值w得到的准确分类，真实类别的得分要比错误类别的得分大于1;继而损失函数=0的时候，刚好等于1。</span><br><span class="line">平均损失：sum/N</span><br><span class="line"></span><br><span class="line">1:如果car的得分改变一点，对损失函数是否有影响？</span><br><span class="line">没有影响，因为car的分数已经超过了其他的分数，改变一点之后，损失函数还是0</span><br><span class="line"></span><br><span class="line">2:损失函数的取值范围</span><br><span class="line">0~+∞</span><br><span class="line"></span><br><span class="line">3:如果使用的是平方损失？意义是什么</span><br><span class="line">平方损失的意义在于，我们改变不同的w，看看到底那个地方对于损失的影响更大</span><br><span class="line"></span><br><span class="line">4:这种损失函数在numpy中的表示</span><br><span class="line"></span><br><span class="line">5:得到损失函数为0的权值并不唯一</span><br><span class="line">w得到的损失为0，那么2W同样得到损失函数也为0</span><br><span class="line"></span><br><span class="line">6:我们并不关心在训练集上的损失函数，而是在测试集上面的分类准确情况</span><br><span class="line"></span><br><span class="line">7:hinge loss(铰接损失)有时候又被称为最大边界损失（max-margin loss）</span><br></pre></td></tr></table></figure><p>12:Regularization(损失函数的正则化)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正则化是为了使得事情变得简单化:</span><br><span class="line">L1 regularization</span><br><span class="line">L2 regularization</span><br><span class="line">Dropout regularization</span><br><span class="line">Max-Norm Regularization</span><br><span class="line">等等...</span><br><span class="line">都是通过调整损失函数来实现正则化的</span><br></pre></td></tr></table></figure><p>13:softmax classifier</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">score取值范围调整为0-1,表达式为:np.exp(a) / np.sum(np.exp(a)) </span><br><span class="line">强调了最大得分，忽略了比较小的得分（通常情况下，并非标量不变）:</span><br><span class="line">例如：</span><br><span class="line">得分为：[1、2、3、4、1、2、3]</span><br><span class="line">softmax之后为：[0.024、0.064、0.175、0.475、0.024、0.064、0.175]</span><br><span class="line">最高值的比例为4/16&lt;0.475</span><br><span class="line"></span><br><span class="line">但是有时候会出现如下情况</span><br><span class="line">得分为：[0.1, 0.2, 0.3, 0.4, 0.1, 0.2, 0.3] </span><br><span class="line">softmax之后为：[0.125, 0.138, 0.153, 0.169, 0.125, 0.138, 0.153]</span><br><span class="line">最大值0.4/1.6&gt;0.169</span><br></pre></td></tr></table></figure><p>14:softMax的lossfunction</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sofeMax的lossfunction:-logSj   </span><br><span class="line">(sj为softmax之后对应种类的概率)，</span><br><span class="line">例如样本为[0,0,0,0,0,0,1]</span><br><span class="line">softmax之后的概率为[0.125, 0.138, 0.153, 0.169, 0.125, 0.138, 0.153]</span><br><span class="line">则对于该次预测的loss值为-log(0.153)，Sj越大，证明预测性能更好，对应的loss越低，最低趋近于0</span><br><span class="line"></span><br><span class="line">1:lossfunction的取值</span><br><span class="line">lossfunction的取值为0-+∞</span><br><span class="line"></span><br><span class="line">2:初始化权值都很小的时候，lossfunction的值</span><br><span class="line">-log(1/c)  c为类别的个数</span><br><span class="line"></span><br><span class="line">3:所以如果你的概率是通过softmax公式得到的，那么cross entropy就是softmax loss</span><br></pre></td></tr></table></figure><p>15：SVM loss  vs  Softmax loss</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">常用损失函数</span><br><span class="line">常见的损失误差有五种：</span><br><span class="line">1. 铰链损失（Hinge Loss）：主要用于支持向量机（SVM） 中；</span><br><span class="line">2. 互熵损失 （Cross Entropy Loss，Softmax Loss ）：用于Logistic 回归与Softmax 分类中；</span><br><span class="line">3. 平方损失（Square Loss）：主要是最小二乘法（OLS）中；</span><br><span class="line">4. 指数损失（Exponential Loss） ：主要用于Adaboost 集成学习算法中；</span><br><span class="line">5. 其他损失（如0-1损失，绝对值损失）</span><br></pre></td></tr></table></figure><p>16:优化器（optimization）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">方案1:随机搜索,随机化权重，使得损失函数最小（实现困难，并且耗时巨大，准确率低）</span><br><span class="line"></span><br><span class="line">方案2:梯度（但是太过于缓慢，如果w的维度为1000万）</span><br><span class="line">十分类问题，w为1*10的矩阵，loss在固定的W为固定值，那么每一个w（其他w值固定不变）增加为W+h(first dim)，得到对应的loss，∆loss/∆w就为对应的梯度，处理10次就得到每一个的梯度。</span><br><span class="line"></span><br><span class="line">方案3:Calculus（微积分）</span><br><span class="line">直接就可以得到斜率（不需要每个增加微小值h(0.001)）</span><br><span class="line"></span><br><span class="line">总结：使用分析梯度下降（快，但是有错误情况），结合数值梯度来进行检查，称为gradient check(梯度检查,debug可以用到)</span><br><span class="line"></span><br><span class="line">4:step_size(leraning rate)作为超参数</span><br><span class="line"></span><br><span class="line">5:SGD(随机梯度下降)</span><br><span class="line">我们处理图片训练的时候，可能参数有数百万个，随机梯度下降解决的问题是不需要进行一整个循环来得到梯度，而是每个minibatch(32,64,128)就可以得到梯度;代码上多增加了一行采样训练数据</span><br><span class="line"></span><br><span class="line">6:更加优秀的梯度下降</span><br><span class="line">Adaptive Learning Algorithms(自适应学习率算法):Adagrad，Adadelta，RMSprop，Adam，优于SGD（随机梯度下降）算法</span><br></pre></td></tr></table></figure><p>17:线性分类svm，损失函数的直观了解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vision.stanford.edu/teaching/cs231n-demos/linear-classify/</span><br></pre></td></tr></table></figure><p>18:反向传播</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">f(x,y,z)=(x+y)*z</span><br><span class="line">e.g. x=-2 y=5 z=-4</span><br><span class="line"></span><br><span class="line">表达式分解为：</span><br><span class="line">q=x+y</span><br><span class="line">f=q*z</span><br><span class="line"></span><br><span class="line">反向传播的导数遵循链式法则：</span><br><span class="line">∂q/∂x=1</span><br><span class="line">∂q/∂y=1</span><br><span class="line"></span><br><span class="line">∂f/∂q=z</span><br><span class="line">∂f/∂z=q</span><br><span class="line"></span><br><span class="line">即∂f/∂x=∂f/∂q * ∂q/∂x=z*1=z=-4</span><br></pre></td></tr></table></figure><p>19:Patterns in backward flow(反向传播的模式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add gate(加法):gradient distributor(梯度分布:两个值梯度一样)</span><br><span class="line">max gate(取最大值):gradient router(梯度路由:其中一个值的梯度置0)</span><br><span class="line">mul gate(乘法):gradient switcher(梯度切换:梯度分别为另一个值)</span><br><span class="line"></span><br><span class="line">Gradient add at branches：分支的时候梯度为求分支求和</span><br><span class="line"></span><br><span class="line">向量计算的梯度：</span><br><span class="line">向量中元素的梯度总是一样的，</span><br></pre></td></tr></table></figure><p>20:Modeularized implementation(模块化)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">框架中：caffe torch TensorFlow 都是在实现正向和方向传播</span><br></pre></td></tr></table></figure><p>21:Convolutional Neural Networks(CNN)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">全连接层：input为32*32*3的图片</span><br><span class="line">那么input展开就为3072*1的矩阵；需要的w就为10*3072的矩阵，最终经过激活函数(可以是sigmod)，得到10个种类的得分</span><br><span class="line">需要的参数为30720个</span><br><span class="line"></span><br><span class="line">卷积层:input是32*32*3的图片</span><br><span class="line">保留原结构，经过5*5*3的卷积，进行运算，得到28*28的特征图;如果有6个过滤器，则可以得到6个特征图，合起来就是28*28*6；再经过10个5*5*6的过滤器，得到10个24*24的特征图</span><br><span class="line"></span><br><span class="line">输出层的大小=（N-F）/stride+1 </span><br><span class="line">N:输入层的大小</span><br><span class="line">F:过滤器的大小</span><br><span class="line">stride：步长</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出层的大小=（N+2p-F）/stride+1 </span><br><span class="line">pad:填充，一般使用0像素填充(为了保持输出图像的大小，再深层网络中多个卷积下来之后图片大小会急剧下降)</span><br><span class="line"></span><br><span class="line">练习：input：32*32*3  10个5*5的过滤器 步长为1  pad为2 输出是？参数的个数是？</span><br><span class="line">(32+4-5+1)/1的10个，最终为32*32*10;</span><br><span class="line">参数的个数为（5*5*3+1）*10=760个，每个过滤器都会加一个偏置项Bias</span><br><span class="line"></span><br><span class="line">过滤器的数量一般为2的次方个,32,64,128...</span><br><span class="line"></span><br><span class="line">池化层：也叫下采样层(减小特征图的大小),一般采用最大池化,池化的步长一般也和过滤器大小一致，保证不会有重叠区域被池化；目的是进行下采样</span><br><span class="line"></span><br><span class="line">直观演示地址：</span><br><span class="line">https://cs.stanford.edu/people/karpathy/convnetjs/demo/cifar10.html</span><br></pre></td></tr></table></figure><p>22:激活函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">激活函数一般用在求出了h=w1*x1+w2*x2+b，之后f(h)</span><br><span class="line">有下面的种类f(x)：</span><br><span class="line"></span><br><span class="line">Sigmoid:取值为0~1</span><br><span class="line">问题点:</span><br><span class="line">1：当x=10,或者x=-10的时候，d(f(x))/d(x)梯度≈0；则d(f(x))/d(w)也≈0，会产生梯度消失，不利于参数更新</span><br><span class="line">2：对于向量w而言；输入x为正，梯度始终为正；或者输入x为负，梯度始终为负；这意味着我们需要使用的输入数据是均值为0</span><br><span class="line">3:Sigmoid计算昂贵（并不是很严重的问题）</span><br><span class="line"></span><br><span class="line">tanh:取值为-1~1</span><br><span class="line">问题点：</span><br><span class="line">解决了Sigmoid的第二个问题,但是还是存在第一个问题</span><br><span class="line"></span><br><span class="line">ReLU:取值0~正无穷(第一次使用是在2012 AlexNet)</span><br><span class="line">1：存在负值梯度为0的情况</span><br><span class="line">2：收敛较快（大概是sigmoid的6倍）</span><br><span class="line">3：初始化weight可能存在永远都不更新w的情况，对于所有的输入（w1*x1+w2*x2+b&lt;0），使得f(x)/d(w)=0;部分神经元死掉（不更新，不起作用）</span><br><span class="line"></span><br><span class="line">Leaky ReLu:取值-无穷~正无穷</span><br><span class="line">max(0.01x,x),解决了h的取值为负数，梯度为0的情况</span><br><span class="line"></span><br><span class="line">PRelu:max(αx,x)</span><br><span class="line">α通过超参数给定，更加灵活</span><br><span class="line"></span><br><span class="line">ELU：Rlue的另一个变种</span><br><span class="line"></span><br><span class="line">Maxout:max(w1Tx+b1,w2Tx+b2)</span><br><span class="line">1：需要两组权值</span><br><span class="line"></span><br><span class="line">使用激活函数的经验：</span><br><span class="line">1:不使用sigmoid</span><br><span class="line">2:是要ReLU,注意学习率</span><br><span class="line">3:尝试ReLU的变种</span><br><span class="line">4:尝试tanh（不做期待）</span><br></pre></td></tr></table></figure><p>23:数据预处理（data Preprocess）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1:zero-mean(0均值):</span><br><span class="line">I=D-Imean</span><br><span class="line">Imean可以是整个图片的均值（3通道）AlexNet，也可以是（每个通道的均值）vgg网络中是这样的</span><br><span class="line"></span><br><span class="line">2:Normalized data:归一化(CNN不常见)</span><br><span class="line">I = Imin + (Imax-Imin)*(D-Dmin)/(Dmax-Dmin)</span><br><span class="line"></span><br><span class="line">3:PCA和白化(CNN不常见)</span><br><span class="line"></span><br><span class="line">注意点：</span><br><span class="line">1:正确做法是计算训练数据的均值，然后分别把它从训练/验证/测试数据中减去。</span><br><span class="line">2:数据预处理不能解决sigmoid的劣势（梯度消失），因为预处理只能处理第一层的输入数据结构</span><br></pre></td></tr></table></figure><p>24：（权值初始化）weight Initalization</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">问题</span><br><span class="line">1：初始化W=0会出现什么?</span><br><span class="line">大部分神经元的梯度相同，做了一样的事情，激活函数一样的时候,w=0，则得到的损失函数一致，反向梯度也一致，即会用同样的方式更新。</span><br><span class="line"></span><br><span class="line">2：W=0.01*np.random.randn(D,N)？</span><br><span class="line">均值为0,标准差为0.01;网络比较小的时候可行，深层网络不可行;网络的深入，所有的梯度都会变为0</span><br><span class="line"></span><br><span class="line">3:W=np.random.randn(fan_in.fan_out)</span><br><span class="line">标准差为1，所有神经元都将处于饱和状态，梯度消失</span><br><span class="line"></span><br><span class="line">4:Xavier初始化(最常用)</span><br><span class="line">W=np.random.randn(fan_in,fan_out)/np.sqrt(fan_in)</span><br><span class="line"></span><br><span class="line">5:note additional/2</span><br><span class="line">W=np.random.randn(fan_in,fan_out)/np.sqrt(fan_in/2)</span><br><span class="line"></span><br><span class="line">6:batch Normalization（批处理归一化）</span><br><span class="line">BN算法在Mini-batch中使用，一般在全连接层或者卷积层之后使用，或者在非线性层之前</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1：神经元&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>神经网络相关（卷积）</title>
    <link href="https://yanyubing.xyz/2020/04/17/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%EF%BC%88%E5%8D%B7%E7%A7%AF%EF%BC%89/"/>
    <id>https://yanyubing.xyz/2020/04/17/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%EF%BC%88%E5%8D%B7%E7%A7%AF%EF%BC%89/</id>
    <published>2020-04-17T08:06:22.003Z</published>
    <updated>2020-04-17T16:06:09.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h3><p>1：卷积神经网络的发展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LeNet(1998年)→AlexNet(2012年)→ZFNet(2013年)→VGG（2014年-2月）→GoogleNet(2014年-1月)→ResNet(2015年)→SENet(2017年)→DenseNet（2018年）→efficientnet（2019年）</span><br></pre></td></tr></table></figure><p>2：相关网络介绍</p><p>2.1:LeNet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1:网络结构</span><br><span class="line">LeNet-5包含七层，不包括输入，每一层都包含可训练参数（权重），当时使用的输入数据是32*32像素的图像。卷积层Cx，子采样层Sx，完全连接层Fx，其中x是层索引。输入图像大小是32*32</span><br><span class="line"></span><br><span class="line">第1层C1：具有6个5*5卷积核的卷积层，特征映射的大小为28*28（32+1-5），C1包含156个可训练参数和122304个连接。</span><br><span class="line"></span><br><span class="line">第2层S2：6个大小为14*14的特征图的子采样层（subsampling/pooling）。每个特征地图中的每个单元连接到C1中的对应特征地图中的2*2个邻域。S2中单位的四个输入相加，然后乘以可训练系数（权重），然后加到可训练偏差（bias）。结果通过S形函数传递。由于2*2个感受域不重叠，因此S2中的特征图只有C1中的特征图的一半行数和列数。S2层有12个可训练参数和5880个连接。</span><br><span class="line"></span><br><span class="line">第3层C3：具有16个5-5的卷积核的卷积层。前六个C3特征图的输入是S2中的三个特征图的每个连续子集，接下来的六个特征图的输入则来自四个连续子集的输入，接下来的三个特征图的输入来自不连续的四个子集。最后，最后一个特征图的输入来自S2所有特征图。C3层有1516个可训练参数和156000个连接。</span><br><span class="line"></span><br><span class="line">第4层S4：与S2类似，大小为2*2，输出为16个5*5的特征图。S4层有32个可训练参数和2000个连接。</span><br><span class="line"></span><br><span class="line">第5层C5：是具有120个大小为5*5的卷积核的卷积层。每个单元连接到S4的所有16个特征图上的5*5邻域。这里，因为S4的特征图大小也是5*5，所以C5的输出大小是1*1。因此S4和C5之间是完全连接的。C5被标记为卷积层，而不是完全连接的层，是因为如果LeNet-5输入变得更大而其结构保持不变，则其输出大小会大于1*1，即不是完全连接的层了。C5层有48120个可训练连接。</span><br><span class="line"></span><br><span class="line">第6层F6：完全连接到C5，输出84张特征图。它有10164个可训练参数。这里84与输出层的设计有关。</span><br><span class="line"></span><br><span class="line">2:网络结构流程总结</span><br><span class="line">输入32*32→（C1:6个5*5卷积核）→6个28*28的特征图→（S2子采样层）→6个14*14的特征图→（c3:16个5*5的卷积核）→16个10*10的特征图→（s4子采样层）→16个5*5的特征图→（C5:120个5*5的卷积核）→16*120个1*1的特征图→（F6：完全连接层）→输出84张特征图</span><br><span class="line"></span><br><span class="line">3:优缺点</span><br><span class="line">全连接层计算代价过大，而使用全部由卷积层组成的神经网络</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">名词注释：</span><br><span class="line"></span><br><span class="line">1:卷积层</span><br><span class="line">作用：特征提取，由多个卷积核构成;一般卷积核是奇数n*n</span><br><span class="line">如3*3的卷积核</span><br><span class="line">[1 0 -1</span><br><span class="line"> 1 0 -1</span><br><span class="line"> 1 0 -1]可以提取到竖向特征</span><br><span class="line"></span><br><span class="line">2：子采样层（也叫pooling层，池化层）</span><br><span class="line">作用：特征选择</span><br><span class="line">例如：经过卷积层之后得到的特征图为</span><br><span class="line">[1,9</span><br><span class="line"> 2,3]</span><br><span class="line">经过池化层之后只保留9，丢弃掉不满足条件的特征，减少参数，防止过拟合等...</span><br><span class="line">最大池化层和平均池化层：对特征图区域的保留方式不同，一种保留最大值，一种区域求平均然后保存</span><br><span class="line"></span><br><span class="line">3：完全连接层</span><br><span class="line">作用：起到分类器的作用</span><br><span class="line">1*1的特征图出来之后，每个特征经过对应的权值w和偏置b就可以得到不同种类的可能性(sigmod)</span><br><span class="line"></span><br><span class="line">4：特征图</span><br><span class="line">描述二维特征，经过卷积核（或者叫做特征滤波器）得到</span><br><span class="line"></span><br><span class="line">5：感受野</span><br><span class="line">特征对应的输入图像区域的大小</span><br></pre></td></tr></table></figure><p>2.2:AlexNet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1：网络结构</span><br><span class="line">AlexNet网络结构共有8层，前面5层是卷积层，后面3层是全连接层，最后一个全连接层的输出传递给一个1000路的softmax层，对应1000个类标签的分布。输入图片大小为224*224*3(RGB)</span><br><span class="line"></span><br><span class="line">第一层:卷积层,训练时会把输入经过预处理变为227×227×3,使用96个11×11×3的卷积核进行卷积计算,两个GPU分别承担48个运算，每次卷积的步长为4个像素， 生成的特征图为(227-11)/4+1=55，即55×55。</span><br><span class="line">ReLU:线性单元处理,得到2组48*55*55</span><br><span class="line">池化：池化尺寸为3*3，步长为2，池化后的像素规模为27*27*96</span><br><span class="line">归一化：运算的尺寸为5*5，归一化之后的像素规模不变</span><br><span class="line"></span><br><span class="line">第二层：卷积层，对输入27*27*48的2组，进行像素填充2(上下左右)，填充之后变为(27+2+2)*(27+2+2)。256个大小为5*5的卷积核，步长为1，卷积后的大小为27*27*128*2组。</span><br><span class="line">ReLU:这些像素层经过ReLU单元的处理，生成激活像素层，尺寸仍为两组27×27×128的像素层。</span><br><span class="line">池化：池化运算的尺寸为3×3，步长为2，池化后图像的尺寸为(57-3)/2+1=13，即池化后像素的规模为2组13×13×128的像素层</span><br><span class="line">归一化:归一化运算的尺度为5×5，归一化后的像素层的规模为2组13×13×128的像素层，分别由2个GPU进行运算。</span><br><span class="line"></span><br><span class="line">第三层：卷积层，第三层输入数据为第二层输出的2组13×13×128的像素层，为便于后续处理，每幅像素层的上下左右边缘都填充1个像素，填充后变为 (13+1+1)×(13+1+1)×128，分布在两个GPU中进行运算。这一层中每个GPU都有192个卷积核，每个卷积核的尺寸是3×3×256。因此，每个GPU中的卷积核都能对2组13×13×128的像素层的所有数据进行卷积运算。两个GPU有通过交叉的虚线连接，也就是说每个GPU要处理来自前一层的所有GPU的输入。</span><br><span class="line">ReLU：卷积后的像素层经过ReLU单元的处理，生成激活像素层，尺寸仍为2组13×13×192的像素层，分配给两组GPU处理。</span><br><span class="line"></span><br><span class="line">第四层：卷积层，第四层输入数据为第三层输出的2组13×13×192的像素层，类似于第三层，为便于后续处理，每幅像素层的上下左右边缘都填充1个像素，填充后的尺寸变为 (13+1+1)×(13+1+1)×192，分布在两个GPU中进行运算。</span><br><span class="line">这一层中每个GPU都有192个卷积核，每个卷积核的尺寸是3×3×192（与第三层不同，第四层的GPU之间没有虚线连接，也即GPU之间没有通信）。卷积的移动步长是1个像素，经卷积运算后的尺寸为 (13+1+1-3)/1+1=13，每个GPU中有13×13×192个卷积核，2个GPU卷积后生成13×13×384的像素层。</span><br><span class="line">ReLU：卷积后的像素层经过ReLU单元处理，生成激活像素层，尺寸仍为2组13×13×192像素层，分配给两个GPU处理。</span><br><span class="line"></span><br><span class="line">第五层：卷积层，第五层输入数据为第四层输出的2组13×13×192的像素层，为便于后续处理，每幅像素层的上下左右边缘都填充1个像素，填充后的尺寸变为 (13+1+1)×(13+1+1) ，2组像素层数据被送至2个不同的GPU中进行运算。</span><br><span class="line">这一层中每个GPU都有128个卷积核，每个卷积核的尺寸是3×3×192，卷积的步长是1个像素，经卷积后的尺寸为 (13+1+1-3)/1+1=13，每个GPU中有13×13×128个卷积核，2个GPU卷积后生成13×13×256的像素层。</span><br><span class="line">ReLU：卷积后的像素层经过ReLU单元处理，生成激活像素层，尺寸仍为2组13×13×128像素层，由两个GPU分别处理。</span><br><span class="line">池化：2组13×13×128像素层分别在2个不同GPU中进行池化运算处理，池化运算的尺寸为3×3，步长为2，池化后图像的尺寸为 (13-3)/2+1=6，即池化后像素的规模为两组6×6×128的像素层数据，共有6×6×256的像素层数据。</span><br><span class="line"></span><br><span class="line">第六层：卷积（全连接层）,第六层输入数据是第五层的输出，尺寸为6×6×256。本层共有4096个卷积核，每个卷积核的尺寸为6×6×256，由于卷积核的尺寸刚好与待处理特征图（输入）的尺寸相同，即卷积核中的每个系数只与特征图（输入）尺寸的一个像素值相乘，一一对应，因此，该层被称为全连接层。由于卷积核与特征图的尺寸相同，卷积运算后只有一个值，因此，卷积后的像素层尺寸为4096×1×1，即有4096个神经元。</span><br><span class="line">ReLU:这4096个运算结果通过ReLU激活函数生成4096个值。</span><br><span class="line">Dropout:然后再通过Dropout运算，输出4096个结果值。</span><br><span class="line"></span><br><span class="line">第七层：全连接层，第六层输出的4096个数据与第七层的4096个神经元进行全连接，然后经ReLU进行处理后生成4096个数据，再经过Dropout处理后输出4096个数据。</span><br><span class="line"></span><br><span class="line">第八层：全连接层，第七层输出的4096个数据与第八层的1000个神经元进行全连接，经过训练后输出1000个float型的值，这就是预测结果。</span><br><span class="line"></span><br><span class="line">2：优缺点</span><br><span class="line">ReLU,多个GPU：提高了训练速度</span><br><span class="line">重叠池化：提高精度</span><br><span class="line">局部归一化：提高精度</span><br><span class="line">数据扩充，dropout：减少过拟合</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">名词注释：</span><br><span class="line"></span><br><span class="line">1:ReLU（激活函数）</span><br><span class="line">线性修正单元</span><br><span class="line">使用线性的堆叠结果还是线性的，使用sigmod函数会出现梯度消失的问题（即在z很大或者很小的时候梯度接近0）</span><br><span class="line"></span><br><span class="line">2:局部归一化(最常用的min-max归一化)</span><br><span class="line">x_new=(x-x_min)/(x_max-x_min)，增强主导特征（1），提取干扰特征（0）</span><br><span class="line"></span><br><span class="line">3：重叠池化</span><br><span class="line">一般池化的步长和池化大小一致，重叠池化的大小要大于步长；例如3*3池化，步长为2;可以增加精度，如</span><br><span class="line">[9 7 8</span><br><span class="line"> 1 2 3</span><br><span class="line"> 4 5 2]</span><br><span class="line">如果是一般最大池化，则8会被舍去，但是可能8是一个有用特征，使用重叠池化后，在第二个池化结构中会被保留</span><br><span class="line"></span><br><span class="line">4：dropout</span><br><span class="line">我们在前向传播的时候，让某个神经元的激活值以一定的概率p停止工作，这样可以使模型泛化性更强，因为它不会太依赖某些局部的特征。</span><br><span class="line"></span><br><span class="line">5：梯度消失和梯度爆炸</span><br><span class="line">前言：使用反向传播可以快速的提高学习效率，使用反向传播的过程需要依靠梯度来更新权值参数，那么就会出现梯度消失（梯度接近0）和梯度爆炸（梯度接近正无穷的问题）</span><br><span class="line">梯度消失会影响学习速度</span><br><span class="line">梯度爆炸则无法训练</span><br></pre></td></tr></table></figure><p>2.3:ZFNet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1：基于AlexNet进行微调，改变了AlexNet的第一层：即将滤波器的大小11*11变为了7*7，并且将步长4变为了2</span><br><span class="line">2：使用Relu激活函数和交叉熵损失函数</span><br><span class="line">3：使用反卷积，可视化feature map</span><br><span class="line">4：与AlexNet相比，前面的层使用了更小的卷积核和更小的步长，保留了更多的特征</span><br><span class="line">5：通过遮挡，找出了决定图像类别的关键部位。通过实验，说明了深度增加时，网络可以学习到更具有区分的特征。</span><br><span class="line">6：网络训练时，底层参数收敛快，越到高层，则需要越长的时间训练，才能收敛</span><br></pre></td></tr></table></figure><p>2.4:VGG</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">VGG16相比AlexNet的一个改进是采用连续的几个3x3的卷积核代替AlexNet中的较大卷积核（11x11，7x7，5x5）。对于给定的感受野（与输出有关的输入图片的局部大小），采用堆积的小卷积核是优于采用大的卷积核，因为多层非线性层可以增加网络深度来保证学习更复杂的模式，而且代价还比较小（参数更少）。</span><br><span class="line"></span><br><span class="line">简单来说，在VGG中，使用了3个3x3卷积核来代替7x7卷积核，使用了2个3x3卷积核来代替5*5卷积核，这样做的主要目的是在保证具有相同感知野的条件下，提升了网络的深度，在一定程度上提升了神经网络的效果。</span><br><span class="line"></span><br><span class="line">比如，3个步长为1的3x3卷积核的一层层叠加作用可看成一个大小为7的感受野（其实就表示3个3x3连续卷积相当于一个7x7卷积），其参数总量为 3x(9xC^2) ，如果直接使用7x7卷积核，其参数总量为 49xC^2 ，这里 C 指的是输入和输出的通道数。很明显，27xC^2小于49xC^2，即减少了参数；而且3x3卷积核有利于更好地保持图像性质。</span><br><span class="line"></span><br><span class="line">2个3*3可以代替一个5*5；（5-3+1-3+1=1）</span><br><span class="line">3个3*3可以代替一个7*7：（7-3+1-3+1-3+1=1）</span><br><span class="line"></span><br><span class="line">VGGNet的结构非常简洁，整个网络都使用了同样大小的卷积核尺寸（3x3）和最大池化尺寸（2x2）。</span><br><span class="line">几个小滤波器（3x3）卷积层的组合比一个大滤波器（5x5或7x7）卷积层好：</span><br><span class="line">验证了通过不断加深网络结构可以提升性能。</span><br></pre></td></tr></table></figure><p>2.5:GoogleNet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">一般来说，提升网络性能最直接的办法就是增加网络深度和宽度，深度指网络层次数量、宽度指神经元数量。但这种方式存在以下问题：</span><br><span class="line">（1）参数太多，如果训练数据集有限，很容易产生过拟合；</span><br><span class="line">（2）网络越大、参数越多，计算复杂度越大，难以应用；</span><br><span class="line">（3）网络越深，容易出现梯度弥散问题（梯度越往后穿越容易消失），难以优化模型。</span><br><span class="line">因此，GoogLeNet团队提出了Inception网络结构，就是构造一种“基础神经元”结构，来搭建一个稀疏性、高计算性能的网络结构。</span><br><span class="line"></span><br><span class="line">Inception1：</span><br><span class="line">这个Inception原始版本，所有的卷积核都在上一层的所有输出上来做，而那个5x5的卷积核所需的计算量就太大了，造成了特征图的厚度很大，为了避免这种情况，在3x3前、5x5前、max pooling后分别加上了1x1的卷积核，以起到了降低特征图厚度的作用，这也就形成了Inception v1的网络结构.</span><br><span class="line"></span><br><span class="line">1x1的卷积核有什么用呢？</span><br><span class="line">1x1卷积的主要目的是为了减少维度，还用于修正线性激活（ReLU）。比如，上一层的输出为100x100x128，经过具有256个通道的5x5卷积层之后(stride=1，pad=2)，输出数据为100x100x256，其中，卷积层的参数为128x5x5x256= 819200。而假如上一层输出先经过具有32个通道的1x1卷积层，再经过具有256个输出的5x5卷积层，那么输出数据仍为为100x100x256，但卷积参数量已经减少为128x1x1x32 + 32x5x5x256= 204800，大约减少了4倍。</span><br><span class="line"></span><br><span class="line">Inception2:</span><br><span class="line">卷积分解（Factorizing Convolutions）:和vgg一样</span><br><span class="line">n*n的卷积层分解为1*n之后接一个n*1的</span><br><span class="line">降低特征图大小</span><br><span class="line"></span><br><span class="line">Inception3:</span><br><span class="line">将7x7分解成两个一维的卷积（1x7,7x1），3x3也是一样（1x3,3x1），这样的好处，既可以加速计算，又可以将1个卷积拆成2个卷积，使得网络深度进一步增加，增加了网络的非线性（每增加一层都要进行ReLU）。</span><br><span class="line">另外，网络输入从224x224变为了299x299。</span><br><span class="line"></span><br><span class="line">Inception V4:</span><br><span class="line">Inception V4研究了Inception模块与残差连接的结合。ResNet结构大大地加深了网络深度，还极大地提升了训练速度，同时性能也有提升</span><br></pre></td></tr></table></figure><p>2.6:resnet(残差网络)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">残差跳跃式结构：</span><br><span class="line">随着网络层级的不断增加，模型精度不断得到提升，而当网络层级增加到一定的数目以后，训练精度和测试精度迅速下降，这说明当网络变得很深以后，深度网络就变得更加难以训练了。</span><br><span class="line">神经网络在反向传播过程中要不断地传播梯度，而当网络层数加深时，梯度在传播过程中会逐渐消失（假如采用Sigmoid函数，对于幅度为1的信号，每向后传递一层，梯度就衰减为原来的0.25，层数越多，衰减越厉害），导致无法对前面网络层的权重进行有效的调整。</span><br><span class="line"></span><br><span class="line">如果已经学习到较饱和的准确率（或者当发现下层的误差变大时），那么接下来的学习目标就转变为恒等映射的学习，也就是使输入x近似于输出H(x)，以保持在后面的层次中不会造成精度下降。</span><br><span class="line">通过“shortcut connections（捷径连接）”的方式，直接把输入x传到输出作为初始结果，输出结果为H(x)=F(x)+x，当F(x)=0时，那么H(x)=x，也就是上面所提到的恒等映射。于是，ResNet相当于将学习目标改变了，不再是学习一个完整的输出，而是目标值H(X)和x的差值，也就是所谓的残差F(x) := H(x)-x，因此，后面的训练目标就是要将残差结果逼近于0，使到随着网络加深，准确率不下降。</span><br></pre></td></tr></table></figure><p>2.7:SENet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sequeeze-and-Excitation(SE) block并不是一个完整的网络结构，而是一个子结构，可以嵌到其他分类或检测模型中，作者采用SENet block和ResNeXt结合在ILSVRC 2017的分类项目中拿到第一。</span><br><span class="line">SENet的核心思想在于通过网络根据loss去学习特征权重，使得有效的feature map权重大，无效或效果小的feature map权重小的方式训练模型达到更好的结果。</span><br><span class="line">作者的动机是希望显式地建模特征通道之间的相互依赖关系。另外，作者并未引入新的空间维度来进行特征通道间的融合，而是采用了一种全新的「特征重标定」策略。具体来说，就是通过学习的方式来自动获取到每个特征通道的重要程度，然后依照这个重要程度去提升有用的特征并抑制对当前任务用处不大的特征。</span><br><span class="line"></span><br><span class="line">给定一个输入 x，其特征通道数为 c_1，通过一系列卷积等一般变换后得到一个特征通道数为 c_2 的特征，传统的 CNN 不一样的是，接下来通过三个操作来重标定前面得到的特征。</span><br><span class="line"></span><br><span class="line">首先是 Squeeze 操作，顺着空间维度来进行特征压缩，将每个二维的特征通道变成一个实数，这个实数某种程度上具有全局的感受野，并且输出的维度和输入的特征通道数相匹配。它表征着在特征通道上响应的全局分布，而且使得靠近输入的层也可以获得全局的感受野，这一点在很多任务中都是非常有用的。</span><br><span class="line"></span><br><span class="line">其次是 Excitation 操作，它是一个类似于循环神经网络中门的机制。通过参数 w 来为每个特征通道生成权重，其中参数 w 被学习用来显式地建模特征通道间的相关性。</span><br><span class="line"></span><br><span class="line">最后是一个 Reweight 的操作，将 Excitation 的输出的权重看做是进过特征选择后的每个特征通道的重要性，然后通过乘法逐通道加权到先前的特征上，完成在通道维度上的对原始特征的重标定。</span><br></pre></td></tr></table></figure><p>2.8DenseNet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DenseNet的几个优点：</span><br><span class="line">1、减轻了vanishing-gradient（梯度消失）</span><br><span class="line">2、加强了feature的传递</span><br><span class="line">3、更有效地利用了feature</span><br><span class="line">4、一定程度上较少了参数数量</span><br><span class="line"></span><br><span class="line">在深度学习网络中，随着网络深度的加深，梯度消失问题会愈加明显，目前很多论文都针对这个问题提出了解决方案，比如ResNet，Highway Networks，Stochastic depth，FractalNets等，尽管这些算法的网络结构有差别，但是核心都在于：create short paths from early layers to later layers。那么作者是怎么做呢？延续这个思路，那就是在保证网络中层与层之间最大程度的信息传输的前提下，直接将所有层连接起来！</span><br><span class="line"></span><br><span class="line">在传统的卷积神经网络中，如果你有L层，那么就会有L个连接，但是在DenseNet中，会有L(L+1)/2个连接。简单讲，就是每一层的输入来自前面所有层的输出。</span><br><span class="line"></span><br><span class="line">DenseNet的一个优点是网络更窄，参数更少，很大一部分原因得益于这种dense block的设计，后面有提到在dense block中每个卷积层的输出feature map的数量都很小（小于100），而不是像其他网络一样动不动就几百上千的宽度。同时这种连接方式使得特征和梯度的传递更加有效，网络也就更加容易训练。原文的一句话非常喜欢：Each layer has direct access to the gradients from the loss function and the original input signal, leading to an implicit deep supervision.直接解释了为什么这个网络的效果会很好。前面提到过梯度消失问题在网络深度越深的时候越容易出现，原因就是输入信息和梯度信息在很多层之间传递导致的，而现在这种dense connection相当于每一层都直接连接input和loss，因此就可以减轻梯度消失现象，这样更深网络不是问题。另外作者还观察到这种dense connection有正则化的效果，因此对于过拟合有一定的抑制作用。</span><br><span class="line"></span><br><span class="line">该文章提出的DenseNet核心思想在于建立了不同层之间的连接关系，充分利用了feature，进一步减轻了梯度消失问题，加深网络不是问题，而且训练效果非常好。另外，利用bottleneck layer，Translation layer以及较小的growth rate使得网络变窄，参数减少，有效抑制了过拟合，同时计算量也减少了。DenseNet优点很多，而且在和ResNet的对比中优势还是非常明显的。</span><br></pre></td></tr></table></figure><p>EfficientNet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass(调参复杂)</span><br></pre></td></tr></table></figure><h3 id="2：数据增强"><a href="#2：数据增强" class="headerlink" title="2：数据增强"></a>2：数据增强</h3><p>镜像反射和随机剪裁</p><h3 id="3：加快学习的方式"><a href="#3：加快学习的方式" class="headerlink" title="3：加快学习的方式"></a>3：加快学习的方式</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;卷积神经网络&quot;&gt;&lt;a href=&quot;#卷积神经网络&quot; class=&quot;headerlink&quot; title=&quot;卷积神经网络&quot;&gt;&lt;/a&gt;卷积神经网络&lt;/h3&gt;&lt;p&gt;1：卷积神经网络的发展&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020.04.08</title>
    <link href="https://yanyubing.xyz/2020/04/07/2020.04.08/"/>
    <id>https://yanyubing.xyz/2020/04/07/2020.04.08/</id>
    <published>2020-04-07T01:23:53.556Z</published>
    <updated>2020-04-07T01:26:26.891Z</updated>
    
    <content type="html"><![CDATA[<p>今天至以后，我开始从事人工智能算法工程师（计算机视觉方向）；向更专业的方向推进，以后需要的是更底层的掌握，而不仅仅是运用！</p><p>​                            ——2020.04.08</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天至以后，我开始从事人工智能算法工程师（计算机视觉方向）；向更专业的方向推进，以后需要的是更底层的掌握，而不仅仅是运用！&lt;/p&gt;
&lt;p&gt;​                            ——2020.04.08&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ComputerVision_Pytorch</title>
    <link href="https://yanyubing.xyz/2020/04/02/ComputerVision_Pytorch/"/>
    <id>https://yanyubing.xyz/2020/04/02/ComputerVision_Pytorch/</id>
    <published>2020-04-01T16:51:55.635Z</published>
    <updated>2020-04-03T04:04:07.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1：Image-Classification"><a href="#1：Image-Classification" class="headerlink" title="1：Image Classification"></a>1：Image Classification</h3><p>1：实现步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1:包导入：导入所有必需的包和模块</span><br><span class="line">2:训练数据增强：torchvision变换用于通过随机缩放，旋转，镜像和/或裁剪来增强训练数据</span><br><span class="line">3:数据标准化：训练，验证和测试数据经过适当裁剪和标准化</span><br><span class="line">4:数据加载：每个组（训练，验证，测试）的数据都通过Torchvision的ImageFolder加载</span><br><span class="line">5:数据批处理：每个集合的数据都通过Torchvision的DataLoader加载</span><br><span class="line">6:预训练网络：从torchvision.models中加载VGG16等预训练网络，并冻结参数</span><br><span class="line">7:前馈分类器：使用功能作为输入，定义了一个新的前馈网络以用作分类器</span><br><span class="line">8:训练网络：前馈分类器的参数经过适当训练，而要素网络的参数则保持不变</span><br><span class="line">9:验证损失和准确性：在训练期间，将显示验证损失和准确性</span><br><span class="line">10:测试精度：根据测试数据测量网络的精度</span><br><span class="line">11:保存模型：将训练后的模型以及关联的超参数和class_to_idx词典保存为检查点</span><br><span class="line">12:加载检查点：有一个函数可以成功加载检查点并重建模型</span><br><span class="line">13:图像处理：process_image函数成功将PIL图像转换为可以用作训练模型输入的对象</span><br><span class="line">14:类预测：预测函数成功获取图像的路径和检查点，然后返回该图像的前K个最有可能的类</span><br><span class="line">15:使用matplotlib进行健全性检查：创建一个matplotlib图形，显示图像及其相关的前5个最可能的类，并带有实际花名</span><br></pre></td></tr></table></figure><p>2：确定包是否安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 注意使用GPU版本的pytorch</span><br><span class="line"># Imports here</span><br><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import seaborn as sb</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">import torch</span><br><span class="line">from torch import nn</span><br><span class="line">from torch import optim</span><br><span class="line">import torch.nn.functional as F</span><br><span class="line">from torchvision import datasets, transforms, models</span><br></pre></td></tr></table></figure><p>3：加载数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1:数据集切分成为3分，训练集需要做旋转，裁剪等操作来确保模型的适用性</span><br><span class="line">2:图片大小为224*224</span><br><span class="line">3:使用预训练网络，图片需要进行标准化和归一化处理</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># Define transforms for the training, validation, and testing sets</span><br><span class="line">training_transforms = transforms.Compose([transforms.RandomRotation(30),</span><br><span class="line">                                          transforms.RandomResizedCrop(224),</span><br><span class="line">                                          transforms.RandomHorizontalFlip(),</span><br><span class="line">                                          transforms.ToTensor(),</span><br><span class="line">                                          transforms.Normalize([0.485, 0.456, 0.406], </span><br><span class="line">                                                               [0.229, 0.224, 0.225])])</span><br><span class="line"></span><br><span class="line">validation_transforms = transforms.Compose([transforms.Resize(256),</span><br><span class="line">                                            transforms.CenterCrop(224),</span><br><span class="line">                                            transforms.ToTensor(),</span><br><span class="line">                                            transforms.Normalize([0.485, 0.456, 0.406], </span><br><span class="line">                                                                 [0.229, 0.224, 0.225])])</span><br><span class="line"></span><br><span class="line">testing_transforms = transforms.Compose([transforms.Resize(256),</span><br><span class="line">                                         transforms.CenterCrop(224),</span><br><span class="line">                                         transforms.ToTensor(),</span><br><span class="line">                                         transforms.Normalize([0.485, 0.456, 0.406], </span><br><span class="line">                                                              [0.229, 0.224, 0.225])])</span><br><span class="line"></span><br><span class="line"># TODO: Load the datasets with ImageFolder</span><br><span class="line">training_dataset = datasets.ImageFolder(train_dir, transform=training_transforms)</span><br><span class="line">validation_dataset = datasets.ImageFolder(valid_dir, transform=validation_transforms)</span><br><span class="line">testing_dataset = datasets.ImageFolder(test_dir, transform=testing_transforms)</span><br><span class="line"></span><br><span class="line"># TODO: Using the image datasets and the trainforms, define the dataloaders</span><br><span class="line">train_loader = torch.utils.data.DataLoader(training_dataset, batch_size=64, shuffle=True)</span><br><span class="line">validate_loader = torch.utils.data.DataLoader(validation_dataset, batch_size=32)</span><br><span class="line">test_loader = torch.utils.data.DataLoader(testing_dataset, batch_size=32)</span><br></pre></td></tr></table></figure><p>4：标签匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要把种类标签和种类的名字匹配</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">with open(&apos;flower_to_name.json&apos;, &apos;r&apos;) as f:</span><br><span class="line">    flower_to_name = json.load(f)</span><br><span class="line">    </span><br><span class="line">print(len(flower_to_name)) </span><br><span class="line">print(flower_to_name)</span><br></pre></td></tr></table></figure><p>5：建立和训练分类器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Load a pre-trained network (If you need a starting point, the VGG networks work great and are straightforward to use)</span><br><span class="line">Define a new, untrained feed-forward network as a classifier, using ReLU activations and dropout</span><br><span class="line">Train the classifier layers using backpropagation using the pre-trained network to get the features</span><br><span class="line">Track the loss and accuracy on the validation set to determine the best hyperparameters</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Build and train your network</span><br><span class="line"># Transfer Learning</span><br><span class="line">model = models.vgg16(pretrained=True)</span><br><span class="line">#使用前移学习的时候，模型匹配和数据集匹配问题</span><br><span class="line">模型类似，数据集大小不同，需要调整超参数</span><br><span class="line">模型不同，数据集大小相同，要保存检查点</span><br><span class="line">模型类似，数据集大小类似（或者大），直接训练</span><br><span class="line">模型不同，数据集大小不同，既要保存检查点，又要调整超参数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Freeze pretrained model parameters to avoid backpropogating through them</span><br><span class="line">for parameter in model.parameters():</span><br><span class="line">    parameter.requires_grad = False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from collections import OrderedDict</span><br><span class="line"></span><br><span class="line"># Build custom classifier</span><br><span class="line">classifier = nn.Sequential(OrderedDict([(&apos;fc1&apos;, nn.Linear(25088, 5000)),</span><br><span class="line">                                        (&apos;relu&apos;, nn.ReLU()),</span><br><span class="line">                                        (&apos;drop&apos;, nn.Dropout(p=0.5)),</span><br><span class="line">                                        (&apos;fc2&apos;, nn.Linear(5000, 102)),</span><br><span class="line">                                        (&apos;output&apos;, nn.LogSoftmax(dim=1))]))</span><br><span class="line"></span><br><span class="line">model.classifier = classifier</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Function for the validation pass</span><br><span class="line">def validation(model, validateloader, criterion):</span><br><span class="line">    </span><br><span class="line">    val_loss = 0</span><br><span class="line">    accuracy = 0</span><br><span class="line">    </span><br><span class="line">    for images, labels in iter(validateloader):</span><br><span class="line"></span><br><span class="line">        images, labels = images.to(&apos;cuda&apos;), labels.to(&apos;cuda&apos;)</span><br><span class="line"></span><br><span class="line">        output = model.forward(images)</span><br><span class="line">        val_loss += criterion(output, labels).item()</span><br><span class="line"></span><br><span class="line">        probabilities = torch.exp(output)</span><br><span class="line">        </span><br><span class="line">        equality = (labels.data == probabilities.max(dim=1)[1])</span><br><span class="line">        accuracy += equality.type(torch.FloatTensor).mean()</span><br><span class="line">    </span><br><span class="line">    return val_loss, accuracy</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Loss function and gradient descent</span><br><span class="line"></span><br><span class="line">criterion = nn.NLLLoss()</span><br><span class="line"></span><br><span class="line">optimizer = optim.Adam(model.classifier.parameters(), lr=0.001)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># Train the classifier</span><br><span class="line"></span><br><span class="line">from workspace_utils import active_session</span><br><span class="line"></span><br><span class="line">def train_classifier():</span><br><span class="line"></span><br><span class="line">    with active_session():</span><br><span class="line"></span><br><span class="line">        epochs = 15</span><br><span class="line">        steps = 0</span><br><span class="line">        print_every = 40</span><br><span class="line"></span><br><span class="line">        model.to(&apos;cuda&apos;)</span><br><span class="line"></span><br><span class="line">        for e in range(epochs):</span><br><span class="line">        </span><br><span class="line">            model.train()</span><br><span class="line">    </span><br><span class="line">            running_loss = 0</span><br><span class="line">    </span><br><span class="line">            for images, labels in iter(train_loader):</span><br><span class="line">        </span><br><span class="line">                steps += 1</span><br><span class="line">        </span><br><span class="line">                images, labels = images.to(&apos;cuda&apos;), labels.to(&apos;cuda&apos;)</span><br><span class="line">        </span><br><span class="line">                optimizer.zero_grad()</span><br><span class="line">        </span><br><span class="line">                output = model.forward(images)</span><br><span class="line">                loss = criterion(output, labels)</span><br><span class="line">                loss.backward()</span><br><span class="line">                optimizer.step()</span><br><span class="line">        </span><br><span class="line">                running_loss += loss.item()</span><br><span class="line">        </span><br><span class="line">                if steps % print_every == 0:</span><br><span class="line">                </span><br><span class="line">                    model.eval()</span><br><span class="line">                </span><br><span class="line">                    # Turn off gradients for validation, saves memory and computations</span><br><span class="line">                    with torch.no_grad():</span><br><span class="line">                        validation_loss, accuracy = validation(model, validate_loader, criterion)</span><br><span class="line">            </span><br><span class="line">                    print(&quot;Epoch: &#123;&#125;/&#123;&#125;.. &quot;.format(e+1, epochs),</span><br><span class="line">                          &quot;Training Loss: &#123;:.3f&#125;.. &quot;.format(running_loss/print_every),</span><br><span class="line">                          &quot;Validation Loss: &#123;:.3f&#125;.. &quot;.format(validation_loss/len(validate_loader)),</span><br><span class="line">                          &quot;Validation Accuracy: &#123;:.3f&#125;&quot;.format(accuracy/len(validate_loader)))</span><br><span class="line">            </span><br><span class="line">                    running_loss = 0</span><br><span class="line">                    model.train()</span><br><span class="line">                    </span><br><span class="line">train_classifier()</span><br></pre></td></tr></table></figure><p>6：测试网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def test_accuracy(model, test_loader):</span><br><span class="line"></span><br><span class="line">    # Do validation on the test set</span><br><span class="line">    model.eval()</span><br><span class="line">    model.to(&apos;cuda&apos;)</span><br><span class="line"></span><br><span class="line">    with torch.no_grad():</span><br><span class="line">    </span><br><span class="line">        accuracy = 0</span><br><span class="line">    </span><br><span class="line">        for images, labels in iter(test_loader):</span><br><span class="line">    </span><br><span class="line">            images, labels = images.to(&apos;cuda&apos;), labels.to(&apos;cuda&apos;)</span><br><span class="line">    </span><br><span class="line">            output = model.forward(images)</span><br><span class="line"></span><br><span class="line">            probabilities = torch.exp(output)</span><br><span class="line">        </span><br><span class="line">            equality = (labels.data == probabilities.max(dim=1)[1])</span><br><span class="line">        </span><br><span class="line">            accuracy += equality.type(torch.FloatTensor).mean()</span><br><span class="line">        </span><br><span class="line">        print(&quot;Test Accuracy: &#123;&#125;&quot;.format(accuracy/len(test_loader)))    </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">test_accuracy(model, test_loader)</span><br></pre></td></tr></table></figure><p>7：保存检查点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Save the checkpoint</span><br><span class="line"></span><br><span class="line">def save_checkpoint(model):</span><br><span class="line"></span><br><span class="line">    model.class_to_idx = training_dataset.class_to_idx</span><br><span class="line"></span><br><span class="line">    checkpoint = &#123;&apos;arch&apos;: &quot;vgg16&quot;,</span><br><span class="line">                  &apos;class_to_idx&apos;: model.class_to_idx,</span><br><span class="line">                  &apos;model_state_dict&apos;: model.state_dict()</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">    torch.save(checkpoint, &apos;checkpoint.pth&apos;)</span><br><span class="line">    </span><br><span class="line">save_checkpoint(model)</span><br></pre></td></tr></table></figure><p>8：加载检查点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line"></span><br><span class="line"># Function that loads a checkpoint and rebuilds the model</span><br><span class="line"></span><br><span class="line">def load_checkpoint(filepath):</span><br><span class="line">    </span><br><span class="line">    checkpoint = torch.load(filepath)</span><br><span class="line">    </span><br><span class="line">    if checkpoint[&apos;arch&apos;] == &apos;vgg16&apos;:</span><br><span class="line">        </span><br><span class="line">        model = models.vgg16(pretrained=True)</span><br><span class="line">        </span><br><span class="line">        for param in model.parameters():</span><br><span class="line">            param.requires_grad = False</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;Architecture not recognized.&quot;)</span><br><span class="line">    </span><br><span class="line">    model.class_to_idx = checkpoint[&apos;class_to_idx&apos;]</span><br><span class="line">    </span><br><span class="line">    classifier = nn.Sequential(OrderedDict([(&apos;fc1&apos;, nn.Linear(25088, 5000)),</span><br><span class="line">                                            (&apos;relu&apos;, nn.ReLU()),</span><br><span class="line">                                            (&apos;drop&apos;, nn.Dropout(p=0.5)),</span><br><span class="line">                                            (&apos;fc2&apos;, nn.Linear(5000, 102)),</span><br><span class="line">                                            (&apos;output&apos;, nn.LogSoftmax(dim=1))]))</span><br><span class="line"></span><br><span class="line">    model.classifier = classifier</span><br><span class="line">    </span><br><span class="line">    model.load_state_dict(checkpoint[&apos;model_state_dict&apos;])</span><br><span class="line">    </span><br><span class="line">    return model</span><br><span class="line"></span><br><span class="line">#model = load_checkpoint(&apos;checkpoint.pth&apos;)</span><br><span class="line">#print(model)</span><br></pre></td></tr></table></figure><p>9：分类推测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">probs, classes = predict(image_path, model)</span><br><span class="line">print(probs)</span><br><span class="line">print(classes)</span><br><span class="line"># 可能性和种类</span><br><span class="line">&gt; [ 0.01558163  0.01541934  0.01452626  0.01443549  0.01407339]</span><br><span class="line">&gt; [&apos;70&apos;, &apos;3&apos;, &apos;45&apos;, &apos;62&apos;, &apos;55&apos;]</span><br></pre></td></tr></table></figure><p>10：图片处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">def process_image(image_path):</span><br><span class="line">    &apos;&apos;&apos; Scales, crops, and normalizes a PIL image for a PyTorch model,</span><br><span class="line">        returns an Numpy array</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    </span><br><span class="line">    # Process a PIL image for use in a PyTorch model</span><br><span class="line">    </span><br><span class="line">    pil_image = Image.open(image_path)</span><br><span class="line">    </span><br><span class="line">    # Resize</span><br><span class="line">    if pil_image.size[0] &gt; pil_image.size[1]:</span><br><span class="line">        pil_image.thumbnail((5000, 256))</span><br><span class="line">    else:</span><br><span class="line">        pil_image.thumbnail((256, 5000))</span><br><span class="line">        </span><br><span class="line">    # Crop </span><br><span class="line">    left_margin = (pil_image.width-224)/2</span><br><span class="line">    bottom_margin = (pil_image.height-224)/2</span><br><span class="line">    right_margin = left_margin + 224</span><br><span class="line">    top_margin = bottom_margin + 224</span><br><span class="line">    </span><br><span class="line">    pil_image = pil_image.crop((left_margin, bottom_margin, right_margin, top_margin))</span><br><span class="line">    </span><br><span class="line">    # Normalize</span><br><span class="line">    np_image = np.array(pil_image)/255</span><br><span class="line">    mean = np.array([0.485, 0.456, 0.406])</span><br><span class="line">    std = np.array([0.229, 0.224, 0.225])</span><br><span class="line">    np_image = (np_image - mean) / std</span><br><span class="line">    </span><br><span class="line">    # PyTorch expects the color channel to be the first dimension but it&apos;s the third dimension in the PIL image and Numpy array</span><br><span class="line">    # Color channel needs to be first; retain the order of the other two dimensions.</span><br><span class="line">    np_image = np_image.transpose((2, 0, 1))</span><br><span class="line">    </span><br><span class="line">    return np_image</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def imshow(image, ax=None, title=None):</span><br><span class="line">    if ax is None:</span><br><span class="line">        fig, ax = plt.subplots()</span><br><span class="line">    </span><br><span class="line">    # PyTorch tensors assume the color channel is the first dimension</span><br><span class="line">    # but matplotlib assumes is the third dimension</span><br><span class="line">    image = image.transpose((1, 2, 0))</span><br><span class="line">    </span><br><span class="line">    # Undo preprocessing</span><br><span class="line">    mean = np.array([0.485, 0.456, 0.406])</span><br><span class="line">    std = np.array([0.229, 0.224, 0.225])</span><br><span class="line">    image = std * image + mean</span><br><span class="line">    </span><br><span class="line">    if title is not None:</span><br><span class="line">        ax.set_title(title)</span><br><span class="line">    </span><br><span class="line">    # Image needs to be clipped between 0 and 1 or it looks like noise when displayed</span><br><span class="line">    image = np.clip(image, 0, 1)</span><br><span class="line">    </span><br><span class="line">    ax.imshow(image)</span><br><span class="line">    </span><br><span class="line">    return ax</span><br><span class="line"></span><br><span class="line">image = process_image(&apos;flowers/test/1/image_06743.jpg&apos;)</span><br><span class="line">imshow(image)</span><br></pre></td></tr></table></figure><p>11：类别预测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">def predict(image_path, model, topk=5):</span><br><span class="line">    &apos;&apos;&apos; Predict the class (or classes) of an image using a trained deep learning model.</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    </span><br><span class="line">    image = process_image(image_path)</span><br><span class="line">    </span><br><span class="line">    # Convert image to PyTorch tensor first</span><br><span class="line">    image = torch.from_numpy(image).type(torch.cuda.FloatTensor)</span><br><span class="line">    #print(image.shape)</span><br><span class="line">    #print(type(image))</span><br><span class="line">    </span><br><span class="line">    # Returns a new tensor with a dimension of size one inserted at the specified position.</span><br><span class="line">    image = image.unsqueeze(0)</span><br><span class="line">    </span><br><span class="line">    output = model.forward(image)</span><br><span class="line">    </span><br><span class="line">    probabilities = torch.exp(output)</span><br><span class="line">    </span><br><span class="line">    # Probabilities and the indices of those probabilities corresponding to the classes</span><br><span class="line">    top_probabilities, top_indices = probabilities.topk(topk)</span><br><span class="line">    </span><br><span class="line">    # Convert to lists</span><br><span class="line">    top_probabilities = top_probabilities.detach().type(torch.FloatTensor).numpy().tolist()[0] </span><br><span class="line">    top_indices = top_indices.detach().type(torch.FloatTensor).numpy().tolist()[0] </span><br><span class="line">    </span><br><span class="line">    # Convert topk_indices to the actual class labels using class_to_idx</span><br><span class="line">    # Invert the dictionary so you get a mapping from index to class.</span><br><span class="line">    </span><br><span class="line">    idx_to_class = &#123;value: key for key, value in model.class_to_idx.items()&#125;</span><br><span class="line">    #print(idx_to_class)</span><br><span class="line">    </span><br><span class="line">    top_classes = [idx_to_class[index] for index in top_indices]</span><br><span class="line">    </span><br><span class="line">    return top_probabilities, top_classes</span><br><span class="line">    </span><br><span class="line">probs, classes = predict(&apos;flowers/test/15/image_06369.jpg&apos;, model)   </span><br><span class="line">print(probs)</span><br><span class="line">print(classes)</span><br></pre></td></tr></table></figure><p>12：健全性检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Display an image along with the top 5 classes</span><br><span class="line"></span><br><span class="line"># Plot flower input image</span><br><span class="line">plt.figure(figsize = (6,10))</span><br><span class="line">plot_1 = plt.subplot(2,1,1)</span><br><span class="line"></span><br><span class="line">#image = process_image(&apos;flowers/test/1/image_06743.jpg&apos;)</span><br><span class="line">image = process_image(&apos;flowers/test/15/image_06369.jpg&apos;)</span><br><span class="line"></span><br><span class="line">flower_title = flower_to_name[&apos;15&apos;]</span><br><span class="line"></span><br><span class="line">imshow(image, plot_1, title=flower_title);</span><br><span class="line"></span><br><span class="line"># Convert from the class integer encoding to actual flower names</span><br><span class="line">flower_names = [flower_to_name[i] for i in classes]</span><br><span class="line"></span><br><span class="line"># Plot the probabilities for the top 5 classes as a bar graph</span><br><span class="line">plt.subplot(2,1,2)</span><br><span class="line"></span><br><span class="line">sb.barplot(x=probs, y=flower_names, color=sb.color_palette()[0]);</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1：Image-Classification&quot;&gt;&lt;a href=&quot;#1：Image-Classification&quot; class=&quot;headerlink&quot; title=&quot;1：Image Classification&quot;&gt;&lt;/a&gt;1：Image Classificati
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ComputerVisionStep-By-Step(完整版)</title>
    <link href="https://yanyubing.xyz/2020/04/01/ComputerVisionStep-By-Step(%E5%AE%8C%E6%95%B4%E7%89%88)/"/>
    <id>https://yanyubing.xyz/2020/04/01/ComputerVisionStep-By-Step(%E5%AE%8C%E6%95%B4%E7%89%88)/</id>
    <published>2020-03-31T17:06:17.158Z</published>
    <updated>2020-04-01T15:09:50.495Z</updated>
    
    <content type="html"><![CDATA[<p>1： 如何使用PIL / Pillow在Python中为深度学习加载和处理图像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"># 如何使用PIL / Pillow在Python中为深度学习加载和处理图像</span><br><span class="line"># 加载图片方式有很多种：OpenCV等，主要是需要了解有加载图片的步骤</span><br><span class="line"># check Pillow version number</span><br><span class="line">import PIL</span><br><span class="line"># load and show an image with Pillow</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># 版本号</span><br><span class="line">print(&apos;Pillow Version:&apos;, PIL.__version__)</span><br><span class="line"></span><br><span class="line"># load the image</span><br><span class="line">image = Image.open(&apos;opera_house.jpg&apos;)</span><br><span class="line"># summarize some details about the image</span><br><span class="line"># 图片格式</span><br><span class="line">print(image.format)</span><br><span class="line"># 图片通道格式</span><br><span class="line">print(image.mode)</span><br><span class="line"># 图片大小</span><br><span class="line">print(image.size)</span><br><span class="line"># show the image</span><br><span class="line">image.show()</span><br><span class="line"></span><br><span class="line"># 如何将图像转换为NumPy数组并返回</span><br><span class="line"># load and display an image with Matplotlib</span><br><span class="line">from matplotlib import image</span><br><span class="line">from matplotlib import pyplot</span><br><span class="line"></span><br><span class="line"># load image as pixel array</span><br><span class="line">data = image.imread(&apos;opera_house.jpg&apos;)</span><br><span class="line"># summarize shape of the pixel array</span><br><span class="line">print(data.dtype)</span><br><span class="line">print(data.shape)</span><br><span class="line"># display the array of pixels as an image</span><br><span class="line">pyplot.imshow(data)</span><br><span class="line">pyplot.show()</span><br><span class="line"></span><br><span class="line"># load image and convert to and from NumPy array</span><br><span class="line"># 怎么把numpy数组转换为图片</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from PIL import Image</span><br><span class="line">from numpy import asarray</span><br><span class="line"></span><br><span class="line"># load the image</span><br><span class="line">image = Image.open(&apos;opera_house.jpg&apos;)</span><br><span class="line"># convert image to numpy array</span><br><span class="line">data = asarray(image)</span><br><span class="line"># summarize shape</span><br><span class="line">print(data.shape)</span><br><span class="line"># create Pillow image</span><br><span class="line">image2 = Image.fromarray(data)</span><br><span class="line"># summarize image details</span><br><span class="line">print(image2.format)</span><br><span class="line">print(image2.mode)</span><br><span class="line">print(image2.size)</span><br><span class="line"></span><br><span class="line"># 如何保存图片</span><br><span class="line"># example of saving an image in another format</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load the image</span><br><span class="line">image = Image.open(&apos;opera_house.jpg&apos;)</span><br><span class="line"># save as PNG format</span><br><span class="line">image.save(&apos;opera_house.png&apos;, format=&apos;PNG&apos;)</span><br><span class="line"># load the image again and inspect the format</span><br><span class="line">image2 = Image.open(&apos;opera_house.png&apos;)</span><br><span class="line">print(image2.format)</span><br><span class="line"></span><br><span class="line"># 图片从三通道RGB格式转成1通道灰度图片</span><br><span class="line"># example of saving a grayscale version of a loaded image</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load the image</span><br><span class="line">image = Image.open(&apos;opera_house.jpg&apos;)</span><br><span class="line"># convert the image to grayscale</span><br><span class="line">gs_image = image.convert(mode=&apos;L&apos;)</span><br><span class="line"># save in jpeg format</span><br><span class="line">gs_image.save(&apos;opera_house_grayscale.jpg&apos;)</span><br><span class="line"># load the image again and show it</span><br><span class="line">image2 = Image.open(&apos;opera_house_grayscale.jpg&apos;)</span><br><span class="line"># show the image</span><br><span class="line">image2.show()</span><br><span class="line"></span><br><span class="line"># 调整图片的大小,保持宽高比一样</span><br><span class="line"># create a thumbnail of an image</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load the image</span><br><span class="line">image = Image.open(&apos;opera_house.jpg&apos;)</span><br><span class="line"># report the size of the image</span><br><span class="line">print(image.size)</span><br><span class="line"># create a thumbnail and preserve aspect ratio</span><br><span class="line"># 图片的比例不变，最大尺寸（这里是宽度）缩放为底下参数100</span><br><span class="line">image.thumbnail((100, 100))</span><br><span class="line"># report the size of the thumbnail</span><br><span class="line">print(image.size)</span><br><span class="line"></span><br><span class="line"># 调整图片大小，宽高比改变（变成新形状）</span><br><span class="line"># resize image and force a new shape</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load the image</span><br><span class="line">image = Image.open(&apos;opera_house.jpg&apos;)</span><br><span class="line"># report the size of the image</span><br><span class="line">print(image.size)</span><br><span class="line"># resize image and ignore original aspect ratio</span><br><span class="line">img_resized = image.resize((200, 200))</span><br><span class="line"># report the size of the thumbnail</span><br><span class="line">print(img_resized.size)</span><br><span class="line"></span><br><span class="line"># 图片增强(增加样本数):翻转，旋转，裁剪</span><br><span class="line"># 1：翻转</span><br><span class="line"></span><br><span class="line">from PIL import Image</span><br><span class="line">from matplotlib import pyplot</span><br><span class="line"></span><br><span class="line"># load image</span><br><span class="line">image = Image.open(&apos;opera_house.jpg&apos;)</span><br><span class="line"># horizontal flip</span><br><span class="line">hoz_flip = image.transpose(Image.FLIP_LEFT_RIGHT)</span><br><span class="line"># vertical flip</span><br><span class="line">ver_flip = image.transpose(Image.FLIP_TOP_BOTTOM)</span><br><span class="line"># plot all three images using matplotlib</span><br><span class="line">pyplot.subplot(311)</span><br><span class="line">pyplot.imshow(image)</span><br><span class="line">pyplot.subplot(312)</span><br><span class="line">pyplot.imshow(hoz_flip)</span><br><span class="line">pyplot.subplot(313)</span><br><span class="line">pyplot.imshow(ver_flip)</span><br><span class="line">pyplot.show()</span><br><span class="line"></span><br><span class="line"># 2:旋转</span><br><span class="line"># create rotated versions of an image</span><br><span class="line">from PIL import Image</span><br><span class="line">from matplotlib import pyplot</span><br><span class="line"></span><br><span class="line"># load image</span><br><span class="line">image = Image.open(&apos;opera_house.jpg&apos;)</span><br><span class="line"># plot original image</span><br><span class="line">pyplot.subplot(311)</span><br><span class="line">pyplot.imshow(image)</span><br><span class="line"># rotate 45 degrees</span><br><span class="line">pyplot.subplot(312)</span><br><span class="line">pyplot.imshow(image.rotate(45))</span><br><span class="line"># rotate 90 degrees</span><br><span class="line">pyplot.subplot(313)</span><br><span class="line">pyplot.imshow(image.rotate(90))</span><br><span class="line">pyplot.show()</span><br><span class="line"></span><br><span class="line"># 3:裁剪</span><br><span class="line"># example of cropping an image</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load image</span><br><span class="line">image = Image.open(&apos;opera_house.jpg&apos;)</span><br><span class="line"># create a cropped image</span><br><span class="line">cropped = image.crop((100, 100, 200, 200))</span><br><span class="line"># show cropped image</span><br><span class="line">cropped.show()</span><br></pre></td></tr></table></figure><p>2：How to Load, Convert, and Save Images With the Keras API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># Keras很牛B的深度学习框架之一,keras依赖于TensorFlow，版本之间需要对应</span><br><span class="line"># tensorflow1.1.4</span><br><span class="line"># example of loading an image with the Keras API</span><br><span class="line">from keras.preprocessing.image import load_img</span><br><span class="line"></span><br><span class="line"># load the image</span><br><span class="line"># 加载图片</span><br><span class="line">img = load_img(&apos;bondi_beach.jpg&apos;)</span><br><span class="line"># report details about the image</span><br><span class="line">print(type(img))</span><br><span class="line">print(img.format)</span><br><span class="line">print(img.mode)</span><br><span class="line">print(img.size)</span><br><span class="line"># show the image</span><br><span class="line">img.show()</span><br><span class="line"></span><br><span class="line"># 如何使用Keras转换图像</span><br><span class="line"># example of converting an image with the Keras API</span><br><span class="line">from keras.preprocessing.image import load_img</span><br><span class="line">from keras.preprocessing.image import img_to_array</span><br><span class="line">from keras.preprocessing.image import array_to_img</span><br><span class="line"></span><br><span class="line"># load the image</span><br><span class="line">img = load_img(&apos;bondi_beach.jpg&apos;)</span><br><span class="line">print(type(img))</span><br><span class="line"># convert to numpy array</span><br><span class="line">img_array = img_to_array(img)</span><br><span class="line">print(img_array.dtype)</span><br><span class="line">print(img_array.shape)</span><br><span class="line"># convert back to image</span><br><span class="line">img_pil = array_to_img(img_array)</span><br><span class="line">print(type(img))</span><br><span class="line"></span><br><span class="line"># 使用keras保存图片</span><br><span class="line"># example of saving an image with the Keras API</span><br><span class="line">from keras.preprocessing.image import load_img</span><br><span class="line">from keras.preprocessing.image import save_img</span><br><span class="line">from keras.preprocessing.image import img_to_array</span><br><span class="line"></span><br><span class="line"># load image as as grayscale</span><br><span class="line">img = load_img(&apos;bondi_beach.jpg&apos;, grayscale=True)</span><br><span class="line"># convert image to a numpy array</span><br><span class="line">img_array = img_to_array(img)</span><br><span class="line"># save the image with a new filename</span><br><span class="line">save_img(&apos;bondi_beach_grayscale.jpg&apos;, img_array)</span><br><span class="line"># load the image to confirm it was saved correctly</span><br><span class="line">img = load_img(&apos;bondi_beach_grayscale.jpg&apos;)</span><br><span class="line">print(type(img))</span><br><span class="line">print(img.format)</span><br><span class="line">print(img.mode)</span><br><span class="line">print(img.size)</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><p>3：A Gentle Introduction to Channels-First and Channels-Last Image Formats</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># 三通道格式有两种表示方式:</span><br><span class="line"># Channels First: [channels][rows][cols]</span><br><span class="line"># Channels Last :[rows][cols][channels]</span><br><span class="line"></span><br><span class="line"># 矩阵变换</span><br><span class="line"># example of expanding dimensions</span><br><span class="line">from numpy import expand_dims</span><br><span class="line">from numpy import asarray</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load the image</span><br><span class="line">img = Image.open(&apos;penguin_arade.jpg&apos;)</span><br><span class="line"># convert the image to grayscale</span><br><span class="line">img = img.convert(mode=&apos;L&apos;)</span><br><span class="line"># convert to numpy array</span><br><span class="line">data = asarray(img)</span><br><span class="line">print(data.shape)</span><br><span class="line"># add channels first</span><br><span class="line">data_first = expand_dims(data, axis=0)</span><br><span class="line">print(data_first.shape)</span><br><span class="line"># add channels last</span><br><span class="line">data_last = expand_dims(data, axis=2)</span><br><span class="line"># numpy的reshape也是很常见的操作</span><br><span class="line">data = data.reshape((424, 640, 1))</span><br><span class="line">print(data_last.shape)</span><br><span class="line"></span><br><span class="line"># channels优先与channels最后的转换</span><br><span class="line"># change image from channels last to channels first format</span><br><span class="line">from numpy import moveaxis</span><br><span class="line">from numpy import asarray</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load the color image</span><br><span class="line">img = Image.open(&apos;penguin_arade.jpg&apos;)</span><br><span class="line"># 此处的图片为四通道，RGBA，A表示透明度</span><br><span class="line">print(img.mode)</span><br><span class="line"># convert to numpy array</span><br><span class="line">data2 = asarray(img)</span><br><span class="line">print(data2.shape)</span><br><span class="line"># change channels last to channels first format</span><br><span class="line">data2 = moveaxis(data2, 2, 0)</span><br><span class="line">print(data2.shape)</span><br><span class="line"># change channels first to channels last format</span><br><span class="line">data2 = moveaxis(data2, 0, 2)</span><br><span class="line">print(data2.shape)</span><br></pre></td></tr></table></figure><p>4：How to Load Large Datasets From Directories for Deep Learning in Keras</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 怎么从目录中加载大型数据集</span><br><span class="line"></span><br><span class="line"># 数据集目录结构</span><br><span class="line"># data/</span><br><span class="line"># data/train/</span><br><span class="line"># data/test/</span><br><span class="line"># data/validation/</span><br><span class="line"></span><br><span class="line"># 例如，如果我们有一个将汽车的照片分类为红色汽车或蓝色汽车的二进制分类任务，我们将有两个类别，“ 红色 ”和“ 蓝色 ”，因此在每个数据集目录下都有两个类别目录。</span><br><span class="line"># data/</span><br><span class="line"># data/train/</span><br><span class="line"># data/train/red/</span><br><span class="line"># data/train/blue/</span><br><span class="line"># data/test/</span><br><span class="line"># data/test/red/</span><br><span class="line"># data/test/blue/</span><br><span class="line"># data/validation/</span><br><span class="line"># data/validation/red/</span><br><span class="line"># data/validation/blue/</span><br><span class="line"></span><br><span class="line"># 分别放置该类别的图片</span><br><span class="line"># data/train/red/car01.jpg</span><br><span class="line"># data/train/red/car02.jpg</span><br><span class="line"># data/train/red/car03.jpg</span><br><span class="line"># ...</span><br><span class="line"># data/train/blue/car01.jpg</span><br><span class="line"># data/train/blue/car02.jpg</span><br><span class="line"># data/train/blue/car03.jpg</span><br><span class="line"># ...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># create a data generator</span><br><span class="line">from keras.preprocessing.image import ImageDataGenerator</span><br><span class="line"></span><br><span class="line">datagen = ImageDataGenerator()</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"># load and iterate training dataset</span><br><span class="line">train_it = datagen.flow_from_directory(&apos;data/train/&apos;, class_mode=&apos;binary&apos;, batch_size=64)</span><br><span class="line"># load and iterate validation dataset</span><br><span class="line">val_it = datagen.flow_from_directory(&apos;data/validation/&apos;, class_mode=&apos;binary&apos;, batch_size=64)</span><br><span class="line"># load and iterate test dataset</span><br><span class="line">test_it = datagen.flow_from_directory(&apos;data/test/&apos;, class_mode=&apos;binary&apos;, batch_size=64)</span><br><span class="line"></span><br><span class="line"># confirm the iterator works</span><br><span class="line">batchX, batchy = train_it.next()</span><br><span class="line">print(&apos;Batch shape=%s, min=%.3f, max=%.3f&apos; % (batchX.shape, batchX.min(), batchX.max()))</span><br></pre></td></tr></table></figure><p>5：How to Configure Image Data Augmentation in Keras</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 使用keras进行图片增强,增加数据集个数</span><br><span class="line"></span><br><span class="line"># example of horizontal shift image augmentation</span><br><span class="line">from numpy import expand_dims</span><br><span class="line">from keras.preprocessing.image import load_img</span><br><span class="line">from keras.preprocessing.image import img_to_array</span><br><span class="line">from keras.preprocessing.image import ImageDataGenerator</span><br><span class="line">from matplotlib import pyplot</span><br><span class="line"></span><br><span class="line"># load the image</span><br><span class="line">img = load_img(&apos;bird.jpg&apos;)</span><br><span class="line"># convert to numpy array</span><br><span class="line">data = img_to_array(img)</span><br><span class="line"># expand dimension to one sample</span><br><span class="line">samples = expand_dims(data, 0)</span><br><span class="line"># create image data augmentation generator,</span><br><span class="line"># 水平增强像素值</span><br><span class="line"># datagen = ImageDataGenerator(width_shift_range=[-200, 200])</span><br><span class="line"># 高度增强百分比</span><br><span class="line"># datagen = ImageDataGenerator(height_shift_range=0.5)</span><br><span class="line"># 水平翻转增强</span><br><span class="line"># datagen = ImageDataGenerator(horizontal_flip=True)</span><br><span class="line"># 随机选择增强，指定角度范围为90°</span><br><span class="line"># datagen = ImageDataGenerator(rotation_range=90)</span><br><span class="line"># 随机亮度增强，浮点数范围小于1会变暗，大于1会变亮，这里使用0.2-1随机范围变暗方式</span><br><span class="line"># datagen = ImageDataGenerator(brightness_range=[0.2, 1.0])</span><br><span class="line"># 随机变焦增强</span><br><span class="line">datagen = ImageDataGenerator(zoom_range=[0.5, 1.0])</span><br><span class="line"></span><br><span class="line"># prepare iterator</span><br><span class="line">it = datagen.flow(samples, batch_size=1)</span><br><span class="line"># generate samples and plot</span><br><span class="line">for i in range(9):</span><br><span class="line">    # define subplot</span><br><span class="line">    pyplot.subplot(330 + 1 + i)</span><br><span class="line">    # generate batch of images</span><br><span class="line">    batch = it.next()</span><br><span class="line">    # convert to unsigned integers for viewing</span><br><span class="line">    image = batch[0].astype(&apos;uint8&apos;)</span><br><span class="line">    # plot raw pixel data</span><br><span class="line">    pyplot.imshow(image)</span><br><span class="line"># show the figure</span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><p>6：How to Use Test-Time Augmentation to Make Better Predictions</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>10：How to Manually Scale Image Pixel Data for Deep Learning</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"># 如何手动缩放图片数据来适合深度学习</span><br><span class="line"># load and show an image with Pillow</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load the image</span><br><span class="line">image = Image.open(&apos;sydney_bridge.jpg&apos;)</span><br><span class="line"># summarize some details about the image</span><br><span class="line">print(image.format)</span><br><span class="line">print(image.mode)</span><br><span class="line">print(image.size)</span><br><span class="line"># show the image</span><br><span class="line">image.show()</span><br><span class="line"></span><br><span class="line"># 归一化像素值,使像素值在0-1之间，提高训练模型的速度</span><br><span class="line"># example of pixel normalization</span><br><span class="line">from numpy import asarray</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load image</span><br><span class="line">image = Image.open(&apos;sydney_bridge.jpg&apos;)</span><br><span class="line">pixels = asarray(image)</span><br><span class="line"># confirm pixel range is 0-255</span><br><span class="line">print(&apos;Data Type: %s&apos; % pixels.dtype)</span><br><span class="line">print(&apos;Min: %.3f, Max: %.3f&apos; % (pixels.min(), pixels.max()))</span><br><span class="line"># convert from integers to floats</span><br><span class="line">pixels = pixels.astype(&apos;float32&apos;)</span><br><span class="line"># normalize to the range 0-1</span><br><span class="line">pixels /= 255.0</span><br><span class="line"># confirm the normalization</span><br><span class="line">print(&apos;Min: %.3f, Max: %.3f&apos; % (pixels.min(), pixels.max()))</span><br><span class="line"></span><br><span class="line"># 中心化像素值，将像素值减去平均值</span><br><span class="line"># 1:中心化之后归一化处理，均值在0.5范围左右，整体范围在0-1内，这种方式最常见</span><br><span class="line"># 2：归一化之后居中，会出现负数情况</span><br><span class="line"># 全局居中：计算和减去各个颜色通道的平均像素值。</span><br><span class="line"># 局部居中：计算并减去每个颜色通道的平均像素值。</span><br><span class="line"></span><br><span class="line"># example of global centering (subtract mean)</span><br><span class="line"># 全局居中</span><br><span class="line">from numpy import asarray</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load image</span><br><span class="line">image = Image.open(&apos;sydney_bridge.jpg&apos;)</span><br><span class="line">pixels = asarray(image)</span><br><span class="line"># convert from integers to floats</span><br><span class="line">pixels = pixels.astype(&apos;float32&apos;)</span><br><span class="line"># calculate global mean</span><br><span class="line">mean = pixels.mean()</span><br><span class="line">print(&apos;Mean: %.3f&apos; % mean)</span><br><span class="line">print(&apos;Min: %.3f, Max: %.3f&apos; % (pixels.min(), pixels.max()))</span><br><span class="line"># global centering of pixels</span><br><span class="line">pixels = pixels - mean</span><br><span class="line"># confirm it had the desired effect</span><br><span class="line">mean = pixels.mean()</span><br><span class="line">print(&apos;Mean: %.3f&apos; % mean)</span><br><span class="line">print(&apos;Min: %.3f, Max: %.3f&apos; % (pixels.min(), pixels.max()))</span><br><span class="line"></span><br><span class="line"># example of per-channel centering (subtract mean)</span><br><span class="line"># 局部居中</span><br><span class="line">from numpy import asarray</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load image</span><br><span class="line">image = Image.open(&apos;sydney_bridge.jpg&apos;)</span><br><span class="line">pixels = asarray(image)</span><br><span class="line"># convert from integers to floats</span><br><span class="line">pixels = pixels.astype(&apos;float32&apos;)</span><br><span class="line"># calculate per-channel means and standard deviations</span><br><span class="line">means = pixels.mean(axis=(0, 1), dtype=&apos;float64&apos;)</span><br><span class="line">print(&apos;Means: %s&apos; % means)</span><br><span class="line">print(&apos;Mins: %s, Maxs: %s&apos; % (pixels.min(axis=(0, 1)), pixels.max(axis=(0, 1))))</span><br><span class="line"># per-channel centering of pixels</span><br><span class="line">pixels -= means</span><br><span class="line"># confirm it had the desired effect</span><br><span class="line">means = pixels.mean(axis=(0, 1), dtype=&apos;float64&apos;)</span><br><span class="line">print(&apos;Means: %s&apos; % means)</span><br><span class="line">print(&apos;Mins: %s, Maxs: %s&apos; % (pixels.min(axis=(0, 1)), pixels.max(axis=(0, 1))))</span><br><span class="line"></span><br><span class="line"># 标准化像素值,进行高斯分布</span><br><span class="line"># 将像素值的分布转换为标准高斯可能会有所好处：既将像素值定为零，又通过标准偏差将值归一化。</span><br><span class="line"># 结果是像素值的标准高斯分布，平均值为0.0，标准差为1.0。</span><br><span class="line"></span><br><span class="line"># 问题是此时无法可视化，部分像素值为负数</span><br><span class="line"># example of global pixel standardization</span><br><span class="line">from numpy import asarray</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load image</span><br><span class="line">image = Image.open(&apos;sydney_bridge.jpg&apos;)</span><br><span class="line">pixels = asarray(image)</span><br><span class="line"># convert from integers to floats</span><br><span class="line">pixels = pixels.astype(&apos;float32&apos;)</span><br><span class="line"># calculate global mean and standard deviation</span><br><span class="line">mean, std = pixels.mean(), pixels.std()</span><br><span class="line">print(&apos;Mean: %.3f, Standard Deviation: %.3f&apos; % (mean, std))</span><br><span class="line"># global standardization of pixels</span><br><span class="line">pixels = (pixels - mean) / std</span><br><span class="line"># confirm it had the desired effect</span><br><span class="line">mean, std = pixels.mean(), pixels.std()</span><br><span class="line">print(&apos;Mean: %.3f, Standard Deviation: %.3f&apos; % (mean, std))</span><br><span class="line"></span><br><span class="line"># 积极的全球标准化</span><br><span class="line"># 可能希望将像素值保持在正域中，因此可能可以使图像可视化，或者可能是为了在模型中选择激活函数。</span><br><span class="line"># 实现此目的的一种流行方法是将标准化像素值裁剪到[-1，1]范围，然后将值从[-1,1]重新缩放为[0,1]。</span><br><span class="line"># example of global pixel standardization shifted to positive domain</span><br><span class="line">from numpy import asarray</span><br><span class="line">from numpy import clip</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load image</span><br><span class="line">image = Image.open(&apos;sydney_bridge.jpg&apos;)</span><br><span class="line">pixels = asarray(image)</span><br><span class="line"># convert from integers to floats</span><br><span class="line">pixels = pixels.astype(&apos;float32&apos;)</span><br><span class="line"># calculate global mean and standard deviation</span><br><span class="line">mean, std = pixels.mean(), pixels.std()</span><br><span class="line">print(&apos;Mean: %.3f, Standard Deviation: %.3f&apos; % (mean, std))</span><br><span class="line"># global standardization of pixels</span><br><span class="line">pixels = (pixels - mean) / std</span><br><span class="line"># clip pixel values to [-1,1]</span><br><span class="line">pixels = clip(pixels, -1.0, 1.0)</span><br><span class="line"># shift from [-1,1] to [0,1] with 0.5 mean</span><br><span class="line">pixels = (pixels + 1.0) / 2.0</span><br><span class="line"># confirm it had the desired effect</span><br><span class="line">mean, std = pixels.mean(), pixels.std()</span><br><span class="line">print(&apos;Mean: %.3f, Standard Deviation: %.3f&apos; % (mean, std))</span><br><span class="line">print(&apos;Min: %.3f, Max: %.3f&apos; % (pixels.min(), pixels.max()))</span><br><span class="line"></span><br><span class="line"># 本地标准化,每个通道各自处理</span><br><span class="line"># Local Standardization</span><br><span class="line"># 下面的示例计算每个通道加载的图像的平均值和标准偏差，然后使用这些统计信息分别标准化每个通道中的像素。</span><br><span class="line"># example of per-channel pixel standardization</span><br><span class="line">from numpy import asarray</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load image</span><br><span class="line">image = Image.open(&apos;sydney_bridge.jpg&apos;)</span><br><span class="line">pixels = asarray(image)</span><br><span class="line"># convert from integers to floats</span><br><span class="line">pixels = pixels.astype(&apos;float32&apos;)</span><br><span class="line"># calculate per-channel means and standard deviations</span><br><span class="line">means = pixels.mean(axis=(0, 1), dtype=&apos;float64&apos;)</span><br><span class="line">stds = pixels.std(axis=(0, 1), dtype=&apos;float64&apos;)</span><br><span class="line">print(&apos;Means: %s, Stds: %s&apos; % (means, stds))</span><br><span class="line"># per-channel standardization of pixels</span><br><span class="line">pixels = (pixels - means) / stds</span><br><span class="line"># confirm it had the desired effect</span><br><span class="line">means = pixels.mean(axis=(0, 1), dtype=&apos;float64&apos;)</span><br><span class="line">stds = pixels.std(axis=(0, 1), dtype=&apos;float64&apos;)</span><br><span class="line">print(&apos;Means: %s, Stds: %s&apos; % (means, stds))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1： 如何使用PIL / Pillow在Python中为深度学习加载和处理图像&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MachineLearning_ComputerVision</title>
    <link href="https://yanyubing.xyz/2020/03/27/MachineLearning_ComputerVision/"/>
    <id>https://yanyubing.xyz/2020/03/27/MachineLearning_ComputerVision/</id>
    <published>2020-03-27T15:56:04.557Z</published>
    <updated>2020-03-27T18:46:57.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Deep-Learning-for-Computer-Vision"><a href="#Deep-Learning-for-Computer-Vision" class="headerlink" title="Deep Learning for  Computer Vision"></a><strong>Deep Learning for</strong>  <strong>Computer Vision</strong></h3><p>1：<strong>Deep Learning and</strong>  <strong>Computer Vision</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Computer Vision:</span><br><span class="line">Computer Vision, or CV for short, is broadly defined as helping computers to see or extract meaning from digital images such as photographs and videos. Researchers have been working on the problem of helping computers see for more than 50 years, and some great successes have been achieved, such as the face detection available in modern cameras and smartphones. The problem of understanding images is not solved, and may never be. This is primarily because the world is complex and messy. There are few rules. And yet we can easily and effortlessly recognize objects, people, and context.</span><br><span class="line"></span><br><span class="line">Deep Learning:</span><br><span class="line">Deep Learning is a subfield of machine learning concerned with algorithms inspired by the structure and function of the brain called artificial neural networks. A property of deep learning is that the performance of this type of model improves by training it with more examples and by increasing its depth or representational capacity. In addition to scalability, another often-cited benefit of deep learning models is their ability to perform automatic feature extraction from raw data, also called feature learning.</span><br><span class="line"></span><br><span class="line">Deep Promise of Deep Learning for Computer vision:</span><br><span class="line">Deep learning methods are popular for computer vision, primarily because they are delivering on their promise. Some of the first large demonstrations of the power of deep learning were in computer vision, specifically image classification. More recently in object detection and face recognition. The three key promises of deep learning for computer vision are as follows:</span><br><span class="line">1:The Promise of Feature Learning(特征学习)</span><br><span class="line">2:The Promise of Continued Improvement(持续改进)</span><br><span class="line">3:The Promise of End-to-End Models(端到端原则，不需要第三方，自己可以从头到尾解决)</span><br></pre></td></tr></table></figure><p>2: <strong>Preparing Image Data</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># example of pixel normalization</span><br><span class="line">from numpy import asarray</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line"># load image</span><br><span class="line">image = Image.open(&apos;bondi_beach.jpg&apos;)</span><br><span class="line">pixels = asarray(image)</span><br><span class="line"># confirm pixel range is 0-255</span><br><span class="line">print(&apos;Data Type: %s&apos; % pixels.dtype)</span><br><span class="line">print(&apos;Min: %.3f, Max: %.3f&apos; % (pixels.min(), pixels.max()))</span><br><span class="line"># convert from integers to floats</span><br><span class="line"># 归一化</span><br><span class="line">pixels = pixels.astype(&apos;float32&apos;)  # normalize to the range 0-1</span><br><span class="line">pixels /= 255.0</span><br><span class="line"># confirm the normalization</span><br><span class="line">print(&apos;Min: %.3f, Max: %.3f&apos; % (pixels.min(), pixels.max()))</span><br></pre></td></tr></table></figure><p>3:Convolutional Neural Networks(卷积神经网络CNN)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In this lesson, you will discover how to construct a convolutional neural network using a convolutional layer, pooling layer, and fully connected output layer.</span><br><span class="line">在本课程中，您将发现如何使用卷积层，池化层和完全连接的输出层来构建卷积神经网络。</span><br><span class="line">我的理解是：</span><br><span class="line">1：卷积层的作用的提取特征。</span><br><span class="line">2：池化层的作用是降低卷积层对边缘的敏感性。因为卷积层发现边缘过于精确。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Convolutional Layers:</span><br><span class="line">A convolution is the simple application of a filter to an input that results in an activation.Repeated application of the same filter to an input results in a map of activations called a feature map, indicating the locations and strength of a detected feature in an input, such as an image. A convolutional layer can be created by specifying both the number of filters to learn and the fixed size of each filter, often called the kernel shape.</span><br><span class="line">卷积是将过滤器简单地应用到输入上以导致激活的过程。将同一过滤器重复应用到输入上会导致激活图称为特征图，该图表示特征在输入中的位置和强度 ，例如图片。 可以通过指定要学习的过滤器数量和每个过滤器的固定大小（通常称为核形状）来创建卷积层。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pooling Layers:</span><br><span class="line">Pooling layers provide an approach to downsampling feature maps by summarizing the presence of features in patches of the feature map. Maximum pooling, or max pooling, is a pooling operation that calculates the maximum, or largest, value in each patch of each feature map.</span><br><span class="line">池化层通过汇总特征图的补丁中特征的存在，提供了一种对特征图进行下采样的方法。 最大池化或最大池化是一种池化操作，用于计算每个功能图的每个面片中的最大值或最大值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Classifier Layer:</span><br><span class="line">Once the features have been extracted, they can be interpreted and used to make a prediction,such as classifying the type of object in a photograph. This can be achieved by first flattening the two-dimensional feature maps, and then adding a fully connected output layer. For a binary classification problem, the output layer would have one node that would predict a value between 0 and 1 for the two classes.</span><br><span class="line">提取特征后，就可以将其解释并用于进行预测，例如对照片中的对象类型进行分类。 这可以通过首先展平二维特征图，然后添加完全连接的输出层来实现。 对于二进制分类问题，输出层将具有一个节点，该节点将为两个类别预测0到1之间的值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># cnn with single convolutional, pooling and output layer</span><br><span class="line"># The example below creates a convolutional neural network that expects grayscale images with</span><br><span class="line"># the square size of 256 × 256 pixels, with one convolutional layer with 32 filters, each with the</span><br><span class="line"># size of 3 × 3 pixels, a max pooling layer, and a binary classification output layer.</span><br><span class="line"></span><br><span class="line">from keras.models import Sequential</span><br><span class="line">from keras.layers import Conv2D</span><br><span class="line">from keras.layers import MaxPooling2D</span><br><span class="line">from keras.layers import Flatten</span><br><span class="line">from keras.layers import Dense</span><br><span class="line"></span><br><span class="line"># create model</span><br><span class="line">model = Sequential()</span><br><span class="line"># add convolutional layer</span><br><span class="line">model.add(Conv2D(32, (3, 3), input_shape=(256, 256, 1)))</span><br><span class="line">model.add(MaxPooling2D())</span><br><span class="line">model.add(Flatten())</span><br><span class="line">model.add(Dense(1, activation=&apos;sigmoid&apos;))</span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><p>4:<strong>Image Classifification</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># In this lesson, you will discover how to use a pre-trained model to classify photographs of objects.</span><br><span class="line"># Deep convolutional neural network models may take days, or even weeks, to train on very</span><br><span class="line"># large datasets. A way to short-cut this process is to re-use the model weights from pre-trained</span><br><span class="line"># models that were developed for standard computer vision benchmark datasets, such as the</span><br><span class="line"># ImageNet image recognition tasks. The example below uses the VGG-16 pre-trained model to</span><br><span class="line"># classify photographs of objects into one of 1,000 known classes. Download this photograph of a</span><br><span class="line"># dog taken by Justin Morgan4 and released under a permissive license. Save it in your current</span><br><span class="line"># working directory with the filename dog.jpg</span><br><span class="line"># 上面表达的意思d是训练一份分类,网络需要的时间过长，我们使用预训练模型</span><br><span class="line"></span><br><span class="line"># example of using a pre-trained model as a classifier</span><br><span class="line"># example of using a pre-trained model as a classifier</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from keras.preprocessing.image import load_img</span><br><span class="line">from keras.preprocessing.image import img_to_array</span><br><span class="line">from keras.applications.vgg16 import preprocess_input</span><br><span class="line">from keras.applications.vgg16 import decode_predictions</span><br><span class="line">from keras.applications.vgg16 import VGG16</span><br><span class="line"></span><br><span class="line"># load an image from file</span><br><span class="line">image = load_img(&apos;dog.jpg&apos;, target_size=(224, 224))</span><br><span class="line"># convert the image pixels to a numpy array</span><br><span class="line">image = img_to_array(image)</span><br><span class="line"># reshape data for the model</span><br><span class="line">image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))</span><br><span class="line"># prepare the image for the VGG model</span><br><span class="line">image = preprocess_input(image)</span><br><span class="line"># load the model</span><br><span class="line"># The example below uses the VGG-16 pre-trained model to</span><br><span class="line"># classify photographs of objects into one of 1,000 known classes</span><br><span class="line">model = VGG16()</span><br><span class="line"># predict the probability across all output classes</span><br><span class="line">yhat = model.predict(image)</span><br><span class="line"># convert the probabilities to class labels</span><br><span class="line">label = decode_predictions(yhat)</span><br><span class="line"># retrieve the most likely result, e.g. highest probability</span><br><span class="line">label = label[0][0]</span><br><span class="line"># print the classification</span><br><span class="line">print(&apos;%s (%.2f%%)&apos; % (label[1], label[2] * 100))</span><br></pre></td></tr></table></figure><p>5: <strong>Train Image Classifification</strong> <strong>Model</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># In this lesson, you will discover how to train and evaluate a convolutional neural network for</span><br><span class="line"># image classification. The Fashion-MNIST clothing classification problem is a new standard</span><br><span class="line"># dataset used in computer vision and deep learning. It is a dataset comprised of 60,000 small</span><br><span class="line"># square 28 × 28 pixel grayscale images of items of 10 types of clothing, such as shoes, t-shirts,</span><br><span class="line"># dresses, and more. The example below loads the dataset, scales the pixel values, then fits a</span><br><span class="line"># convolutional neural network on the training dataset and evaluates the performance of the</span><br><span class="line"># network on the test dataset. The example will run in just a few minutes on a modern CPU; no</span><br><span class="line"># GPU is required.</span><br><span class="line"></span><br><span class="line"># 在本课程中，您将发现如何训练和评估卷积神经网络进行图像分类。</span><br><span class="line"># Fashion-MNIST服装分类问题是用于计算机视觉和深度学习的新标准数据集。</span><br><span class="line"># 它是一个数据集，由60,000张28×28像素的小方块灰度图像组成，</span><br><span class="line"># 其中包含10种衣服的商品，例如鞋子，T恤,礼服等等。</span><br><span class="line"># 下面的示例加载数据集，缩放像素值，</span><br><span class="line"># 然后在训练数据集上拟合卷积神经网络，并在测试数据集上评估网络的性能。</span><br><span class="line"># 该示例仅需几分钟即可在现代CPU上运行。 不需要GPU。</span><br><span class="line"># fit a cnn on the fashion mnist dataset</span><br><span class="line">from keras.datasets import fashion_mnist</span><br><span class="line">from keras.utils import to_categorical</span><br><span class="line">from keras.models import Sequential</span><br><span class="line">from keras.layers import Conv2D</span><br><span class="line">from keras.layers import MaxPooling2D</span><br><span class="line">from keras.layers import Dense</span><br><span class="line">from keras.layers import Flatten</span><br><span class="line"></span><br><span class="line"># load dataset</span><br><span class="line">(trainX, trainY), (testX, testY) = fashion_mnist.load_data()</span><br><span class="line"># reshape dataset to have a single channel</span><br><span class="line">trainX = trainX.reshape((trainX.shape[0], 28, 28, 1))</span><br><span class="line">testX = testX.reshape((testX.shape[0], 28, 28, 1))</span><br><span class="line"># convert from integers to floats</span><br><span class="line">trainX, testX = trainX.astype(&apos;float32&apos;), testX.astype(&apos;float32&apos;)  # normalize to range 0-1</span><br><span class="line">trainX, testX = trainX / 255.0, testX / 255.0</span><br><span class="line"># one hot encode target values</span><br><span class="line">trainY, testY = to_categorical(trainY), to_categorical(testY)</span><br><span class="line"># define model</span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Conv2D(32, (3, 3), activation=&apos;relu&apos;, kernel_initializer=&apos;he_uniform&apos;,</span><br><span class="line">                 input_shape=(28, 28, 1)))</span><br><span class="line">model.add(MaxPooling2D())</span><br><span class="line">model.add(Flatten())</span><br><span class="line">model.add(Dense(100, activation=&apos;relu&apos;, kernel_initializer=&apos;he_uniform&apos;))</span><br><span class="line">model.add(Dense(10, activation=&apos;softmax&apos;))</span><br><span class="line">model.compile(optimizer=&apos;adam&apos;, loss=&apos;categorical_crossentropy&apos;, metrics=[&apos;accuracy&apos;])</span><br><span class="line"># fit model</span><br><span class="line">model.fit(trainX, trainY, epochs=10, batch_size=32, verbose=2)</span><br><span class="line"># evaluate model</span><br><span class="line">loss, acc = model.evaluate(testX, testY, verbose=0)</span><br><span class="line">print(loss, acc)</span><br><span class="line">model.save(&apos;myModel.model&apos;)</span><br></pre></td></tr></table></figure><p>6:<strong>Image Augmentation</strong> (图片扩充)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In this lesson, you will discover how to use image augmentation. Image data augmentation is a technique that can be used to artificially expand the size of a training dataset by creating modified versions of images in the dataset. Training deep learning neural network models on more data can result in more skillful models, and the augmentation techniques can create variations of the images that can improve the ability of the fit models to generalize what they have learned to new images. The Keras deep learning neural network library provides the capability to fit models using image data augmentation via the ImageDataGenerator class.</span><br><span class="line">图像数据扩充是一种可通过在数据集中创建图像的修改版本来人工扩展训练数据集大小的技术。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># example using image augmentation</span><br><span class="line">from numpy import expand_dims</span><br><span class="line">from keras.preprocessing.image import load_img</span><br><span class="line">from keras.preprocessing.image import img_to_array</span><br><span class="line">from keras.preprocessing.image import ImageDataGenerator</span><br><span class="line">from matplotlib import pyplot</span><br><span class="line"></span><br><span class="line"># load the image</span><br><span class="line">img = load_img(&apos;bird.jpg&apos;)  # convert to numpy array</span><br><span class="line">data = img_to_array(img)</span><br><span class="line"># expand dimension to one sample</span><br><span class="line">samples = expand_dims(data, 0)</span><br><span class="line"># create image data augmentation generator</span><br><span class="line">datagen = ImageDataGenerator(horizontal_flip=True, vertical_flip=True, rotation_range=90)</span><br><span class="line"># prepare iterator</span><br><span class="line">it = datagen.flow(samples, batch_size=1)</span><br><span class="line"># generate samples and plot</span><br><span class="line">for i in range(9):</span><br><span class="line">    # define subplot</span><br><span class="line">    pyplot.subplot(330 + 1 + i)</span><br><span class="line">    # generate batch of images</span><br><span class="line">    batch = it.next()</span><br><span class="line">    # convert to unsigned integers for viewing</span><br><span class="line">    image = batch[0].astype(&apos;uint8&apos;)</span><br><span class="line">    # plot raw pixel data</span><br><span class="line">    pyplot.imshow(image)</span><br><span class="line"># show the figure</span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><p>7:<strong>Face Detection</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In this lesson, you will discover how to use a convolutional neural network for face detection. Face detection is a trivial problem for humans to solve and has been solved reasonably well by classical feature-based techniques, such as the cascade classifier. More recently, deep learning methods have achieved state-of-the-art results on standard face detection datasets. One example is the Multi-task Cascade Convolutional Neural Network,or MTCNN for short. The ipazc/MTCNN project8 provides an open source implementation of the MTCNN that can be installed easily as follows:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># face detection with mtcnn on a photograph</span><br><span class="line">from matplotlib import pyplot</span><br><span class="line">from matplotlib.patches import Rectangle</span><br><span class="line">from mtcnn.mtcnn import MTCNN</span><br><span class="line"></span><br><span class="line"># load image from file</span><br><span class="line">pixels = pyplot.imread(&apos;yan.jpg&apos;)  # create the detector, using default weights</span><br><span class="line">detector = MTCNN()</span><br><span class="line"># detect faces in the image</span><br><span class="line">faces = detector.detect_faces(pixels)</span><br><span class="line"># plot the image</span><br><span class="line">pyplot.imshow(pixels)</span><br><span class="line"># get the context for drawing boxes</span><br><span class="line">ax = pyplot.gca()</span><br><span class="line"># get coordinates from the first face</span><br><span class="line">x, y, width, height = faces[0][&apos;box&apos;]  # create the shape</span><br><span class="line">rect = Rectangle((x, y), width, height, fill=False, color=&apos;red&apos;)  # draw the box</span><br><span class="line">ax.add_patch(rect)</span><br><span class="line"># show the plot</span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Deep-Learning-for-Computer-Vision&quot;&gt;&lt;a href=&quot;#Deep-Learning-for-Computer-Vision&quot; class=&quot;headerlink&quot; title=&quot;Deep Learning for  Compute
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MachineLearningAlgorithms_Python</title>
    <link href="https://yanyubing.xyz/2020/03/26/MachineLearningAlgorithms_Python/"/>
    <id>https://yanyubing.xyz/2020/03/26/MachineLearningAlgorithms_Python/</id>
    <published>2020-03-25T16:28:52.178Z</published>
    <updated>2020-03-27T05:32:31.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从头开始实现算法——Python"><a href="#从头开始实现算法——Python" class="headerlink" title="从头开始实现算法——Python"></a>从头开始实现算法——Python</h1><p>1:从头开始加载数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 加载数据，这样加载的问题是可能出现空行</span><br><span class="line"></span><br><span class="line">from csv import reader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load a CSV file</span><br><span class="line">def load_csv(filename):</span><br><span class="line">    file = open(filename, &quot;r&quot;)</span><br><span class="line">    lines = reader(file)</span><br><span class="line">    dataset = list(lines)</span><br><span class="line">    return dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># load dataset</span><br><span class="line">filename = &apos;pima-indians-diabetes.csv&apos;</span><br><span class="line">dataset = load_csv(filename)</span><br><span class="line"></span><br><span class="line">print(&apos;列：&apos;, len(dataset))</span><br><span class="line">print(&apos;行：&apos;, len(dataset[0]))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Example of loading Pima Indians CSV dataset</span><br><span class="line">#防止空行</span><br><span class="line">from csv import reader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load a CSV file</span><br><span class="line">def load_csv(filename):</span><br><span class="line">    dataset = list()</span><br><span class="line">    with open(filename, &apos;r&apos;) as file:</span><br><span class="line">        csv_reader = reader(file)</span><br><span class="line">        for row in csv_reader:</span><br><span class="line">            if not row:</span><br><span class="line">                continue</span><br><span class="line">            dataset.append(row)</span><br><span class="line">    return dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load dataset</span><br><span class="line">filename = &apos;pima-indians-diabetes.csv&apos;</span><br><span class="line">dataset = load_csv(filename)</span><br><span class="line">print(&apos;列：&apos;, len(dataset))</span><br><span class="line">print(&apos;行：&apos;, len(dataset[0]))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 机器学习中数据一般为数字，浮点型或者整数型,所以需要转换</span><br><span class="line"></span><br><span class="line">from csv import reader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load a CSV file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def load_csv(filename):</span><br><span class="line">    # 这里加rb报错</span><br><span class="line">    file = open(filename, &quot;r&quot;)</span><br><span class="line">    lines = reader(file)</span><br><span class="line">    dataset = list(lines)</span><br><span class="line">    return dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Convert string column to float</span><br><span class="line">def str_column_to_float(dataset, column):</span><br><span class="line">    for row in dataset:</span><br><span class="line">        row[column] = float(row[column].strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load pima-indians-diabetes dataset</span><br><span class="line">filename = &apos;pima-indians-diabetes.csv&apos;</span><br><span class="line">dataset = load_csv(filename)</span><br><span class="line">print(dataset[0])</span><br><span class="line"># convert string columns to float</span><br><span class="line">for i in range(len(dataset[0])):</span><br><span class="line">    str_column_to_float(dataset, i)</span><br><span class="line">print(dataset[0])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 机器学习中，有时候需要结果数据为0,1,2类型，而不是字符串,所以需要转换</span><br><span class="line">from csv import reader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load a CSV file</span><br><span class="line">def load_csv(filename):</span><br><span class="line">    file = open(filename, &quot;r&quot;)</span><br><span class="line">    lines = reader(file)</span><br><span class="line">    dataset = list(lines)</span><br><span class="line">    return dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Convert string column to float</span><br><span class="line">def str_column_to_float(dataset, column):</span><br><span class="line">    for row in dataset:</span><br><span class="line">        row[column] = float(row[column].strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Convert string column to integer</span><br><span class="line">def str_column_to_int(dataset, column):</span><br><span class="line">    class_values = [row[column] for row in dataset]</span><br><span class="line">    unique = set(class_values)</span><br><span class="line">    lookup = dict()</span><br><span class="line">    # 这里进行了转换</span><br><span class="line">    for i, value in enumerate(unique):</span><br><span class="line">        lookup[value] = i</span><br><span class="line">    for row in dataset:</span><br><span class="line">        row[column] = lookup[row[column]]</span><br><span class="line">    return lookup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load iris dataset</span><br><span class="line">filename = &apos;iris.csv&apos;</span><br><span class="line">dataset = load_csv(filename)</span><br><span class="line">print(dataset[0])</span><br><span class="line"># convert string columns to float</span><br><span class="line">for i in range(4):</span><br><span class="line">    # 这里直接使用的函数，因为前面已经实现过</span><br><span class="line">    str_column_to_float(dataset, i)</span><br><span class="line"># convert class column to int</span><br><span class="line">lookup = str_column_to_int(dataset, 4)</span><br><span class="line">print(dataset[0])</span><br><span class="line">print(lookup)</span><br></pre></td></tr></table></figure><p>2:从头开始缩放数据</p><p>规范化数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># 使数据分在0-1之间</span><br><span class="line">from csv import reader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load a CSV file</span><br><span class="line">def load_csv(filename):</span><br><span class="line">    file = open(filename, &quot;r&quot;)</span><br><span class="line">    lines = reader(file)</span><br><span class="line">    dataset = list(lines)</span><br><span class="line">    return dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Convert string column to float</span><br><span class="line">def str_column_to_float(dataset, column):</span><br><span class="line">    for row in dataset:</span><br><span class="line">        row[column] = float(row[column].strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Find the min and max values for each column</span><br><span class="line">def dataset_minmax(dataset):</span><br><span class="line">    minmax = list()</span><br><span class="line">    for i in range(len(dataset[0])):</span><br><span class="line">        col_values = [row[i] for row in dataset]</span><br><span class="line">        value_min = min(col_values)</span><br><span class="line">        value_max = max(col_values)</span><br><span class="line">        minmax.append([value_min, value_max])</span><br><span class="line">    return minmax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Rescale dataset columns to the range 0-1</span><br><span class="line">def normalize_dataset(dataset, minmax):</span><br><span class="line">    for row in dataset:</span><br><span class="line">        for i in range(len(row)):</span><br><span class="line">            # 核心转换步骤</span><br><span class="line">            row[i] = (row[i] - minmax[i][0]) / (minmax[i][1] - minmax[i][0])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load pima-indians-diabetes dataset</span><br><span class="line">filename = &apos;pima-indians-diabetes.csv&apos;</span><br><span class="line">dataset = load_csv(filename)</span><br><span class="line"># convert string columns to float</span><br><span class="line">for i in range(len(dataset[0])):</span><br><span class="line">    str_column_to_float(dataset, i)</span><br><span class="line">print(dataset[0])</span><br><span class="line"># Calculate min and max for each column</span><br><span class="line">minmax = dataset_minmax(dataset)</span><br><span class="line"># Normalize columns</span><br><span class="line">normalize_dataset(dataset, minmax)</span><br><span class="line">print(dataset[0])</span><br></pre></td></tr></table></figure><p>标准化数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"># 标准化是一种重新缩放技术，是指将数据的分布集中在值0上，标准偏差集中在值1上。</span><br><span class="line">from csv import reader</span><br><span class="line">from math import sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load a CSV file</span><br><span class="line">def load_csv(filename):</span><br><span class="line">    file = open(filename, &quot;r&quot;)</span><br><span class="line">    lines = reader(file)</span><br><span class="line">    dataset = list(lines)</span><br><span class="line">    return dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Convert string column to float</span><br><span class="line">def str_column_to_float(dataset, column):</span><br><span class="line">    for row in dataset:</span><br><span class="line">        row[column] = float(row[column].strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># calculate column means</span><br><span class="line">def column_means(dataset):</span><br><span class="line">    means = [0 for i in range(len(dataset[0]))]</span><br><span class="line">    for i in range(len(dataset[0])):</span><br><span class="line">        col_values = [row[i] for row in dataset]</span><br><span class="line">        means[i] = sum(col_values) / float(len(dataset))</span><br><span class="line">    return means</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># calculate column standard deviations</span><br><span class="line">def column_stdevs(dataset, means):</span><br><span class="line">    stdevs = [0 for i in range(len(dataset[0]))]</span><br><span class="line">    for i in range(len(dataset[0])):</span><br><span class="line">        variance = [pow(row[i] - means[i], 2) for row in dataset]</span><br><span class="line">        stdevs[i] = sum(variance)</span><br><span class="line">    stdevs = [sqrt(x / (float(len(dataset) - 1))) for x in stdevs]</span><br><span class="line">    return stdevs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># standardize dataset</span><br><span class="line">def standardize_dataset(dataset, means, stdevs):</span><br><span class="line">    for row in dataset:</span><br><span class="line">        for i in range(len(row)):</span><br><span class="line">            row[i] = (row[i] - means[i]) / stdevs[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load pima-indians-diabetes dataset</span><br><span class="line">filename = &apos;pima-indians-diabetes.csv&apos;</span><br><span class="line">dataset = load_csv(filename)</span><br><span class="line"># convert string columns to float</span><br><span class="line">for i in range(len(dataset[0])):</span><br><span class="line">    str_column_to_float(dataset, i)</span><br><span class="line">print(dataset[0])</span><br><span class="line"># Estimate mean and standard deviation</span><br><span class="line">means = column_means(dataset)</span><br><span class="line">stdevs = column_stdevs(dataset, means)</span><br><span class="line"># standardize dataset</span><br><span class="line">standardize_dataset(dataset, means, stdevs)</span><br><span class="line">print(dataset[0])</span><br></pre></td></tr></table></figure><p>何时标准化或者规范化数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Standardization is a scaling technique that assumes your data conforms to a normal distribution.</span><br><span class="line"></span><br><span class="line">If a given data attribute is normal or close to normal, this is probably the scaling method to use.</span><br><span class="line"></span><br><span class="line">It is good practice to record the summary statistics used in the standardization process, so that you can apply them when standardizing data in the future that you may want to use with your model.</span><br><span class="line"></span><br><span class="line">Normalization is a scaling technique that does not assume any specific distribution.</span><br><span class="line"></span><br><span class="line">If your data is not normally distributed, consider normalizing it prior to applying your machine learning algorithm.</span><br><span class="line"></span><br><span class="line">It is good practice to record the minimum and maximum values for each column used in the normalization process, again, in case you need to normalize new data in the future to be used with your model.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Extensions</span><br><span class="line">There are many other data transforms you could apply.</span><br><span class="line"></span><br><span class="line">The idea of data transforms is to best expose the structure of your problem in your data to the learning algorithm.</span><br><span class="line"></span><br><span class="line">It may not be clear what transforms are required upfront. A combination of trial and error and exploratory data analysis (plots and stats) can help tease out what may work.</span><br><span class="line"></span><br><span class="line">Below are some additional transforms you may want to consider researching and implementing:</span><br><span class="line"></span><br><span class="line">Normalization that permits a configurable range, such as -1 to 1 and more.</span><br><span class="line">Standardization that permits a configurable spread, such as 1, 2 or more standard deviations from the mean.</span><br><span class="line">Exponential transforms such as logarithm, square root and exponents.</span><br><span class="line">Power transforms such as box-cox for fixing the skew in normally distributed data.</span><br></pre></td></tr></table></figure><p>3:从头开始重采样技术</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The goal of predictive modeling is to create models that make good predictions on new data.</span><br><span class="line"></span><br><span class="line">We don’t have access to this new data at the time of training, so we must use statistical methods to estimate the performance of a model on new data.</span><br></pre></td></tr></table></figure><p>训练集和测试集的拆分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from random import seed</span><br><span class="line">from random import randrange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Split a dataset into a train and test set</span><br><span class="line">def train_test_split(dataset, split=0.60):</span><br><span class="line">    train = list()</span><br><span class="line">    train_size = split * len(dataset)</span><br><span class="line">    dataset_copy = list(dataset)</span><br><span class="line">    while len(train) &lt; train_size:</span><br><span class="line">        index = randrange(len(dataset_copy))</span><br><span class="line">        train.append(dataset_copy.pop(index))</span><br><span class="line">    return train, dataset_copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># test train/test split</span><br><span class="line"># 随机种子，随机种子相同时，结果相同</span><br><span class="line">seed(1)</span><br><span class="line">dataset = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]</span><br><span class="line">train, test = train_test_split(dataset)</span><br><span class="line">print(train)</span><br><span class="line">print(test)</span><br></pre></td></tr></table></figure><p>k倍交叉验证拆分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 直接切分可能参数噪声干扰偏差，所有采用K倍交叉验证的方式切分数据集</span><br><span class="line"># 1:将数据集切分成k份，训练集为k-1的部分，测试集为余下的第k份；</span><br><span class="line"># 重复此过程，保证每一组都可以成为验证集</span><br><span class="line"># 数据集大的时候采用10倍交叉验证，数据集小采用3倍交叉验证</span><br><span class="line">from random import seed</span><br><span class="line">from random import randrange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Split a dataset into k folds</span><br><span class="line">def cross_validation_split(dataset, folds=3):</span><br><span class="line">    dataset_split = list()</span><br><span class="line">    dataset_copy = list(dataset)</span><br><span class="line">    fold_size = int(len(dataset) / folds)</span><br><span class="line">    for i in range(folds):</span><br><span class="line">        fold = list()</span><br><span class="line">        while len(fold) &lt; fold_size:</span><br><span class="line">            index = randrange(len(dataset_copy))</span><br><span class="line">            fold.append(dataset_copy.pop(index))</span><br><span class="line">        dataset_split.append(fold)</span><br><span class="line">    return dataset_split</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># test cross validation split</span><br><span class="line">seed(1)</span><br><span class="line">dataset = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]</span><br><span class="line">folds = cross_validation_split(dataset, 4)</span><br><span class="line">print(folds)</span><br></pre></td></tr></table></figure><p>怎么选择重采样模型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据小，执行速度快就采用切分方式；数据集大，需要精度高，则采用K倍交叉验证</span><br></pre></td></tr></table></figure><p>4：从头开始学习指标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用于评估模型的好坏</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1：准确度</span><br><span class="line">2：混淆矩阵</span><br><span class="line">3：平均绝对误差</span><br><span class="line">4：均方误差</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 1:准确度</span><br><span class="line"># 准确的结果值与所有预测的比值</span><br><span class="line"># Calculate accuracy percentage between two lists</span><br><span class="line"></span><br><span class="line">def accuracy_metric(actual, predicted):</span><br><span class="line">    correct = 0</span><br><span class="line">    for i in range(len(actual)):</span><br><span class="line">        if actual[i] == predicted[i]:</span><br><span class="line">            correct += 1</span><br><span class="line">    return correct / float(len(actual)) * 100.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Test accuracy</span><br><span class="line">actual = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1]</span><br><span class="line">predicted = [0, 1, 0, 0, 0, 1, 0, 1, 1, 1]</span><br><span class="line">accuracy = accuracy_metric(actual, predicted)</span><br><span class="line">print(accuracy)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">2:混淆矩阵</span><br><span class="line"># Example of Calculating and Displaying a Pretty Confusion Matrix</span><br><span class="line"></span><br><span class="line"># calculate a confusion matrix</span><br><span class="line">def confusion_matrix(actual, predicted):</span><br><span class="line">    unique = set(actual)</span><br><span class="line">    matrix = [list() for x in range(len(unique))]</span><br><span class="line">    for i in range(len(unique)):</span><br><span class="line">        matrix[i] = [0 for x in range(len(unique))]</span><br><span class="line">    lookup = dict()</span><br><span class="line">    for i, value in enumerate(unique):</span><br><span class="line">        lookup[value] = i</span><br><span class="line">    for i in range(len(actual)):</span><br><span class="line">        x = lookup[actual[i]]</span><br><span class="line">        y = lookup[predicted[i]]</span><br><span class="line">        matrix[y][x] += 1</span><br><span class="line">    return unique, matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># pretty print a confusion matrix</span><br><span class="line">def print_confusion_matrix(unique, matrix):</span><br><span class="line">    print(&apos;(A)&apos; + &apos; &apos;.join(str(x) for x in unique))</span><br><span class="line">    print(&apos;(P)---&apos;)</span><br><span class="line">    for i, x in enumerate(unique):</span><br><span class="line">        print(&quot;%s| %s&quot; % (x, &apos; &apos;.join(str(x) for x in matrix[i])))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Test confusion matrix with integers</span><br><span class="line">actual = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1]</span><br><span class="line">predicted = [0, 1, 1, 0, 0, 1, 0, 1, 1, 1]</span><br><span class="line">unique, matrix = confusion_matrix(actual, predicted)</span><br><span class="line">print_confusion_matrix(unique, matrix)</span><br><span class="line"></span><br><span class="line">输出结果为：</span><br><span class="line">(A)0 1</span><br><span class="line">(P)---</span><br><span class="line">0| 3 1</span><br><span class="line">1| 2 4</span><br><span class="line"></span><br><span class="line">A表示准确值，p表示预测值</span><br><span class="line">上面矩阵表达的是：实际为0，预测为0的个数为3，实际为1，预测为1的个数为4；实际为0，但是预测为0的个数是1，实际为0，但是预测为1的个数为2。即预测准确的为7个，预测错误的为3个。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 平均绝对误差</span><br><span class="line"># MAE = sum( abs(predicted_i - actual_i) ) / total predictions</span><br><span class="line"></span><br><span class="line"># Calculate mean absolute error</span><br><span class="line">def mae_metric(actual, predicted):</span><br><span class="line">    sum_error = 0.0</span><br><span class="line">    for i in range(len(actual)):</span><br><span class="line">        sum_error += abs(predicted[i] - actual[i])</span><br><span class="line">    return sum_error / float(len(actual))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Test RMSE</span><br><span class="line">actual = [0.1, 0.2, 0.3, 0.4, 0.5]</span><br><span class="line">predicted = [0.11, 0.19, 0.29, 0.41, 0.5]</span><br><span class="line">mae = mae_metric(actual, predicted)</span><br><span class="line">print(mae)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 均方根误差</span><br><span class="line"># RMSE = sqrt( sum( (predicted_i - actual_i)^2 ) / total predictions)</span><br><span class="line"></span><br><span class="line">from math import sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Calculate root mean squared error</span><br><span class="line">def rmse_metric(actual, predicted):</span><br><span class="line">    sum_error = 0.0</span><br><span class="line">    for i in range(len(actual)):</span><br><span class="line">        prediction_error = predicted[i] - actual[i]</span><br><span class="line">        sum_error += (prediction_error ** 2)</span><br><span class="line">    mean_error = sum_error / float(len(actual))</span><br><span class="line">    return sqrt(mean_error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Test RMSE</span><br><span class="line">actual = [0.1, 0.2, 0.3, 0.4, 0.5]</span><br><span class="line">predicted = [0.11, 0.19, 0.29, 0.41, 0.5]</span><br><span class="line">rmse = rmse_metric(actual, predicted)</span><br><span class="line">print(rmse)</span><br></pre></td></tr></table></figure><p>5：基线算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基线算法：假设基线算法得到的误差值为20%，那么你用到的算法误差值则需要比20%小，才说明算法有用！</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. Random Prediction Algorithm</span><br><span class="line">2. Zero Rule Algorithm</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">These steps will provide the foundations you need to handle implementing and calculating baseline performance for your machine learning algorithms.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1. Random Prediction Algorithm</span><br><span class="line"></span><br><span class="line">from random import seed</span><br><span class="line">from random import randrange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Generate random predictions</span><br><span class="line">def random_algorithm(train, test):</span><br><span class="line">    output_values = [row[-1] for row in train]</span><br><span class="line">    unique = list(set(output_values))</span><br><span class="line">    predicted = list()</span><br><span class="line">    for row in test:</span><br><span class="line">        index = randrange(len(unique))</span><br><span class="line">        predicted.append(unique[index])</span><br><span class="line">    return predicted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seed(1)</span><br><span class="line">train = [[0], [1], [0], [1], [0], [1]]</span><br><span class="line">test = [[None], [None], [None], [None]]</span><br><span class="line">predictions = random_algorithm(train, test)</span><br><span class="line">print(predictions)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># The Zero Rule Algorithm is a better baseline than the random algorithm.</span><br><span class="line"># It uses more information about a given problem to create one rule in order to make predictions. This rule is different depending on the problem type.</span><br><span class="line"></span><br><span class="line">2. Zero Rule Algorithm  classification</span><br><span class="line"></span><br><span class="line">from random import seed</span><br><span class="line">from random import randrange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># zero rule algorithm for classification</span><br><span class="line">def zero_rule_algorithm_classification(train, test):</span><br><span class="line">    output_values = [row[-1] for row in train]</span><br><span class="line">    prediction = max(set(output_values), key=output_values.count)</span><br><span class="line">    predicted = [prediction for i in range(len(train))]</span><br><span class="line">    return predicted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seed(1)</span><br><span class="line">train = [[&apos;0&apos;], [&apos;0&apos;], [&apos;0&apos;], [&apos;0&apos;], [&apos;1&apos;], [&apos;1&apos;]]</span><br><span class="line">test = [[None], [None], [None], [None]]</span><br><span class="line">predictions = zero_rule_algorithm_classification(train, test)</span><br><span class="line">print(predictions)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from random import seed</span><br><span class="line">from random import randrange</span><br><span class="line"># 回归问题，预测平均值</span><br><span class="line"></span><br><span class="line"># zero rule algorithm for regression</span><br><span class="line">def zero_rule_algorithm_regression(train, test):</span><br><span class="line">    output_values = [row[-1] for row in train]</span><br><span class="line">    prediction = sum(output_values) / float(len(output_values))</span><br><span class="line">    predicted = [prediction for i in range(len(test))]</span><br><span class="line">    return predicted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seed(1)</span><br><span class="line">train = [[10], [15], [12], [15], [18], [20]]</span><br><span class="line">test = [[None], [None], [None], [None]]</span><br><span class="line">predictions = zero_rule_algorithm_regression(train, test)</span><br><span class="line">print(predictions)</span><br></pre></td></tr></table></figure><p>6：从头开始编写测试工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">目的：为了检测算法的性能</span><br><span class="line">1:The resampling method to split-up the dataset.</span><br><span class="line">重采样切分数据集</span><br><span class="line">2:The machine learning algorithm to evaluate.</span><br><span class="line">算法的计算</span><br><span class="line">3:The performance measure by which to evaluate predictions.</span><br><span class="line">用于评估预测的绩效指标</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">测试工具必须允许对不同的机器学习算法进行评估，同时数据集，重采样方法和性能指标应保持不变。</span><br><span class="line">测试工具分为以下两类，对应不同的重采样方法!</span><br><span class="line">区别是：第一种得到的是准确度，而第二种得到的是平均精度（因为会进行多次验证，保证所有的第k份都为测试集）</span><br><span class="line">1:Train-Test Algorithm Test Harness.</span><br><span class="line">2:Cross-Validation Algorithm Test Harness.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">#1: Train-Test Test Harness</span><br><span class="line">from random import seed</span><br><span class="line">from random import randrange</span><br><span class="line">from csv import reader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load a CSV file</span><br><span class="line"># 加载文件</span><br><span class="line">def load_csv(filename):</span><br><span class="line">    file = open(filename, &quot;r&quot;)</span><br><span class="line">    lines = reader(file)</span><br><span class="line">    dataset = list(lines)</span><br><span class="line">    return dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 字符串转换</span><br><span class="line"># Convert string column to float</span><br><span class="line">def str_column_to_float(dataset, column):</span><br><span class="line">    for row in dataset:</span><br><span class="line">        row[column] = float(row[column].strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数据集的切割</span><br><span class="line"># Split a dataset into a train and test set</span><br><span class="line">def train_test_split(dataset, split):</span><br><span class="line">    train = list()</span><br><span class="line">    train_size = split * len(dataset)</span><br><span class="line">    dataset_copy = list(dataset)</span><br><span class="line">    while len(train) &lt; train_size:</span><br><span class="line">        index = randrange(len(dataset_copy))</span><br><span class="line">        train.append(dataset_copy.pop(index))</span><br><span class="line">    return train, dataset_copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 计算准确度</span><br><span class="line"># Calculate accuracy percentage</span><br><span class="line">def accuracy_metric(actual, predicted):</span><br><span class="line">    correct = 0</span><br><span class="line">    for i in range(len(actual)):</span><br><span class="line">        if actual[i] == predicted[i]:</span><br><span class="line">            correct += 1</span><br><span class="line">    return correct / float(len(actual)) * 100.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 使用train/split切割评估算法</span><br><span class="line"># Evaluate an algorithm using a train/test split</span><br><span class="line"></span><br><span class="line"># 使用到的函数有切割(),算法函数,准确度评估函数</span><br><span class="line">def evaluate_algorithm(dataset, algorithm, split, *args):</span><br><span class="line">    train, test = train_test_split(dataset, split)</span><br><span class="line">    test_set = list()</span><br><span class="line">    for row in test:</span><br><span class="line">        row_copy = list(row)</span><br><span class="line">        row_copy[-1] = None</span><br><span class="line">        test_set.append(row_copy)</span><br><span class="line">    predicted = algorithm(train, test_set, *args)</span><br><span class="line">    actual = [row[-1] for row in test]</span><br><span class="line">    accuracy = accuracy_metric(actual, predicted)</span><br><span class="line">    return accuracy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分类问题的0规则算法</span><br><span class="line"># zero rule algorithm for classification</span><br><span class="line">def zero_rule_algorithm_classification(train, test):</span><br><span class="line">    output_values = [row[-1] for row in train]</span><br><span class="line">    prediction = max(set(output_values), key=output_values.count)</span><br><span class="line">    predicted = [prediction for i in range(len(test))]</span><br><span class="line">    return predicted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Test the zero rule algorithm on the diabetes dataset</span><br><span class="line">seed(1)</span><br><span class="line"># load and prepare data</span><br><span class="line">filename = &apos;pima-indians-diabetes.csv&apos;</span><br><span class="line">dataset = load_csv(filename)</span><br><span class="line">for i in range(len(dataset[0])):</span><br><span class="line">    str_column_to_float(dataset, i)</span><br><span class="line"># evaluate algorithm</span><br><span class="line">split = 0.6</span><br><span class="line"># 评估0规则的分类算法</span><br><span class="line">accuracy = evaluate_algorithm(dataset, zero_rule_algorithm_classification, split)</span><br><span class="line">print(&apos;Accuracy: %.3f%%&apos; % (accuracy))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"># 2：Cross-Validation Algorithm Test Harness</span><br><span class="line"></span><br><span class="line"># Cross Validation Test Harness</span><br><span class="line">from random import seed</span><br><span class="line">from random import randrange</span><br><span class="line">from csv import reader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load a CSV file</span><br><span class="line">def load_csv(filename):</span><br><span class="line">    file = open(filename, &quot;r&quot;)</span><br><span class="line">    lines = reader(file)</span><br><span class="line">    dataset = list(lines)</span><br><span class="line">    return dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Convert string column to float</span><br><span class="line">def str_column_to_float(dataset, column):</span><br><span class="line">    for row in dataset:</span><br><span class="line">        row[column] = float(row[column].strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Split a dataset into k folds，使用K被交叉方式切割</span><br><span class="line">def cross_validation_split(dataset, n_folds):</span><br><span class="line">    dataset_split = list()</span><br><span class="line">    dataset_copy = list(dataset)</span><br><span class="line">    fold_size = int(len(dataset) / n_folds)</span><br><span class="line">    for i in range(n_folds):</span><br><span class="line">        fold = list()</span><br><span class="line">        while len(fold) &lt; fold_size:</span><br><span class="line">            index = randrange(len(dataset_copy))</span><br><span class="line">            fold.append(dataset_copy.pop(index))</span><br><span class="line">        dataset_split.append(fold)</span><br><span class="line">    return dataset_split</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Calculate accuracy percentage</span><br><span class="line">def accuracy_metric(actual, predicted):</span><br><span class="line">    correct = 0</span><br><span class="line">    for i in range(len(actual)):</span><br><span class="line">        if actual[i] == predicted[i]:</span><br><span class="line">            correct += 1</span><br><span class="line">    return correct / float(len(actual)) * 100.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Evaluate an algorithm using a cross validation split</span><br><span class="line">def evaluate_algorithm(dataset, algorithm, n_folds, *args):</span><br><span class="line">    folds = cross_validation_split(dataset, n_folds)</span><br><span class="line">    scores = list()</span><br><span class="line">    for fold in folds:</span><br><span class="line">        train_set = list(folds)</span><br><span class="line">        train_set.remove(fold)</span><br><span class="line">        train_set = sum(train_set, [])</span><br><span class="line">        test_set = list()</span><br><span class="line">        for row in fold:</span><br><span class="line">            row_copy = list(row)</span><br><span class="line">            test_set.append(row_copy)</span><br><span class="line">            row_copy[-1] = None</span><br><span class="line">        predicted = algorithm(train_set, test_set, *args)</span><br><span class="line">        actual = [row[-1] for row in fold]</span><br><span class="line">        accuracy = accuracy_metric(actual, predicted)</span><br><span class="line">        scores.append(accuracy)</span><br><span class="line">    return scores</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># zero rule algorithm for classification</span><br><span class="line">def zero_rule_algorithm_classification(train, test):</span><br><span class="line">    output_values = [row[-1] for row in train]</span><br><span class="line">    prediction = max(set(output_values), key=output_values.count)</span><br><span class="line">    predicted = [prediction for i in range(len(test))]</span><br><span class="line">    return predicted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Test the zero rule algorithm on the diabetes dataset</span><br><span class="line">seed(1)</span><br><span class="line"># load and prepare data</span><br><span class="line">filename = &apos;pima-indians-diabetes.csv&apos;</span><br><span class="line">dataset = load_csv(filename)</span><br><span class="line">for i in range(len(dataset[0])):</span><br><span class="line">    str_column_to_float(dataset, i)</span><br><span class="line"># evaluate algorithm</span><br><span class="line">n_folds = 5</span><br><span class="line">scores = evaluate_algorithm(dataset, zero_rule_algorithm_classification, n_folds)</span><br><span class="line">print(&apos;Scores: %s&apos; % scores)</span><br><span class="line">print(&apos;Mean Accuracy: %.3f%%&apos; % (sum(scores) / len(scores)))</span><br></pre></td></tr></table></figure><p>7：从头开始实现线性回归</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 简单线性回归,目标就是计算B0和B1的值</span><br><span class="line"># y = b0 + b1 * x</span><br><span class="line"># B1 = sum((x(i) - mean(x)) * (y(i) - mean(y))) / sum( (x(i) - mean(x))^2 )</span><br><span class="line"># B0 = mean(y) - B1 * mean(x)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">步骤为：</span><br><span class="line">1:Calculate Mean and Variance.</span><br><span class="line">2:Calculate Covariance.</span><br><span class="line">3:Estimate Coefficients.</span><br><span class="line">4:Make Predictions.</span><br><span class="line">5:Predict Insurance.</span><br><span class="line">计算均值和方差。</span><br><span class="line">计算协方差。</span><br><span class="line">估计系数。</span><br><span class="line">作出预测。</span><br><span class="line">预测保险。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"># 简单线性回归，目标就是求出B1和B0</span><br><span class="line"># y = b0 + b1 * x</span><br><span class="line"># B1 = sum((x(i) - mean(x)) * (y(i) - mean(y))) / sum( (x(i) - mean(x))^2 )</span><br><span class="line"># B0 = mean(y) - B1 * mean(x)</span><br><span class="line"></span><br><span class="line"># 计算均值和方差。</span><br><span class="line"># mean(x) = sum(x) / count(x)</span><br><span class="line"># variance = sum( (x - mean(x))^2 )</span><br><span class="line"></span><br><span class="line"># 计算协方差。</span><br><span class="line"># covariance = sum((x(i) - mean(x)) * (y(i) - mean(y)))</span><br><span class="line"></span><br><span class="line"># 估计系数。</span><br><span class="line"># B1 = sum((x(i) - mean(x)) * (y(i) - mean(y))) / sum( (x(i) - mean(x))^2 )</span><br><span class="line"># B1 = covariance(x, y) / variance(x)</span><br><span class="line"># B0 = mean(y) - B1 * mean(x)</span><br><span class="line"></span><br><span class="line"># 作出预测。</span><br><span class="line"># y = b0 + b1 * x</span><br><span class="line"></span><br><span class="line"># 预测保险。</span><br><span class="line"># RMSE 均方根误差</span><br><span class="line"></span><br><span class="line"># Simple Linear Regression on the Swedish Insurance Dataset</span><br><span class="line">from random import seed</span><br><span class="line">from random import randrange</span><br><span class="line">from csv import reader</span><br><span class="line">from math import sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load a CSV file</span><br><span class="line">def load_csv(filename):</span><br><span class="line">    dataset = list()</span><br><span class="line">    with open(filename, &apos;r&apos;) as file:</span><br><span class="line">        csv_reader = reader(file)</span><br><span class="line">        for row in csv_reader:</span><br><span class="line">            if not row:</span><br><span class="line">                continue</span><br><span class="line">            dataset.append(row)</span><br><span class="line">    return dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Convert string column to float</span><br><span class="line">def str_column_to_float(dataset, column):</span><br><span class="line">    for row in dataset:</span><br><span class="line">        row[column] = float(row[column].strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Split a dataset into a train and test set</span><br><span class="line">def train_test_split(dataset, split):</span><br><span class="line">    train = list()</span><br><span class="line">    train_size = split * len(dataset)</span><br><span class="line">    dataset_copy = list(dataset)</span><br><span class="line">    while len(train) &lt; train_size:</span><br><span class="line">        index = randrange(len(dataset_copy))</span><br><span class="line">        train.append(dataset_copy.pop(index))</span><br><span class="line">    return train, dataset_copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Calculate root mean squared error</span><br><span class="line">def rmse_metric(actual, predicted):</span><br><span class="line">    sum_error = 0.0</span><br><span class="line">    for i in range(len(actual)):</span><br><span class="line">        prediction_error = predicted[i] - actual[i]</span><br><span class="line">        sum_error += (prediction_error ** 2)</span><br><span class="line">    mean_error = sum_error / float(len(actual))</span><br><span class="line">    return sqrt(mean_error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Evaluate an algorithm using a train/test split</span><br><span class="line">def evaluate_algorithm(dataset, algorithm, split, *args):</span><br><span class="line">    train, test = train_test_split(dataset, split)</span><br><span class="line">    test_set = list()</span><br><span class="line">    for row in test:</span><br><span class="line">        row_copy = list(row)</span><br><span class="line">        row_copy[-1] = None</span><br><span class="line">        test_set.append(row_copy)</span><br><span class="line">    predicted = algorithm(train, test_set, *args)</span><br><span class="line">    actual = [row[-1] for row in test]</span><br><span class="line">    rmse = rmse_metric(actual, predicted)</span><br><span class="line">    return rmse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Calculate the mean value of a list of numbers</span><br><span class="line">def mean(values):</span><br><span class="line">    return sum(values) / float(len(values))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Calculate covariance between x and y</span><br><span class="line">def covariance(x, mean_x, y, mean_y):</span><br><span class="line">    covar = 0.0</span><br><span class="line">    for i in range(len(x)):</span><br><span class="line">        covar += (x[i] - mean_x) * (y[i] - mean_y)</span><br><span class="line">    return covar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Calculate the variance of a list of numbers</span><br><span class="line">def variance(values, mean):</span><br><span class="line">    return sum([(x - mean) ** 2 for x in values])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Calculate coefficients，返回B0和B1</span><br><span class="line">def coefficients(dataset):</span><br><span class="line">    x = [row[0] for row in dataset]</span><br><span class="line">    y = [row[1] for row in dataset]</span><br><span class="line">    x_mean, y_mean = mean(x), mean(y)</span><br><span class="line">    b1 = covariance(x, x_mean, y, y_mean) / variance(x, x_mean)</span><br><span class="line">    b0 = y_mean - b1 * x_mean</span><br><span class="line">    return [b0, b1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Simple linear regression algorithm</span><br><span class="line"># 训练集最终得到参数B0和B1，得到方程，并且进行预测，返回值为预测值</span><br><span class="line">def simple_linear_regression(train, test):</span><br><span class="line">    predictions = list()</span><br><span class="line">    b0, b1 = coefficients(train)</span><br><span class="line">    for row in test:</span><br><span class="line">        yhat = b0 + b1 * row[0]</span><br><span class="line">        predictions.append(yhat)</span><br><span class="line">    return predictions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Simple linear regression on insurance dataset</span><br><span class="line">seed(1)</span><br><span class="line"># load and prepare data</span><br><span class="line">filename = &apos;insurance.csv&apos;</span><br><span class="line">dataset = load_csv(filename)</span><br><span class="line">for i in range(len(dataset[0])):</span><br><span class="line">    str_column_to_float(dataset, i)</span><br><span class="line"># evaluate algorithm</span><br><span class="line">split = 0.6</span><br><span class="line">rmse = evaluate_algorithm(dataset, simple_linear_regression, split)</span><br><span class="line">print(&apos;RMSE: %.3f&apos; % (rmse))</span><br></pre></td></tr></table></figure><p>8：从头开始实现逻辑回归</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">How to make predictions with a logistic regression model.</span><br><span class="line">How to estimate coefficients using stochastic gradient descent.</span><br><span class="line">How to apply logistic regression to a real prediction problem.</span><br><span class="line">如何使用逻辑回归模型进行预测。</span><br><span class="line">如何使用随机梯度下降法估算系数。</span><br><span class="line">如何将逻辑回归应用于实际的预测问题。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"># A key difference from linear regression is that the output value being modeled is a binary value (0 or 1) rather than a numeric value.</span><br><span class="line"># 逻辑回归的输出值是0-1之间的数，和线性输出的整数值不一样</span><br><span class="line"># yhat = e^(b0 + b1 * x1) / (1 + e^(b0 + b1 * x1))</span><br><span class="line"># yhat = 1.0 / (1.0 + e^(-(b0 + b1 * x1)))</span><br><span class="line"></span><br><span class="line"># Stochastic Gradient Descent（随机梯度下降）</span><br><span class="line"># Gradient Descent is the process of minimizing a function by following the gradients of the cost function.</span><br><span class="line"># This involves knowing the form of the cost as well as the derivative so that from a given point you know the gradient and can move in that direction, e.g. downhill towards the minimum value.</span><br><span class="line"># In machine learning, we can use a technique that evaluates and updates the coefficients every iteration called stochastic gradient descent to minimize the error of a model on our training data.</span><br><span class="line"># The way this optimization algorithm works is that each training instance is shown to the model one at a time. The model makes a prediction for a training instance, the error is calculated and the model is updated in order to reduce the error for the next prediction.</span><br><span class="line"># This procedure can be used to find the set of coefficients in a model that result in the smallest error for the model on the training data. Each iteration, the coefficients (b) in machine learning language are updated using the equation:</span><br><span class="line"></span><br><span class="line"># 最终:b = b + learning_rate * (y - yhat) * yhat * (1 - yhat) * x</span><br><span class="line"></span><br><span class="line"># 1:Making Predictions.（做出预测）</span><br><span class="line"># 2:Estimating Coefficients.（求出参数）</span><br><span class="line"># 3:Diabetes Prediction.（预测）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Logistic Regression on Diabetes Dataset</span><br><span class="line">from random import seed</span><br><span class="line">from random import randrange</span><br><span class="line">from csv import reader</span><br><span class="line">from math import exp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Load a CSV file</span><br><span class="line"># 读取文件</span><br><span class="line">def load_csv(filename):</span><br><span class="line">    dataset = list()</span><br><span class="line">    with open(filename, &apos;r&apos;) as file:</span><br><span class="line">        csv_reader = reader(file)</span><br><span class="line">        for row in csv_reader:</span><br><span class="line">            if not row:</span><br><span class="line">                continue</span><br><span class="line">            dataset.append(row)</span><br><span class="line">    return dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 字符串转换</span><br><span class="line"># Convert string column to float</span><br><span class="line">def str_column_to_float(dataset, column):</span><br><span class="line">    for row in dataset:</span><br><span class="line">        row[column] = float(row[column].strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 找到最大值和最小值，为了进行转换</span><br><span class="line"># Find the min and max values for each column</span><br><span class="line">def dataset_minmax(dataset):</span><br><span class="line">    minmax = list()</span><br><span class="line">    for i in range(len(dataset[0])):</span><br><span class="line">        col_values = [row[i] for row in dataset]</span><br><span class="line">        value_min = min(col_values)</span><br><span class="line">        value_max = max(col_values)</span><br><span class="line">        minmax.append([value_min, value_max])</span><br><span class="line">    return minmax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数据转换</span><br><span class="line"># Rescale dataset columns to the range 0-1</span><br><span class="line">def normalize_dataset(dataset, minmax):</span><br><span class="line">    for row in dataset:</span><br><span class="line">        for i in range(len(row)):</span><br><span class="line">            row[i] = (row[i] - minmax[i][0]) / (minmax[i][1] - minmax[i][0])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 使用K倍交叉验证</span><br><span class="line"># Split a dataset into k folds</span><br><span class="line">def cross_validation_split(dataset, n_folds):</span><br><span class="line">    dataset_split = list()</span><br><span class="line">    dataset_copy = list(dataset)</span><br><span class="line">    fold_size = int(len(dataset) / n_folds)</span><br><span class="line">    for i in range(n_folds):</span><br><span class="line">        fold = list()</span><br><span class="line">        while len(fold) &lt; fold_size:</span><br><span class="line">            index = randrange(len(dataset_copy))</span><br><span class="line">            fold.append(dataset_copy.pop(index))</span><br><span class="line">        dataset_split.append(fold)</span><br><span class="line">    return dataset_split</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 计算模型准确度</span><br><span class="line"># Calculate accuracy percentage</span><br><span class="line">def accuracy_metric(actual, predicted):</span><br><span class="line">    correct = 0</span><br><span class="line">    for i in range(len(actual)):</span><br><span class="line">        if actual[i] == predicted[i]:</span><br><span class="line">            correct += 1</span><br><span class="line">    return correct / float(len(actual)) * 100.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 计算算法的平均准确度</span><br><span class="line"># Evaluate an algorithm using a cross validation split</span><br><span class="line">def evaluate_algorithm(dataset, algorithm, n_folds, *args):</span><br><span class="line">    folds = cross_validation_split(dataset, n_folds)</span><br><span class="line">    scores = list()</span><br><span class="line">    for fold in folds:</span><br><span class="line">        train_set = list(folds)</span><br><span class="line">        train_set.remove(fold)</span><br><span class="line">        train_set = sum(train_set, [])</span><br><span class="line">        test_set = list()</span><br><span class="line">        for row in fold:</span><br><span class="line">            row_copy = list(row)</span><br><span class="line">            test_set.append(row_copy)</span><br><span class="line">            row_copy[-1] = None</span><br><span class="line">        predicted = algorithm(train_set, test_set, *args)</span><br><span class="line">        actual = [row[-1] for row in fold]</span><br><span class="line">        accuracy = accuracy_metric(actual, predicted)</span><br><span class="line">        scores.append(accuracy)</span><br><span class="line">    return scores</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 通过参数进行预测</span><br><span class="line"># Make a prediction with coefficients</span><br><span class="line">def predict(row, coefficients):</span><br><span class="line">    yhat = coefficients[0]</span><br><span class="line">    for i in range(len(row) - 1):</span><br><span class="line">        yhat += coefficients[i + 1] * row[i]</span><br><span class="line">    return 1.0 / (1.0 + exp(-yhat))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 使用随机梯度下降，估算模型的参数</span><br><span class="line"># Estimate logistic regression coefficients using stochastic gradient descent</span><br><span class="line">def coefficients_sgd(train, l_rate, n_epoch):</span><br><span class="line">    coef = [0.0 for i in range(len(train[0]))]</span><br><span class="line">    for epoch in range(n_epoch):</span><br><span class="line">        for row in train:</span><br><span class="line">            yhat = predict(row, coef)</span><br><span class="line">            error = row[-1] - yhat</span><br><span class="line">            coef[0] = coef[0] + l_rate * error * yhat * (1.0 - yhat)</span><br><span class="line">            for i in range(len(row) - 1):</span><br><span class="line">                coef[i + 1] = coef[i + 1] + l_rate * error * yhat * (1.0 - yhat) * row[i]</span><br><span class="line">    return coef</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 线性回归使用随机梯度下降</span><br><span class="line"># Linear Regression Algorithm With Stochastic Gradient Descent</span><br><span class="line">def logistic_regression(train, test, l_rate, n_epoch):</span><br><span class="line">    predictions = list()</span><br><span class="line">    coef = coefficients_sgd(train, l_rate, n_epoch)</span><br><span class="line">    for row in test:</span><br><span class="line">        yhat = predict(row, coef)</span><br><span class="line">        yhat = round(yhat)</span><br><span class="line">        predictions.append(yhat)</span><br><span class="line">    return (predictions)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Test the logistic regression algorithm on the diabetes dataset</span><br><span class="line">seed(1)</span><br><span class="line"># load and prepare data</span><br><span class="line">filename = &apos;pima-indians-diabetes.csv&apos;</span><br><span class="line">dataset = load_csv(filename)</span><br><span class="line">for i in range(len(dataset[0])):</span><br><span class="line">    str_column_to_float(dataset, i)</span><br><span class="line"># normalize</span><br><span class="line">minmax = dataset_minmax(dataset)</span><br><span class="line">normalize_dataset(dataset, minmax)</span><br><span class="line"># evaluate algorithm</span><br><span class="line">n_folds = 5</span><br><span class="line">l_rate = 0.1</span><br><span class="line">n_epoch = 100</span><br><span class="line">scores = evaluate_algorithm(dataset, logistic_regression, n_folds, l_rate, n_epoch)</span><br><span class="line">print(&apos;Scores: %s&apos; % scores)</span><br><span class="line">print(&apos;Mean Accuracy: %.3f%%&apos; % (sum(scores) / float(len(scores))))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从头开始实现算法——Python&quot;&gt;&lt;a href=&quot;#从头开始实现算法——Python&quot; class=&quot;headerlink&quot; title=&quot;从头开始实现算法——Python&quot;&gt;&lt;/a&gt;从头开始实现算法——Python&lt;/h1&gt;&lt;p&gt;1:从头开始加载数据&lt;/p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MachineLearningAlgorithms</title>
    <link href="https://yanyubing.xyz/2020/03/25/MachineLearningAlgorithms/"/>
    <id>https://yanyubing.xyz/2020/03/25/MachineLearningAlgorithms/</id>
    <published>2020-03-24T18:37:28.530Z</published>
    <updated>2020-03-25T16:28:38.675Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Machine-Learning-Algorithms"><a href="#Machine-Learning-Algorithms" class="headerlink" title="Machine Learning Algorithms"></a><strong>Machine Learning Algorithms</strong></h3><h4 id="1：A-Tour-of-Machine-Learning-Algorithms-机器学习算法简介"><a href="#1：A-Tour-of-Machine-Learning-Algorithms-机器学习算法简介" class="headerlink" title="1：A Tour of Machine Learning Algorithms(机器学习算法简介)"></a>1：A Tour of Machine Learning Algorithms(机器学习算法简介)</h4><p>1.1:Algorithms Grouped by Learning Style</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Supervised Learning</span><br><span class="line">2. Unsupervised Learning</span><br><span class="line">3. Semi-Supervised Learning</span><br></pre></td></tr></table></figure><p>1.2:Algorithms Grouped By Similarity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Regression Algorithms:回归算法</span><br><span class="line"></span><br><span class="line">Ordinary Least Squares Regression (OLSR)</span><br><span class="line">Linear Regression</span><br><span class="line">Logistic Regression</span><br><span class="line">Stepwise Regression</span><br><span class="line">Multivariate Adaptive Regression Splines (MARS)</span><br><span class="line">Locally Estimated Scatterplot Smoothing (LOESS)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Instance-based Algorithms:</span><br><span class="line"></span><br><span class="line">k-Nearest Neighbor (kNN)</span><br><span class="line">Learning Vector Quantization (LVQ)</span><br><span class="line">Self-Organizing Map (SOM)</span><br><span class="line">Locally Weighted Learning (LWL)</span><br><span class="line">Support Vector Machines (SVM)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Regularization Algorithms:(正则化)</span><br><span class="line"></span><br><span class="line">Ridge Regression</span><br><span class="line">Least Absolute Shrinkage and Selection Operator (LASSO)</span><br><span class="line">Elastic Net</span><br><span class="line">Least-Angle Regression (LARS)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Decision Tree Algorithms:(决策树算法)</span><br><span class="line"></span><br><span class="line">Classification and Regression Tree (CART)</span><br><span class="line">Iterative Dichotomiser 3 (ID3)</span><br><span class="line">C4.5 and C5.0 (different versions of a powerful approach)</span><br><span class="line">Chi-squared Automatic Interaction Detection (CHAID)</span><br><span class="line">Decision Stump</span><br><span class="line">M5</span><br><span class="line">Conditional Decision Trees</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Bayesian Algorithms:(贝叶斯算法)</span><br><span class="line"></span><br><span class="line">Naive Bayes</span><br><span class="line">Gaussian Naive Bayes</span><br><span class="line">Multinomial Naive Bayes</span><br><span class="line">Averaged One-Dependence Estimators (AODE)</span><br><span class="line">Bayesian Belief Network (BBN)</span><br><span class="line">Bayesian Network (BN)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Clustering Algorithms:</span><br><span class="line"></span><br><span class="line">k-Means</span><br><span class="line">k-Medians</span><br><span class="line">Expectation Maximisation (EM)</span><br><span class="line">Hierarchical Clustering</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Association Rule Learning Algorithms:</span><br><span class="line"></span><br><span class="line">Apriori algorithm</span><br><span class="line">Eclat algorithm</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Artificial Neural Network Algorithms:(自然神经网络算法)</span><br><span class="line"></span><br><span class="line">Perceptron</span><br><span class="line">Multilayer Perceptrons (MLP)</span><br><span class="line">Back-Propagation</span><br><span class="line">Stochastic Gradient Descent</span><br><span class="line">Hopfield Network</span><br><span class="line">Radial Basis Function Network (RBFN)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Deep Learning Algorithms:(深度学习算法)</span><br><span class="line"></span><br><span class="line">Convolutional Neural Network (CNN)</span><br><span class="line">Recurrent Neural Networks (RNNs)</span><br><span class="line">Long Short-Term Memory Networks (LSTMs)</span><br><span class="line">Stacked Auto-Encoders</span><br><span class="line">Deep Boltzmann Machine (DBM)</span><br><span class="line">Deep Belief Networks (DBN)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Dimensionality Reduction Algorithms:(降维算法)</span><br><span class="line"></span><br><span class="line">Principal Component Analysis (PCA)</span><br><span class="line">Principal Component Regression (PCR)</span><br><span class="line">Partial Least Squares Regression (PLSR)</span><br><span class="line">Sammon Mapping</span><br><span class="line">Multidimensional Scaling (MDS)</span><br><span class="line">Projection Pursuit</span><br><span class="line">Linear Discriminant Analysis (LDA)</span><br><span class="line">Mixture Discriminant Analysis (MDA)</span><br><span class="line">Quadratic Discriminant Analysis (QDA)</span><br><span class="line">Flexible Discriminant Analysis (FDA)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Ensemble Algorithms:(算法集，合并的算法)</span><br><span class="line"></span><br><span class="line">Boosting</span><br><span class="line">Bootstrapped Aggregation (Bagging)</span><br><span class="line">AdaBoost</span><br><span class="line">Weighted Average (Blending)</span><br><span class="line">Stacked Generalization (Stacking)</span><br><span class="line">Gradient Boosting Machines (GBM)</span><br><span class="line">Gradient Boosted Regression Trees (GBRT)</span><br><span class="line">Random Forest</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Other Machine Learning Algorithms:其他机器学习算法</span><br><span class="line"></span><br><span class="line">Feature selection algorithms</span><br><span class="line">Algorithm accuracy evaluation</span><br><span class="line">Performance measures</span><br><span class="line">Optimization algorithms</span><br><span class="line"></span><br><span class="line">Computational intelligence (evolutionary algorithms, etc.)</span><br><span class="line">Computer Vision (CV)</span><br><span class="line">Natural Language Processing (NLP)</span><br><span class="line">Recommender Systems</span><br><span class="line">Reinforcement Learning</span><br><span class="line">Graphical Models</span><br><span class="line">And more…</span><br></pre></td></tr></table></figure><h4 id="2-How-Machine-Learning-Algorithms-Work-they-learn-a-mapping-of-input-to-output"><a href="#2-How-Machine-Learning-Algorithms-Work-they-learn-a-mapping-of-input-to-output" class="headerlink" title="2:How Machine Learning Algorithms Work (they learn a mapping of input to output)"></a>2:How Machine Learning Algorithms Work (they learn a mapping of input to output)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的理解就是，机器学习算法的目的就是:得到最优的函数关系（最小误差，或者最快效率等等）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Learning a Function</span><br><span class="line">Machine learning algorithms are described as learning a target function (f) that best maps input variables (X) to an output variable (Y).</span><br><span class="line"></span><br><span class="line">Y = f(X)</span><br><span class="line"></span><br><span class="line">This is a general learning task where we would like to make predictions in the future (Y) given new examples of input variables (X).</span><br><span class="line"></span><br><span class="line">We don’t know what the function (f) looks like or it’s form. If we did, we would use it directly and we would not need to learn it from data using machine learning algorithms.</span><br><span class="line"></span><br><span class="line">It is harder than you think. There is also error (e) that is independent of the input data (X).</span><br><span class="line"></span><br><span class="line">Y = f(X) + e</span><br><span class="line"></span><br><span class="line">This error might be error such as not having enough attributes to sufficiently characterize the best mapping from X to Y. This error is called irreducible error because no matter how good we get at estimating the target function (f), we cannot reduce this error.</span><br><span class="line"></span><br><span class="line">This is to say, that the problem of learning a function from data is a difficult problem and this is the reason why the field of machine learning and machine learning algorithms exist.</span><br></pre></td></tr></table></figure><p>3:Parametric and Nonparametric Machine Learning Algorithms(参数和非参数学习)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我的理解是：</span><br><span class="line">参数学习更加适合小的网络，速度快，固定模型的参数;</span><br><span class="line">非参数学习精准度更高，但是可能出现过拟合（噪声使用）。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Parametric Machine Learning Algorithms</span><br><span class="line"></span><br><span class="line">Assumptions can greatly simplify the learning process, but can also limit what can be learned. Algorithms that simplify the function to a known form are called parametric machine learning algorithms.</span><br><span class="line"></span><br><span class="line">Logistic Regression</span><br><span class="line">Linear Discriminant Analysis</span><br><span class="line">Perceptron</span><br><span class="line">Naive Bayes</span><br><span class="line">Simple Neural Networks</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Nonparametric Machine Learning Algorithms</span><br><span class="line"></span><br><span class="line">k-Nearest Neighbors</span><br><span class="line">Decision Trees like CART and C4.5</span><br><span class="line">Support Vector Machines</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Machine-Learning-Algorithms&quot;&gt;&lt;a href=&quot;#Machine-Learning-Algorithms&quot; class=&quot;headerlink&quot; title=&quot;Machine Learning Algorithms&quot;&gt;&lt;/a&gt;&lt;stro
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MachineLearning_math</title>
    <link href="https://yanyubing.xyz/2020/03/22/MachineLearning_math/"/>
    <id>https://yanyubing.xyz/2020/03/22/MachineLearning_math/</id>
    <published>2020-03-22T06:42:37.975Z</published>
    <updated>2020-03-24T18:29:34.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器学习数学基础"><a href="#机器学习数学基础" class="headerlink" title="机器学习数学基础"></a>机器学习数学基础</h1><h3 id="1：概率论"><a href="#1：概率论" class="headerlink" title="1：概率论"></a>1：概率论</h3><p>1:<strong>Probability and Machine</strong> <strong>Learning</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❼ Noise in observations, e.g. measurement errors and random noise.</span><br><span class="line">❼ Incomplete coverage of the domain, e.g. you can never observe all data.</span><br><span class="line">❼ Imperfect model of the problem, e.g. all models have errors, some are useful.Uncertainty in applied machine learning is managed using probability.</span><br><span class="line">❼ Probability and statistics help us to understand and quantify the expected value and variability of variables in our observations from the domain.</span><br><span class="line">❼ Probability helps to understand and quantify the expected distribution and density of observations in the domain.</span><br><span class="line">❼ Probability helps to understand and quantify the expected capability and variance in performance of our predictive models when applied to new data.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is the bedrock of machine learning. On top of that, we may need models to predict a probability, we may use probability to develop predictive models (e.g. Naive Bayes), and we may use probabilistic frameworks to train predictive models (e.g. maximum likelihood estimation).</span><br></pre></td></tr></table></figure><p>2:<strong>Three Types of Probability</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">joint:联合概率 A且B一起发生的概率</span><br><span class="line">marginal：边缘概率 在边缘分布中，我们得到只关于一个变量的概率分布，而不再考虑另一变量的影响，实际上进行了降维操作。在实际应用中，例如人工神经网络的神经元互相关联，在计算它们各自的参数的时候，就会使用边缘分布计算得到某一特定神经元（变量）的值。</span><br><span class="line">conditional probability：条件概率  A发生的情况下B发生的概率</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">For this lesson, you must practice calculating joint, marginal, and conditional probabilities. For</span><br><span class="line">example, if a family has two children and the oldest is a boy, what is the probability of this</span><br><span class="line">family having two sons? This is called the Boy or Girl Problem and is one of many common toy</span><br><span class="line">problems for practicing probability.</span><br><span class="line"></span><br><span class="line">解答：两个孩子的性别可能的顺序是，男女，男男，女男，女女。</span><br><span class="line">已知第一个是男孩子，则条件概率的结果为1/4（两个男孩子的概率）除以1/2(第一个是男孩子的概率)=1/2</span><br></pre></td></tr></table></figure><p>3:<strong>Probability Distributions</strong> （概率分布）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">随机分布：</span><br><span class="line">❼ Discrete Random Variable. 离散随机分布</span><br><span class="line">❼ Continuous Random Variable.连续随机分布</span><br><span class="line"></span><br><span class="line">Discrete Probability Distributions（离散概率分布）</span><br><span class="line">❼ Poisson distribution.（伯努利分布）</span><br><span class="line">❼ Bernoulli and binomial distributions.（伯努利和二项分布）</span><br><span class="line">❼ Multinoulli and multinomial distributions.（多元分布和多项式分布）</span><br><span class="line"></span><br><span class="line">Continuous Probability Distributions(连续概率分布)</span><br><span class="line">❼ Normal or Gaussian distribution.(高斯分布）</span><br><span class="line">❼ Exponential distribution.</span><br><span class="line">❼ Pareto distribution.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># sample a normal distribution</span><br><span class="line"># Randomly Sample Gaussian Distribution（随机抽样高斯分布）</span><br><span class="line">from numpy.random import normal</span><br><span class="line"></span><br><span class="line"># define the distribution</span><br><span class="line"># 定义结构</span><br><span class="line">mu = 50</span><br><span class="line">sigma = 5</span><br><span class="line">n = 10</span><br><span class="line"># generate the sample</span><br><span class="line">sample = normal(mu, sigma, n)</span><br><span class="line">print(sample)</span><br></pre></td></tr></table></figure><p>4：<strong>Naive Bayes Classififier</strong>（朴素贝叶斯分类器）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Naive Bayes Classififier（朴素贝叶斯分类器）</span><br><span class="line"></span><br><span class="line"># example of gaussian naive bayes</span><br><span class="line">from sklearn.datasets import make_blobs</span><br><span class="line">from sklearn.naive_bayes import GaussianNB</span><br><span class="line"></span><br><span class="line"># generate 2d classification dataset</span><br><span class="line"># Generate isotropic Gaussian blobs for clustering.</span><br><span class="line">X, y = make_blobs(n_samples=100, centers=2, n_features=2, random_state=1)</span><br><span class="line"></span><br><span class="line"># define the model</span><br><span class="line">model = GaussianNB()</span><br><span class="line"># fit the model，训练模型</span><br><span class="line">model.fit(X, y)</span><br><span class="line"># select a single sample()选择一个样本</span><br><span class="line">Xsample, ysample = [X[0]], y[0]</span><br><span class="line"># make a probabilistic prediction，概率预测</span><br><span class="line">yhat_prob = model.predict_proba(Xsample)</span><br><span class="line">print(&apos;Predicted Probabilities: &apos;, yhat_prob)</span><br><span class="line"># make a classification prediction</span><br><span class="line">yhat_class = model.predict(Xsample)</span><br><span class="line">print(&apos;Predicted Class: &apos;, yhat_class)</span><br><span class="line">print(&apos;Truth: y=%d&apos; % ysample)</span><br></pre></td></tr></table></figure><p>5：<strong>Entropy and Cross-Entropy</strong>（熵和互熵）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❼ Low Probability Event: High Information (surprising).</span><br><span class="line">❼ High Probability Event: Low Information (unsurprising).</span><br><span class="line">低概率事件更具有价值(高信息值)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># example of calculating cross-entropy</span><br><span class="line">from math import log2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># calculate cross-entropy</span><br><span class="line">def cross_entropy(p, q):</span><br><span class="line">    return -sum([p[i] * log2(q[i]) for i in range(len(p))])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># define data</span><br><span class="line">p = [0.10, 0.40, 0.50]</span><br><span class="line">q = [0.80, 0.15, 0.05]</span><br><span class="line"># calculate cross-entropy H(P, Q)</span><br><span class="line">ce_pq = cross_entropy(p, q)</span><br><span class="line">print(&apos;H(P, Q): %.3f bits&apos; % ce_pq)</span><br><span class="line"># calculate cross-entropy H(Q, P)</span><br><span class="line">ce_qp = cross_entropy(q, p)</span><br><span class="line">print(&apos;H(Q, P): %.3f bits&apos; % ce_qp)</span><br></pre></td></tr></table></figure><p>6： <strong>Naive Classififiers</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 朴素分类器，一个简单概率验证</span><br><span class="line"></span><br><span class="line"># example of the majority class naive classifier in scikit-learn</span><br><span class="line">from numpy import asarray</span><br><span class="line">from sklearn.dummy import DummyClassifier</span><br><span class="line">from sklearn.metrics import accuracy_score</span><br><span class="line"></span><br><span class="line"># define dataset</span><br><span class="line">X = asarray([0 for _ in range(100)])</span><br><span class="line">class0 = [0 for _ in range(25)]</span><br><span class="line">class1 = [1 for _ in range(75)]</span><br><span class="line">y = asarray(class0 + class1)</span><br><span class="line"># reshape data for sklearn</span><br><span class="line">X = X.reshape((len(X), 1))</span><br><span class="line"># define model</span><br><span class="line">model = DummyClassifier(strategy=&apos;most_frequent&apos;)  # fit model</span><br><span class="line">model.fit(X, y)</span><br><span class="line"># print(X)</span><br><span class="line"># print(y)</span><br><span class="line"># make predictions</span><br><span class="line">yhat = model.predict(X)</span><br><span class="line"># print(yhat)</span><br><span class="line"># calculate accuracy</span><br><span class="line">accuracy = accuracy_score(y, yhat)</span><br><span class="line">print(&apos;Accuracy: %.3f&apos; % accuracy)</span><br></pre></td></tr></table></figure><p>7:<strong>Probability Scores</strong> (用于比较预测值和实际值的偏差的两种方式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1:Log Loss Score</span><br><span class="line">2:Brier Score</span><br><span class="line"># A model with perfect skill has a log loss score of 0.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># example of log loss,评价预测值和实际值的差距</span><br><span class="line">from numpy import asarray</span><br><span class="line">from sklearn.metrics import log_loss</span><br><span class="line"># define data</span><br><span class="line">y_true = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]</span><br><span class="line">y_pred = [0.8, 0.9, 0.9, 0.6, 0.8, 0.1, 0.4, 0.2, 0.1, 0.3]</span><br><span class="line"># define data as expected, e.g. probability for each event &#123;0, 1&#125;</span><br><span class="line">y_true = asarray([[v, 1-v] for v in y_true])</span><br><span class="line">y_pred = asarray([[v, 1-v] for v in y_pred])</span><br><span class="line"># calculate log loss</span><br><span class="line">loss = log_loss(y_true, y_pred)</span><br><span class="line">print(loss)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># example of brier loss</span><br><span class="line">from sklearn.metrics import brier_score_loss</span><br><span class="line"># define data</span><br><span class="line">y_true = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]</span><br><span class="line">y_pred = [0.8, 0.9, 0.9, 0.6, 0.8, 0.1, 0.4, 0.2, 0.1, 0.3]</span><br><span class="line"># calculate brier score</span><br><span class="line">score = brier_score_loss(y_true, y_pred, pos_label=1)</span><br><span class="line">print(score)</span><br></pre></td></tr></table></figure><h3 id="2：统计学"><a href="#2：统计学" class="headerlink" title="2：统计学"></a>2：统计学</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">统计学是应用数学的一个分支，主要通过利用概率论建立数学模型，收集所观察系统的数据，进行量化的分析、总结，并进而进行推断和预测，为相关决策提供依据和参考。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我的理解是：</span><br><span class="line">①为了更好的描述一些指标，让数据看起来更加直观！</span><br><span class="line">②更多的是在对数据的处理环节使用到的一些方法</span><br></pre></td></tr></table></figure><p>1：<strong>Statistics and Machine</strong> <strong>Learning</strong></p><p>1.1：数据准备过程需要的统计方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❼ Outlier detection.</span><br><span class="line">❼ Missing value imputation.</span><br><span class="line">❼ Data sampling.</span><br><span class="line">❼ Data scaling.</span><br><span class="line">❼ Variable encoding.</span><br><span class="line">❼ And much more.</span><br></pre></td></tr></table></figure><p>1.2：模型评估中的统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❼ Data sampling.</span><br><span class="line">❼ Data resampling.重采样技术进行模型评估，例如k-fold cross-validation(k倍交叉集验证)</span><br><span class="line">❼ Experimental design.</span><br></pre></td></tr></table></figure><p>1.3：模型选择中的统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❼ Checking for a significant difference between results.</span><br><span class="line">❼ Quantifying the size of the difference between results.</span><br><span class="line">This might include the use of statistical hypothesis tests.</span><br></pre></td></tr></table></figure><p>1.4：模型总结中的统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❼ Summarizing the expected skill of the model on average.</span><br><span class="line">❼ Quantifying the expected variability of the skill of the model in practice.</span><br></pre></td></tr></table></figure><p>1.5：预测值中的统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❼ Quantifying the expected variability for the prediction.</span><br></pre></td></tr></table></figure><p>2： <strong>Introduction to Statistics</strong>（统计概论）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❼ Descriptive Statistics: Descriptive statistics refer to methods for summarizing raw observations into information that we can understand and share.</span><br><span class="line">❼ Inferential Statistics: Inferential statistics is a fancy name for methods that aid in quantifying properties of the domain or population from a smaller set of obtained observations called a sample.</span><br></pre></td></tr></table></figure><p>3：<strong>Gaussian Distribution and</strong>  <strong>Descriptive Stats</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># calculate summary stats</span><br><span class="line">from numpy.random import seed</span><br><span class="line">from numpy.random import randn</span><br><span class="line">from numpy import mean</span><br><span class="line">from numpy import var</span><br><span class="line">from numpy import std</span><br><span class="line"></span><br><span class="line"># seed the random number generator</span><br><span class="line">seed(1)</span><br><span class="line"># generate univariate observations</span><br><span class="line">data = 5 * randn(10000) + 50</span><br><span class="line"># calculate statistics</span><br><span class="line">print(&apos;Mean: %.3f&apos; % mean(data))</span><br><span class="line">print(&apos;Variance: %.3f&apos; % var(data))</span><br><span class="line">print(&apos;Standard Deviation: %.3f&apos; % std(data))</span><br></pre></td></tr></table></figure><p>4:<strong>Correlation Between</strong> <strong>Variables</strong>(变量之间的相关性)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❼ Positive Correlation: Both variables change in the same direction.(正相关)</span><br><span class="line">❼ Neutral Correlation: No relationship in the change of the variables.（无关）</span><br><span class="line">❼ Negative Correlation: Variables change in opposite directions.（负相关）</span><br><span class="line">在数据中如果有两个变量相关性很强，则可以考虑删除其中一个变量，来提高算法的性能(执行效率)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># calculate correlation coefficient</span><br><span class="line">from numpy.random import seed</span><br><span class="line">from numpy.random import randn</span><br><span class="line">from scipy.stats import pearsonr</span><br><span class="line"># seed random number generator</span><br><span class="line">seed(1)</span><br><span class="line"># prepare data</span><br><span class="line">data1 = 20 * randn(1000) + 100</span><br><span class="line">data2 = data1 + (10 * randn(1000) + 50)</span><br><span class="line"># calculate Pearson&apos;s correlation</span><br><span class="line">corr, p = pearsonr(data1, data2)</span><br><span class="line"># display the correlation</span><br><span class="line">print(&apos;Pearsons correlation: %.3f&apos; % corr)</span><br></pre></td></tr></table></figure><p>5:<strong>Statistical Hypothesis Tests</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是用来判断样本与样本、样本与总体的差异是由抽样误差引起还是本质差别造成的统计推断方法。显著性检验是假设检验中最常用的一种方法，也是一种最基本的统计推断形式，其基本原理是先对总体的特征做出某种假设，然后通过抽样研究的统计推理，对此假设应该被拒绝还是接受做出推断。常用的假设检验方法有Z检验、t检验、卡方检验、F检验等 [1]  。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 统计假设性原则</span><br><span class="line"># student&apos;s t-test</span><br><span class="line">from numpy.random import seed</span><br><span class="line">from numpy.random import randn</span><br><span class="line">from scipy.stats import ttest_ind</span><br><span class="line"></span><br><span class="line"># seed the random number generator</span><br><span class="line">seed(1)</span><br><span class="line"># generate two independent samples</span><br><span class="line">data1 = 5 * randn(100) + 52</span><br><span class="line">data2 = 5 * randn(100) + 51</span><br><span class="line"># compare samples</span><br><span class="line">stat, p = ttest_ind(data1, data2)</span><br><span class="line">print(&apos;Statistics=%.3f, p=%.3f&apos; % (stat, p))</span><br><span class="line"># interpret</span><br><span class="line">alpha = 0.05</span><br><span class="line">if p &gt; alpha:</span><br><span class="line">    print(&apos;Same distributions (fail to reject H0)&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;Different distributions (reject H0)&apos;)</span><br></pre></td></tr></table></figure><p>6:<strong>Estimation Statistics</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># calculate the confidence interval</span><br><span class="line">from statsmodels.stats.proportion import proportion_confint</span><br><span class="line"></span><br><span class="line"># calculate the interval</span><br><span class="line">lower, upper = proportion_confint(88, 100, 0.05)</span><br><span class="line">print(&apos;lower=%.3f, upper=%.3f&apos; % (lower, upper))</span><br></pre></td></tr></table></figure><p>7: <strong>Nonparametric Statistics</strong>(非参数统计)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># example of the mann-whitney u test</span><br><span class="line"># 同样用来验证两个样本的差异性</span><br><span class="line">from numpy.random import seed</span><br><span class="line">from numpy.random import rand</span><br><span class="line">from scipy.stats import mannwhitneyu</span><br><span class="line"></span><br><span class="line"># seed the random number generator</span><br><span class="line">seed(1)</span><br><span class="line"># generate two independent samples</span><br><span class="line">data1 = 50 + (rand(100) * 10)</span><br><span class="line">data2 = 51 + (rand(100) * 10)</span><br><span class="line"># compare samples</span><br><span class="line">stat, p = mannwhitneyu(data1, data2)</span><br><span class="line">print(&apos;Statistics=%.3f, p=%.3f&apos; % (stat, p))</span><br><span class="line"># interpret</span><br><span class="line">alpha = 0.05</span><br><span class="line">if p &gt; alpha:</span><br><span class="line">    print(&apos;Same distribution (fail to reject H0)&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;Different distribution (reject H0)&apos;)</span><br></pre></td></tr></table></figure><h3 id="3：线性代数"><a href="#3：线性代数" class="headerlink" title="3：线性代数"></a>3：线性代数</h3><p>1：Linear Algebra for Machine Learning</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">You Need to Learn Linear Algebra Notation</span><br><span class="line">You Need to Learn Linear Algebra Arithmetic</span><br><span class="line">You Need to Learn Linear Algebra for Statistics</span><br><span class="line">You Need to Learn Matrix Factorization</span><br><span class="line">You Need to Learn Linear Least Squares</span><br><span class="line"></span><br><span class="line">您需要学习线性代数符号</span><br><span class="line">您需要学习线性代数算法</span><br><span class="line">您需要学习用于统计的线性代数</span><br><span class="line">您需要学习矩阵分解</span><br><span class="line">您需要学习线性最小二乘</span><br></pre></td></tr></table></figure><p>2： <strong>Linear Algebra</strong></p><p> <strong>Linear Algebra</strong>(线性代数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线性代数是数学的一个分支，但事实是线性代数是数据的数学。 矩阵和向量是数据的语言。 线性代数是关于线性组合的。 也就是说，对称为向量的数字列和称为矩阵的数字2D数组进行算术运算，以创建新的数字列和数组。</span><br></pre></td></tr></table></figure><p><strong>Numerical Linear Algebra</strong> （数值线性代数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线性代数在计算机中的应用通常称为数值线性代数。 它不仅仅是在代码库中实现线性代数运算； 它还包括认真处理应用数学的问题，例如使用数字计算机有限的浮点精度进行处理。</span><br></pre></td></tr></table></figure><p><strong>Applications of Linear Algebra</strong>（应用线性代数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">❼ Matrices in Engineering, such as a line of springs.</span><br><span class="line">❼ Graphs and Networks, such as analyzing networks.</span><br><span class="line">❼ Markov Matrices, Population, and Economics, such as population growth.</span><br><span class="line">❼ Linear Programming, the simplex optimization method.</span><br><span class="line">❼ Fourier Series, Linear Algebra for functions, used widely in signal processing.</span><br><span class="line">❼ Linear Algebra for statistics and probability, such as least squares for regression.</span><br><span class="line">❼ Computer Graphics, such as the various translation, scaling and rotation of images.</span><br></pre></td></tr></table></figure><p>3:<strong>Vectors</strong>(向量) </p><p><strong>Defifining a Vector</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We can represent a vector in Python as a NumPy array. A NumPy array can be created from a list of numbers. For example, below we defifine a vector with the length of 3 and the integer values 1, 2 and 3.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># create a vector</span><br><span class="line">from numpy import array</span><br><span class="line">v = array([1, 2, 3])</span><br><span class="line">print(v)</span><br></pre></td></tr></table></figure><p><strong>Vector Multiplication</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># multiply vectors</span><br><span class="line">from numpy import array</span><br><span class="line">a = array([1, 2, 3])</span><br><span class="line">print(a)</span><br><span class="line">b = array([1, 2, 3])</span><br><span class="line">print(b)</span><br><span class="line">c = a * b</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><p><strong>Defifining a Matrix</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># create matrix</span><br><span class="line">from numpy import array</span><br><span class="line">A = array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">print(A)</span><br></pre></td></tr></table></figure><p><strong>Matrix Addition</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># add matrices</span><br><span class="line">from numpy import array</span><br><span class="line">A = array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">print(A)</span><br><span class="line">B = array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">print(B)</span><br><span class="line">C = A + B</span><br><span class="line">print(C)</span><br></pre></td></tr></table></figure><p><strong>Matrix Dot Product</strong> (矩阵点集,乘法)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C(m, k) = A(m, n) × B(n, k)</span><br><span class="line"></span><br><span class="line"># matrix dot product</span><br><span class="line">from numpy import array</span><br><span class="line">A = array([[1, 2], [3, 4], [5, 6]])</span><br><span class="line">print(A)</span><br><span class="line">B = array([[1, 2], [3, 4]])</span><br><span class="line">print(B)</span><br><span class="line">C = A.dot(B)</span><br><span class="line">print(C)</span><br></pre></td></tr></table></figure><p> 4:Matrix Types and Operations</p><p><strong>Transpose</strong>(转置)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># transpose matrix</span><br><span class="line">from numpy import array</span><br><span class="line">A = array([[1, 2], [3, 4], [5, 6]])</span><br><span class="line">print(A)</span><br><span class="line">C = A.T</span><br><span class="line">print(C)</span><br></pre></td></tr></table></figure><p><strong>Inversion</strong>(逆)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># invert matrix</span><br><span class="line">from numpy import array</span><br><span class="line">from numpy.linalg import inv</span><br><span class="line"># define matrix</span><br><span class="line">A = array([[1.0, 2.0], [3.0, 4.0]])</span><br><span class="line">print(A)</span><br><span class="line"># invert matrix</span><br><span class="line">B = inv(A)</span><br><span class="line">print(B)</span><br></pre></td></tr></table></figure><p><strong>Square Matrix</strong> (方阵)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A square matrix is a matrix where the number of rows (n) equals the number of columns (m).</span><br></pre></td></tr></table></figure><p><strong>Symmetric Matrix</strong>(对称矩阵)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A symmetric matrix is a type of square matrix where the top-right triangle is the same as the bottom-left triangle. To be symmetric, the axis of symmetry is always the main diagonal of the matrix, from the top left to the bottom right. A symmetric matrix is always square and equal to its own transpose.</span><br></pre></td></tr></table></figure><p><strong>Triangular Matrix</strong>(三角矩阵)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A triangular matrix is a type of square matrix that has all values in the upper-right or lower-left of the matrix with the remaining elements filled with zero values. A triangular matrix with values only above the main diagonal is called an upper triangular matrix. Whereas, a triangular matrix with values only below the main diagonal is called a lower triangular matrix.</span><br></pre></td></tr></table></figure><p><strong>Diagonal Matrix</strong>(对角矩阵)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A diagonal matrix is one where values outside of the main diagonal have a zero value, where the main diagonal is taken from the top left of the matrix to the bottom right. A diagonal matrix is often denoted with the variable D and may be represented as a full matrix or as a vector of values on the main diagonal.</span><br></pre></td></tr></table></figure><p>5:<strong>Matrix Factorization</strong> (矩阵分解)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">矩阵分解是将矩阵还原成其组成部分的一种方式。 这是一种可以简化更复杂的矩阵运算的方法，该运算可以在分解矩阵上执行，而不能在原始矩阵本身上执行。 矩阵分解的一个常见类比是数的分解，例如将25分解为5×5。因此,像分解实数值一样，有许多方法可以分解矩阵，因此存在多种不同的矩阵分解技术。</span><br></pre></td></tr></table></figure><p><strong>LU Matrix Decomposition</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">The LU decomposition is for square matrices and decomposes a matrix into L and U components.</span><br><span class="line"></span><br><span class="line">A = L · U (12)</span><br><span class="line"></span><br><span class="line">Where A is the square matrix that we wish to decompose, L is the lower triangle matrix and U is the upper triangle matrix. A variation of this decomposition that is numerically more stable to solve in practice is called the LUP decomposition, or the LU decomposition with partial pivoting.</span><br><span class="line"></span><br><span class="line">A = P · L · U (13)</span><br><span class="line"></span><br><span class="line">The rows of the parent matrix are re-ordered to simplify the decomposition process and the additional P matrix specifies a way to permute the result or return the result to the original order. There are also other variations of the LU. The LU decomposition is often used to simplify the solving of systems of linear equations, such as finding the coefficients in a linear regression.</span><br><span class="line">The LU decomposition can be implemented in Python with the lu() function. More specifically,this function calculates an LPU decomposition.</span><br></pre></td></tr></table></figure><p>Singular-Value Decomposition(奇异值分解)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The Singular-Value Decomposition, or SVD for short, is a matrix decomposition method for reducing a matrix to its constituent parts in order to make certain subsequent matrix calculations simpler.</span><br><span class="line"></span><br><span class="line">A = U · Σ · V T (14)</span><br><span class="line"></span><br><span class="line">Where A is the real m × n matrix that we wish to decompose, U is an m × m matrix, Σ</span><br><span class="line">(sigma) is an m × n diagonal matrix, and V T is the transpose of an n × n matrix where T is a superscript.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器学习数学基础&quot;&gt;&lt;a href=&quot;#机器学习数学基础&quot; class=&quot;headerlink&quot; title=&quot;机器学习数学基础&quot;&gt;&lt;/a&gt;机器学习数学基础&lt;/h1&gt;&lt;h3 id=&quot;1：概率论&quot;&gt;&lt;a href=&quot;#1：概率论&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MachineLearning_Test</title>
    <link href="https://yanyubing.xyz/2020/03/22/MachineLearning_Test/"/>
    <id>https://yanyubing.xyz/2020/03/22/MachineLearning_Test/</id>
    <published>2020-03-22T01:26:15.213Z</published>
    <updated>2020-03-22T06:42:19.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="练习机器学习"><a href="#练习机器学习" class="headerlink" title="练习机器学习"></a>练习机器学习</h3><p>1：机器学习步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1：定义问题</span><br><span class="line">2：准备数据</span><br><span class="line">3：评估算法</span><br><span class="line">4：改善结果</span><br><span class="line">5：写出结果</span><br></pre></td></tr></table></figure><p>2：数据哪里来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">机器学习库：http://archive.ics.uci.edu/ml/index.php</span><br></pre></td></tr></table></figure><p>3： Regression: <a href="http://archive.ics.uci.edu/ml/datasets/Wine+Quality" target="_blank" rel="noopener">Wine Quality Data Set</a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 手写代码，Regression: Wine Quality Data Set</span><br><span class="line"># 用于读取数据集</span><br><span class="line">import pandas</span><br><span class="line"># 使用逻辑回归模型</span><br><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line"># 绘图，用于查看数据结构</span><br><span class="line">import matplotlib as plt</span><br><span class="line"># 用于保存模型</span><br><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">from sklearn.model_selection import StratifiedKFold, cross_val_score, train_test_split</span><br><span class="line"></span><br><span class="line"># 1：定义问题：白酒种类和哪些因素有关系</span><br><span class="line"># 2：准备数据</span><br><span class="line">from sklearn.utils import column_or_1d</span><br><span class="line"></span><br><span class="line">url_data = &apos;http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data&apos;</span><br><span class="line"></span><br><span class="line">data = pandas.read_csv(url_data)</span><br><span class="line"></span><br><span class="line"># print(data)</span><br><span class="line"># 3:评估模型</span><br><span class="line">array = data.values</span><br><span class="line"></span><br><span class="line">X = array[:, 1:]</span><br><span class="line">y = array[:, 0:1]</span><br><span class="line"></span><br><span class="line"># print(X),需要把y改为y.ravel()</span><br><span class="line">X_train, X_validation, Y_train, Y_validation = train_test_split(X, y.ravel(), test_size=0.20, random_state=1)</span><br><span class="line">model = LogisticRegression(solver=&apos;liblinear&apos;, multi_class=&apos;ovr&apos;)</span><br><span class="line"></span><br><span class="line">kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)</span><br><span class="line">cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring=&apos;accuracy&apos;)</span><br><span class="line">print(&apos; %f (%f)&apos; % (cv_results.mean(), cv_results.std()))</span><br><span class="line"></span><br><span class="line"># 训练模型</span><br><span class="line">model.fit(X_train, Y_train)</span><br><span class="line"># 保存模型</span><br><span class="line">filename = &apos;Wine.model&apos;</span><br><span class="line">pickle.dump(model, open(filename, &apos;wb&apos;))</span><br><span class="line"># 预测模型</span><br><span class="line">predictions = model.predict(X_validation)</span><br><span class="line">print(&apos;真实值:&apos;, Y_validation)</span><br><span class="line">print(&apos;------------&apos;)</span><br><span class="line">print(&apos;预测值:&apos;, predictions)</span><br><span class="line">print(&apos;------------&apos;)</span><br><span class="line">array = predictions - Y_validation</span><br><span class="line">print(&apos;对比:&apos;, array)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;练习机器学习&quot;&gt;&lt;a href=&quot;#练习机器学习&quot; class=&quot;headerlink&quot; title=&quot;练习机器学习&quot;&gt;&lt;/a&gt;练习机器学习&lt;/h3&gt;&lt;p&gt;1：机器学习步骤&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Mini_Python_MachineLearning</title>
    <link href="https://yanyubing.xyz/2020/03/20/Mini_Python_MachineLearning/"/>
    <id>https://yanyubing.xyz/2020/03/20/Mini_Python_MachineLearning/</id>
    <published>2020-03-19T22:36:53.798Z</published>
    <updated>2020-03-21T03:09:40.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Machine-Learning-Mastery-With-Python-Mini-Course"><a href="#Machine-Learning-Mastery-With-Python-Mini-Course" class="headerlink" title="Machine Learning Mastery With Python Mini-Course"></a><strong>Machine Learning Mastery With</strong> <strong>Python Mini-Course</strong></h3><p>1：<strong>Download and Install Python</strong> <strong>and SciPy Ecosystem</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 环境准备</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import scipy</span><br><span class="line">import numpy</span><br><span class="line">import matplotlib</span><br><span class="line">import pandas</span><br><span class="line">import sklearn</span><br><span class="line"></span><br><span class="line">print(&apos;Python:&#123;&#125;&apos;.format(sys.version))</span><br><span class="line">print(&apos;scipy:&#123;&#125;&apos;.format(scipy.__version__))</span><br><span class="line">print(&apos;numpy:&#123;&#125;&apos;.format(numpy.__version__))</span><br><span class="line">print(&apos;matplotlib:&#123;&#125;:&apos;.format(matplotlib.__version__))</span><br><span class="line">print(&apos;pandas:&#123;&#125;&apos;.format(pandas.__version__))</span><br><span class="line">print(&apos;sklearn:&#123;&#125;&apos;.format(sklearn.__version__))</span><br></pre></td></tr></table></figure><p>2： <strong>Get Around In Python,</strong> <strong>NumPy, Matplotlib and Pandas</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Practice assignment, working with lists and flow control in Python.</span><br><span class="line">2. Practice working with NumPy arrays.</span><br><span class="line">3. Practice creating simple plots in Matplotlib.</span><br><span class="line">4. Practice working with Pandas Series and DataFrame.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy</span><br><span class="line">import pandas</span><br><span class="line"></span><br><span class="line">myArray = numpy.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">rowNames = [&apos;a&apos;, &apos;b&apos;]</span><br><span class="line">colNames = [&apos;one&apos;, &apos;two&apos;, &apos;three&apos;]</span><br><span class="line">myDataFrame = pandas.DataFrame(myArray, index=rowNames, columns=colNames)</span><br><span class="line">print(myDataFrame)</span><br></pre></td></tr></table></figure><p>3：<strong>Load Data From CSV</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据网站http://archive.ics.uci.edu/ml/index.php</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">❼ Practice loading CSV files into Python using the CSV.reader()6</span><br><span class="line">function in the standard</span><br><span class="line">library.</span><br><span class="line">❼ Practice loading CSV files using NumPy and the numpy.loadtxt()7</span><br><span class="line">function.</span><br><span class="line">❼ Practice loading CSV files using Pandas and the pandas.read csv()8</span><br><span class="line">function.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 加载数据</span><br><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line">from pandas import read_csv</span><br><span class="line">from io import StringIO</span><br><span class="line"></span><br><span class="line"># 1:numpy加载数据</span><br><span class="line">c = StringIO(&apos;0 1 \n2 3&apos;)</span><br><span class="line">d = np.loadtxt(c)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"># 2:CSV加载数据https://docs.python.org/2/library/csv.html</span><br><span class="line"></span><br><span class="line"># 3: pandas Load a CSV dataset from a URL.</span><br><span class="line">url = &apos;https://goo.gl/bDdBiA&apos;</span><br><span class="line">names = [&apos;preg&apos;, &apos;plas&apos;, &apos;pres&apos;, &apos;skin&apos;, &apos;test&apos;, &apos;mass&apos;, &apos;pedi&apos;, &apos;age&apos;, &apos;class&apos;]</span><br><span class="line">data = read_csv(url, names=names)</span><br><span class="line">print(data.shape)</span><br></pre></td></tr></table></figure><p>4：<strong>Understand Data with</strong> <strong>Descriptive Statistics</strong> （了解数据简单结构，内容）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Once you have loaded your data into Python you need to be able to understand it. The better you can understand your data, the better and more accurate the models that you can build.</span><br><span class="line">The first step to understanding your data is to use descriptive statistics. Today your lesson is to learn how to use descriptive statistics to understand your data. I recommend using the helper functions provided on the Pandas DataFrame.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❼ Understand your data using the head() function to look at the first few rows.</span><br><span class="line">❼ Review the dimensions of your data with the shape property.</span><br><span class="line">❼ Look at the data types for each attribute with the dtypes property.</span><br><span class="line">❼ Review the distribution of your data with the describe() function.</span><br><span class="line">❼ Calculate pairwise correlation between your variables using the corr() function</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 查看数据</span><br><span class="line">from pandas import read_csv</span><br><span class="line"></span><br><span class="line">#  pandas Load a CSV dataset from a URL.</span><br><span class="line">url = &apos;https://goo.gl/bDdBiA&apos;</span><br><span class="line">names = [&apos;preg&apos;, &apos;plas&apos;, &apos;pres&apos;, &apos;skin&apos;, &apos;test&apos;, &apos;mass&apos;, &apos;pedi&apos;, &apos;age&apos;, &apos;class&apos;]</span><br><span class="line">data = read_csv(url, names=names)</span><br><span class="line">shape = data.shape</span><br><span class="line">head = data.head(20)</span><br><span class="line">dtype = data.dtypes</span><br><span class="line">description = data.describe()</span><br><span class="line">print(shape)</span><br><span class="line">print(head)</span><br><span class="line">print(dtype)</span><br><span class="line">print(&apos;----------&apos;)</span><br><span class="line">print(description)</span><br></pre></td></tr></table></figure><p>5：<strong>Understand Data with</strong>  <strong>Visualization</strong>（数据可视化）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from pandas import read_csv</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from pandas.plotting import scatter_matrix</span><br><span class="line"></span><br><span class="line"># 数据可视化</span><br><span class="line">#  pandas Load a CSV dataset from a URL.</span><br><span class="line">url = &apos;https://goo.gl/bDdBiA&apos;</span><br><span class="line">names = [&apos;preg&apos;, &apos;plas&apos;, &apos;pres&apos;, &apos;skin&apos;, &apos;test&apos;, &apos;mass&apos;, &apos;pedi&apos;, &apos;age&apos;, &apos;class&apos;]</span><br><span class="line">data = read_csv(url, names=names)</span><br><span class="line"></span><br><span class="line"># 直方图</span><br><span class="line">data.hist()</span><br><span class="line"># pairwise scatter plots of all attributes.</span><br><span class="line">scatter_matrix(data)</span><br><span class="line"># pairwise scatter plots</span><br><span class="line"># data.plot.box()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>6：<strong>Prepare For Modeling by</strong>  <strong>Pre-Processing Data</strong> （预处理数据）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The scikit-learn library provides two standard idioms for transforming data. Each are useful in different circumstances: Fit and Multiple Transform and Combined Fit-And-Transform.</span><br><span class="line">There are many techniques that you can use to prepare your data for modeling, for example try out some of the following</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 下面的代码段加载了皮马印第安人发病的糖尿病数据集，标准化数据所需的参数，然后创建输入的标准化副本数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from sklearn.preprocessing import StandardScaler</span><br><span class="line">from pandas import read_csv</span><br><span class="line">import numpy</span><br><span class="line"></span><br><span class="line">url = &apos;https://goo.gl/bDdBiA&apos;</span><br><span class="line">names = [&apos;preg&apos;, &apos;plas&apos;, &apos;pres&apos;, &apos;skin&apos;, &apos;test&apos;, &apos;mass&apos;, &apos;pedi&apos;, &apos;age&apos;, &apos;class&apos;]</span><br><span class="line">dataFrame = read_csv(url, names=names)</span><br><span class="line">arrray = dataFrame.values</span><br><span class="line"># 切割array得到输入集和输出集</span><br><span class="line">X = arrray[:, 0:8]</span><br><span class="line">Y = arrray[:, 8]</span><br><span class="line"># 转换数据，归一化处理</span><br><span class="line">scala = StandardScaler().fit(X)</span><br><span class="line">rescaledX = scala.transform(X)</span><br><span class="line"># summarize transformed data</span><br><span class="line"># precision:小数点的位数</span><br><span class="line">numpy.set_printoptions(precision=4)</span><br><span class="line">print(X)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line">print(rescaledX)</span><br></pre></td></tr></table></figure><p>7：<strong>Algorithm Evaluation With</strong>  <strong>Resampling Methods</strong>（重采样方法进行算法评估）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❼ Split a dataset into training and test sets.</span><br><span class="line">❼ Estimate the accuracy of an algorithm using k-fold cross-validation.</span><br><span class="line">❼ Estimate the accuracy of an algorithm using leave one out cross-validation.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Evaluate using Cross-Validation</span><br><span class="line">from pandas import read_csv</span><br><span class="line">from sklearn.model_selection import KFold</span><br><span class="line">from sklearn.model_selection import cross_val_score</span><br><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line"></span><br><span class="line">url = &apos;https://goo.gl/bDdBiA&apos;</span><br><span class="line">names = [&apos;preg&apos;, &apos;plas&apos;, &apos;pres&apos;, &apos;skin&apos;, &apos;test&apos;, &apos;mass&apos;, &apos;pedi&apos;, &apos;age&apos;, &apos;class &apos;]</span><br><span class="line">dataframe = read_csv(url, names=names)</span><br><span class="line">array = dataframe.values</span><br><span class="line">X = array[:, 0: 8]</span><br><span class="line">Y = array[:, 8]</span><br><span class="line">kfold = KFold(n_splits=10, random_state=7)</span><br><span class="line">model = LogisticRegression()</span><br><span class="line">results = cross_val_score(model, X, Y, cv=kfold)</span><br><span class="line">print(&quot;Accuracy: %.3f%% (%.3f%%)&quot; % (results.mean() * 100.0, results.std() * 100.0))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出准确率:Accuracy: 76.951% (4.841%)</span><br></pre></td></tr></table></figure><p>8：<strong>Algorithm Evaluation</strong> <strong>Metrics</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">There are many different metrics that you can use to evaluate the skill of a machine learning algorithm on a dataset.</span><br><span class="line">You can specify the metric used for your test harness in scikit-learn via the cross val score() function and defaults can be used for regression and classification problems. Your goal with todays lesson is to practice using the different algorithm performance metrics available in the scikit-learn package.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❼ Practice using the Accuracy and LogLoss metrics on a classification problem.</span><br><span class="line">❼ Practice generating a confusion matrix and a classification report.</span><br><span class="line">❼ Practice using RMSE and RSquared metrics on a regression problem.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Cross-Validation Classification LogLoss</span><br><span class="line"># 评估指标</span><br><span class="line">from pandas import read_csv</span><br><span class="line">from sklearn.model_selection import KFold</span><br><span class="line">from sklearn.model_selection import cross_val_score</span><br><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line"></span><br><span class="line">url = &apos;https://goo.gl/bDdBiA&apos;</span><br><span class="line">names = [&apos;preg&apos;, &apos;plas&apos;, &apos;pres&apos;, &apos;skin&apos;, &apos;test&apos;, &apos;mass&apos;, &apos;pedi&apos;, &apos;age&apos;, &apos;class&apos;]</span><br><span class="line">dataframe = read_csv(url, names=names)</span><br><span class="line">array = dataframe.values</span><br><span class="line">X = array[:, 0:8]</span><br><span class="line">Y = array[:, 8]</span><br><span class="line">kfold = KFold(n_splits=10, random_state=7)</span><br><span class="line">model = LogisticRegression(solver=&apos;liblinear&apos;)</span><br><span class="line">scoring = &apos;neg_log_loss&apos;</span><br><span class="line">results = cross_val_score(model, X, Y, cv=kfold, scoring=scoring)</span><br><span class="line">print(&quot;Logloss: %.3f (%.3f)&quot; % (results.mean(), results.std()))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出:Logloss: -0.493 (0.047)</span><br></pre></td></tr></table></figure><p>9：<strong>Spot-Check Algorithms</strong>（选择合适的算法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You cannot possibly know which algorithm will perform best on your data beforehand. You have to discover it using a process of trial and error. I call this spot-checking algorithms. The scikitlearn library provides an interface to many machine learning algorithms and tools to compare the estimated accuracy of those algorithms. In this lesson you must practice spot-checking different machine learning algorithms.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❼ Spot-check linear algorithms on a dataset (e.g. linear regression, logistic regression and linear discriminate analysis).(选择线性算法)</span><br><span class="line">❼ Spot-check some nonlinear algorithms on a dataset (e.g. KNN, SVM and CART).(选择非线性算法)</span><br><span class="line">❼ Spot-check some sophisticated ensemble algorithms on a dataset (e.g. random forest and stochastic gradient boosting)(选择组合算法)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># KNN Regression</span><br><span class="line"># 多种算法尝试，这里举例</span><br><span class="line">from pandas import read_csv</span><br><span class="line">from sklearn.model_selection import KFold</span><br><span class="line">from sklearn.model_selection import cross_val_score</span><br><span class="line">from sklearn.neighbors import KNeighborsRegressor</span><br><span class="line"></span><br><span class="line">url = &apos;https://goo.gl/FmJUSM&apos;</span><br><span class="line">names = [&apos;CRIM&apos;, &apos;ZN&apos;, &apos;INDUS&apos;, &apos;CHAS&apos;, &apos;NOX&apos;, &apos;RM&apos;, &apos;AGE&apos;, &apos;DIS&apos;, &apos;RAD&apos;, &apos;TAX&apos;, &apos;PTRATIO&apos;, &apos;B&apos;, &apos;LSTAT&apos;, &apos;MEDV&apos;]</span><br><span class="line">dataframe = read_csv(url, delim_whitespace=True, names=names)</span><br><span class="line">array = dataframe.values</span><br><span class="line">X = array[:, 0:13]</span><br><span class="line">Y = array[:, 13]</span><br><span class="line">kfold = KFold(n_splits=10, random_state=7)</span><br><span class="line">model = KNeighborsRegressor()</span><br><span class="line">scoring = &apos;neg_mean_squared_error&apos;</span><br><span class="line">results = cross_val_score(model, X, Y, cv=kfold, scoring=scoring)</span><br><span class="line">print(results.mean())</span><br></pre></td></tr></table></figure><p>10： <strong>Model Comparison and</strong> <strong>Selection</strong> （模型的比较和选择）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Now that you know how to spot-check machine learning algorithms on your dataset, you need to know how to compare the estimated performance of different algorithms and select the best model. In todays lesson you will practice comparing the accuracy of machine learning algorithms in Python with scikit-learn.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❼ Compare linear algorithms to each other on a dataset.</span><br><span class="line">❼ Compare nonlinear algorithms to each other on a dataset.</span><br><span class="line">❼ Create plots of the results comparing algorithms</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># Compare Algorithms</span><br><span class="line">from pandas import read_csv</span><br><span class="line">from sklearn.model_selection import KFold</span><br><span class="line">from sklearn.model_selection import cross_val_score</span><br><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line">from sklearn.discriminant_analysis import LinearDiscriminantAnalysis</span><br><span class="line"></span><br><span class="line"># load dataset</span><br><span class="line">url = &apos;https://goo.gl/bDdBiA&apos;</span><br><span class="line">names = [&apos;preg&apos;, &apos;plas&apos;, &apos;pres&apos;, &apos;skin&apos;, &apos;test&apos;, &apos;mass&apos;, &apos;pedi&apos;, &apos;age&apos;, &apos;class&apos;]</span><br><span class="line">dataframe = read_csv(url, names=names)</span><br><span class="line">array = dataframe.values</span><br><span class="line">X = array[:, 0:8]</span><br><span class="line">Y = array[:, 8]</span><br><span class="line"># prepare models</span><br><span class="line">models = []</span><br><span class="line">models.append((&apos;LR&apos;, LogisticRegression(solver=&apos;liblinear&apos;)))</span><br><span class="line">models.append((&apos;LDA&apos;, LinearDiscriminantAnalysis()))</span><br><span class="line"># evaluate each model in turn</span><br><span class="line">results = []</span><br><span class="line">names = []</span><br><span class="line">scoring = &apos;accuracy&apos;</span><br><span class="line">for name, model in models:</span><br><span class="line">    kfold = KFold(n_splits=10, random_state=7)</span><br><span class="line">    cv_results = cross_val_score(model, X, Y, cv=kfold, scoring=scoring)</span><br><span class="line">    results.append(cv_results)</span><br><span class="line">    names.append(name)</span><br><span class="line">    print(&apos;% s: % f( % f)&apos; % (name, cv_results.mean(), cv_results.std()))</span><br></pre></td></tr></table></figure><p>11：<strong>Improve Accuracy with</strong> <strong>Algorithm Tuning</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Once you have found one or two algorithms that perform well on your dataset, you may want to improve the performance of those models. One way to increase the performance of an algorithm is to tune it’s parameters to your specific dataset. The scikit-learn library provides two ways to</span><br><span class="line">search for combinations of parameters for a machine learning algorithm:</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❼ Tune the parameters of an algorithm using a grid search that you specify.</span><br><span class="line">❼ Tune the parameters of an algorithm using a random search</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Grid Search for Algorithm Tuning</span><br><span class="line"></span><br><span class="line">from pandas import read_csv</span><br><span class="line">import numpy</span><br><span class="line">from sklearn.linear_model import Ridge</span><br><span class="line">from sklearn.model_selection import GridSearchCV</span><br><span class="line"></span><br><span class="line">url = &apos;https://goo.gl/bDdBiA&apos;</span><br><span class="line">names = [&apos;preg&apos;, &apos;plas&apos;, &apos;pres&apos;, &apos;skin&apos;, &apos;test&apos;, &apos;mass&apos;, &apos;pedi&apos;, &apos;age&apos;, &apos;class&apos;]</span><br><span class="line">dataframe = read_csv(url, names=names)</span><br><span class="line">array = dataframe.values</span><br><span class="line">X = array[:, 0:8]</span><br><span class="line">Y = array[:, 8]</span><br><span class="line">alphas = numpy.array([1, 0.1, 0.01, 0.001, 0.0001, 0])</span><br><span class="line">param_grid = dict(alpha=alphas)</span><br><span class="line">model = Ridge()</span><br><span class="line">grid = GridSearchCV(estimator=model, param_grid=param_grid, cv=3)</span><br><span class="line">grid.fit(X, Y)</span><br><span class="line">print(grid.best_score_)</span><br><span class="line">print(grid.best_estimator_.alpha)</span><br></pre></td></tr></table></figure><p>12： <strong>Improve Accuracy with</strong> <strong>Ensemble Predictions</strong>（组合算法提高准确度）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Another way that you can improve the performance of your models is to combine the predictions from multiple models. Some models provide this capability built-in such as random forest for bagging and stochastic gradient boosting for boosting. Another type of ensembling called voting can be used to combine the predictions from multiple different models together. In todays lesson you will practice using ensemble methods.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❼Practice bagging ensembles with the Random Forest and Extra Trees algorithms.</span><br><span class="line">❼ Practice boosting ensembles with the Gradient Boosting Machine and AdaBoost algorithms.</span><br><span class="line">❼ Practice voting ensembles using by combining the predictions from multiple models</span><br><span class="line">together.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Random Forest Classification</span><br><span class="line"></span><br><span class="line">from pandas import read_csv</span><br><span class="line">from sklearn.model_selection import KFold</span><br><span class="line">from sklearn.model_selection import cross_val_score</span><br><span class="line">from sklearn.ensemble import RandomForestClassifier</span><br><span class="line"></span><br><span class="line">url = &apos;https://goo.gl/bDdBiA&apos;</span><br><span class="line">names = [&apos;preg&apos;, &apos;plas&apos;, &apos;pres&apos;, &apos;skin&apos;, &apos;test&apos;, &apos;mass&apos;, &apos;pedi&apos;, &apos;age&apos;, &apos;class&apos;]</span><br><span class="line">dataframe = read_csv(url, names=names)</span><br><span class="line">array = dataframe.values</span><br><span class="line">X = array[:, 0:8]</span><br><span class="line">Y = array[:, 8]</span><br><span class="line">num_trees = 100</span><br><span class="line">max_features = 3</span><br><span class="line">kfold = KFold(n_splits=10, random_state=7)</span><br><span class="line">model = RandomForestClassifier(n_estimators=num_trees, max_features=max_features)</span><br><span class="line">results = cross_val_score(model, X, Y, cv=kfold)</span><br><span class="line">print(results.mean())</span><br></pre></td></tr></table></figure><p>13： <strong>Finalize And Save Your</strong>  <strong>Model</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❼ Practice making predictions with your model on new data (data unseen during training</span><br><span class="line">and testing).</span><br><span class="line">❼ Practice saving trained models to file and loading them up again</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># Save Model Using Pickle</span><br><span class="line">from pandas import read_csv</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">url = &apos;https://goo.gl/bDdBiA&apos;</span><br><span class="line">names = [&apos;preg&apos;, &apos;plas&apos;, &apos;pres&apos;, &apos;skin&apos;, &apos;test&apos;, &apos;mass&apos;, &apos;pedi&apos;, &apos;age&apos;, &apos;class&apos;]</span><br><span class="line">dataframe = read_csv(url, names=names)</span><br><span class="line">array = dataframe.values</span><br><span class="line">X = array[:, 0:8]</span><br><span class="line">Y = array[:, 8]</span><br><span class="line">test_size = 0.33</span><br><span class="line">seed = 7</span><br><span class="line">X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size,</span><br><span class="line">                                                    random_state=seed)</span><br><span class="line"># Fit the model on 33%</span><br><span class="line">model = LogisticRegression(solver=&apos;liblinear&apos;)</span><br><span class="line">model.fit(X_train, Y_train)</span><br><span class="line"># save the model to disk</span><br><span class="line">filename = &apos;finalized_model.sav&apos;</span><br><span class="line">pickle.dump(model, open(filename, &apos;wb&apos;))</span><br><span class="line"></span><br><span class="line"># some time later...</span><br><span class="line"></span><br><span class="line"># load the model from disk</span><br><span class="line">loaded_model = pickle.load(open(filename, &apos;rb&apos;))</span><br><span class="line">result = loaded_model.score(X_test, Y_test)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Machine-Learning-Mastery-With-Python-Mini-Course&quot;&gt;&lt;a href=&quot;#Machine-Learning-Mastery-With-Python-Mini-Course&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Mini_Weka_MachineLearning</title>
    <link href="https://yanyubing.xyz/2020/03/19/Mini_Weka_MachineLearning/"/>
    <id>https://yanyubing.xyz/2020/03/19/Mini_Weka_MachineLearning/</id>
    <published>2020-03-19T09:40:46.695Z</published>
    <updated>2020-03-19T13:02:00.440Z</updated>
    
    <content type="html"><![CDATA[<p>1：Weka</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Weka的全名是怀卡托智能分析环境（Waikato Environment for Knowledge Analysis），是一款免费的，非商业化（与之对应的是SPSS公司商业数据挖掘产品--Clementine ）的，基于JAVA环境下开源的机器学习（machine learning）以及数据挖掘（data mining）软件。它和它的源代码可在其官方网站下载。有趣的是，该软件的缩写WEKA也是新西兰独有的一种鸟名（新西兰秧鸡），而Weka的主要开发者同时恰好来自新西兰的怀卡托大学（The University of Waikato）。</span><br></pre></td></tr></table></figure><p>2：download Weka，下载weka</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://sourceforge.net/projects/weka/</span><br></pre></td></tr></table></figure><p>3：Load Standard Machine Learning Datasets，加载数据集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Start Weka (click on the bird icon), this will start the Weka GUI Chooser.</span><br><span class="line">2. Click the Explorer button, this will open the Weka Explorer interface.</span><br><span class="line">3. Click the Open file... button and navigate to the data/ directory in your Weka installation</span><br><span class="line">and load the diabetes.arff dataset.</span><br></pre></td></tr></table></figure><p>4：Descriptive Stats and Visualization，查看数据的特征</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4. Click on different attributes in the Attributes list and review the details in the Selected</span><br><span class="line">attribute pane.</span><br><span class="line">5. Click the Visualize All button to review all attribute distributions.</span><br><span class="line">6. Click the Visualize tab and review the scatter plot matrix for all attributes</span><br></pre></td></tr></table></figure><p>5：Rescale Your Data：数据预处理，过滤，保存预处理完的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Open the Weka GUI Chooser and then the Weka Explorer.</span><br><span class="line">2. Load the data/diabetes.arff dataset.</span><br><span class="line">3. Click the Choose button in the Filter pane and select unsupervised.attribute.Normalize.</span><br><span class="line">4. Click the Apply button.</span><br></pre></td></tr></table></figure><p>6： Perform Feature Selection on Your Data，执行特征选择（不是所有的特征都会影响结果，通过方法选择出对结果有影响的特征）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. Open the Weka GUI Chooser and then the Weka Explorer.</span><br><span class="line">2. Load the data/diabetes.arff dataset.</span><br><span class="line">3. Click the Select attributes tab.</span><br><span class="line">4. Click the Choose button in the Attribute Evaluator pane and select the CorrelationAttributeEval.</span><br><span class="line">(a) You will be presented with a dialog asking you to change to the Ranker search</span><br><span class="line">method, needed when using this feature selection method. Click the Yes button.</span><br><span class="line">5. Click the Start button to run the feature selection method.</span><br></pre></td></tr></table></figure><p>7： Machine Learning Algorithms in Weka(机器学习算法)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. Open the Weka GUI Chooser and then the Weka Explorer.</span><br><span class="line">2. Load the data/diabetes.arff dataset.</span><br><span class="line">3. Click the Classify tab.</span><br><span class="line">4. Click the Choose button and note the different groupings for algorithms.</span><br><span class="line">5. Click the name of the selected algorithm to configure it.</span><br><span class="line">6. Click the More button on the configuration window to learn more about the implementation.</span><br><span class="line">7. Click the Capabilities button on the configuration window to learn more about how it can</span><br><span class="line">be used.</span><br><span class="line">8. Note the Open and Save buttons on the window where different configurations can be</span><br><span class="line">saved and loaded.</span><br><span class="line">9. Hover on a configuration parameter and note the tooltip help.</span><br><span class="line">10. Click the Start button to run an algorithm.</span><br></pre></td></tr></table></figure><p>8：Estimate Model Performance(估算模型性能，不同的模型对应不同的指标)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Now that you know how to choose and configure different algorithms, you need to know how</span><br><span class="line">to evaluate the performance of an algorithm. In this lesson you are going to learn about the</span><br><span class="line">different ways to evaluate the performance of an algorithm in Weka.</span><br><span class="line">1. Open the Weka GUI Chooser and then the Weka Explorer.</span><br><span class="line">2. Load the data/diabetes.arff dataset.</span><br><span class="line">3. Click the Classify tab.</span><br><span class="line">The Test options pane lists the various different techniques that you can use to evaluate the</span><br><span class="line">performance of an algorithm.</span><br><span class="line">❼ The gold standard is 10-fold Cross-Validation. This is selected by default. For a small</span><br><span class="line">dataset, the number of folds can be adjusted from 10 to 5 or even 3.</span><br><span class="line">❼ If your dataset is very large and you want to evaluate algorithms quickly, you can use the</span><br><span class="line">Percentage split option. By default, this option will train on 66% of your dataset and use</span><br><span class="line">the remaining 34% to evaluate the performance of your model.</span><br><span class="line">❼ Alternately, if you have a separate file containing a validation dataset, you can evaluate</span><br><span class="line">your model on that by selecting the Supplied test set option. Your model will be trained</span><br><span class="line">on the entire training dataset and evaluated on the separate dataset.</span><br><span class="line">❼ Finally, you can evaluate the performance of your model on the whole training dataset.</span><br><span class="line">This is useful if you are more interested in a descriptive than a predictive model.</span><br><span class="line">Click the Start button to run a given algorithm with your chosen test option. Experiment</span><br><span class="line">with different Test options. Further refine the test options in the configuration provided by</span><br><span class="line">clicking the More options... button.</span><br></pre></td></tr></table></figure><p>9：Baseline Performance On Your Data(性能的基准线,zeroR算法用来评估基准线，只能选择比这个算法优的算法)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Open the Weka GUI Chooser and then the Weka Explorer.</span><br><span class="line">2. Load the data/diabetes.arff dataset.</span><br><span class="line">3. Click the Classify tab. The ZeroR algorithm is chosen by default.</span><br><span class="line">4. Click the Start button.</span><br></pre></td></tr></table></figure><p>10：分类算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Weka provides a large number of classification algorithms. In this lesson you will discover 5 top</span><br><span class="line">classification algorithms that you can use on your classification problems.</span><br><span class="line">1. Open the Weka GUI Chooser and then the Weka Explorer.</span><br><span class="line">2. Load the data/diabetes.arff dataset.</span><br><span class="line">3. Click the Classify tab.</span><br><span class="line">4. Click the Choose button.</span><br><span class="line">5 Top algorithms that you can use for classification include:</span><br><span class="line">❼ Logistic Regression (functions.Logistic).</span><br><span class="line">❼ Naive Bayes (bayes.NaiveBayes).</span><br><span class="line">❼ k-Nearest Neighbors (lazy.IBk).</span><br><span class="line">❼ Classification and Regression Trees (trees.REPTree).</span><br><span class="line">❼ Support Vector Machines (functions.SMO).</span><br><span class="line">Experiment with each of these top algorithms. Try them out on different classification</span><br><span class="line">datasets, such as those with two classes and those with more.</span><br></pre></td></tr></table></figure><p>11：回归算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. Open the Weka GUI Chooser and then the Weka Explorer.</span><br><span class="line">2. Load the data/housing.arff dataset.</span><br><span class="line">3. Click the Classify tab.</span><br><span class="line">4. Click the Choose button.</span><br><span class="line">5 Top algorithms that you can use for regression include:</span><br><span class="line">❼ Linear Regression (functions.LinearRegression).</span><br><span class="line">❼ Support Vector Regression (functions.SMOReg).</span><br><span class="line">❼ k-Nearest Neighbors (lazy.IBk).</span><br><span class="line">❼ Classification and Regression Trees (trees.REPTree).</span><br><span class="line">❼ Artificial Neural Network (functions.MultilayerPerceptron).</span><br><span class="line"></span><br><span class="line">回归数据集下载地址http://www.cs.waikato.ac.nz/ml/weka/datasets.html</span><br></pre></td></tr></table></figure><p>12：Ensemble Algorithms（集成算法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在统计学和机器学习中，集成学习方法使用多种学习算法来获得比单独使用任何单独的学习算法更好的预测性能。不像统计力学中的系综通常是无限的，机器学习集合仅由一组具体的有限的可替代模型组成，但通常允许在这些可替代方案中存在更灵活的结构。</span><br><span class="line">1. Open the Weka GUI Chooser and then the Weka Explorer.</span><br><span class="line">2. Load the data/diabetes.arff dataset.</span><br><span class="line">3. Click the Classify tab.</span><br><span class="line">4. Click the Choose button.</span><br><span class="line">5 Top ensemble algorithms that you can use include:</span><br><span class="line">❼ Bagging (meta.Bagging).</span><br><span class="line">❼ Random Forest (trees.RandomForest).</span><br><span class="line">❼ AdaBoost (meta.AdaBoost).</span><br><span class="line">❼ Voting (meta.Voting).</span><br><span class="line">❼ Stacking (meta.Stacking).</span><br></pre></td></tr></table></figure><p>13： Tune Algorithm Parameters(调整算法参数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. Open the Weka Chooser GUI.</span><br><span class="line">2. Click the Experimenter button to open the Weka Experiment Environment</span><br><span class="line">3. Click the New button.</span><br><span class="line">4. Click the Add new... button in the Datasets pane and select data/diabetes.arff.</span><br><span class="line">5. Click the Add new... button in the Algorithms pane and add 3 copes of the IBk algorithm.</span><br><span class="line">6. Click each IBk algorithm in the list and click the Edit selected... button and change KNN</span><br><span class="line">to 1, 3, 5 for each of the 3 different algorithms.</span><br><span class="line">7. Click the Run tab and click the Start button.</span><br><span class="line">8. Click the Analyse tab and click the Experiment button and then the Perform test button.</span><br></pre></td></tr></table></figure><p>14：Save Your Model（保存模型）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. Open the Weka GUI Chooser and then the Weka Explorer.</span><br><span class="line">2. Load the data/diabetes.arff dataset.</span><br><span class="line">3. Click the Classify tab.</span><br><span class="line">4. Change the Test options to Use training set and click the Start button.</span><br><span class="line">5. Right click on the results in the Result list and click Save model and enter a filename like</span><br><span class="line">diabetes-final</span><br></pre></td></tr></table></figure><p>15：使用模型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. Right-click on the Result list click Load model and select your model file (diabetes-</span><br><span class="line">final.model).</span><br><span class="line">2. Change the Test options to Supplied test set and choose data/diabetes.arff (this could</span><br><span class="line">be a new file for which you do not have predictions)</span><br><span class="line">3. Click More options in the Test options and change Output predictions to Plain Text</span><br><span class="line">4. Right click on the loaded model and choose Re-evaluate model on current test set</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1：Weka&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Neural Network</title>
    <link href="https://yanyubing.xyz/2020/03/17/Neural%20Network/"/>
    <id>https://yanyubing.xyz/2020/03/17/Neural%20Network/</id>
    <published>2020-03-17T10:53:47.574Z</published>
    <updated>2020-03-18T04:07:40.406Z</updated>
    
    <content type="html"><![CDATA[<p>1：Introduction to Neural Network</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">分层(layer)：</span><br><span class="line">Input输入层 </span><br><span class="line">Hidden隐藏层</span><br><span class="line">Output输出层</span><br></pre></td></tr></table></figure><p>2：Transfer (Activation) Functions（转换函数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The transfer function translates the input signals to output signals. Four types of transfer functions are commonly used, Unit step (threshold), sigmoid, piecewise linear, and Gaussian.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">五种常用的转换函数：</span><br><span class="line">Unit step (threshold)：</span><br><span class="line">The output is set at one of two levels, depending on whether the total input is greater than or less than some threshold value.</span><br><span class="line"></span><br><span class="line">Sigmoid：</span><br><span class="line">The sigmoid function consists of 2 functions, logistic and tangential. The values of logistic function range from 0 and 1 and -1 to +1 for tangential function.</span><br><span class="line"></span><br><span class="line">Piecewise Linear： </span><br><span class="line">The output is proportional to the total weighted output.</span><br><span class="line">Gaussian：</span><br><span class="line"></span><br><span class="line">Gaussian functions are bell-shaped curves that are continuous. The node output (high/low) is interpreted in terms of class membership (1/0), depending on how close the net input is to a chosen value of average. </span><br><span class="line"></span><br><span class="line">Linear</span><br><span class="line">Like a linear regression, a linear activation function transforms the weighted sum inputs of the neuron to an output using a linear function.</span><br></pre></td></tr></table></figure><p>3：Perceptron Learning Algorithm(感知器算法)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Perceptron 算法结构是最简单神经网路算法，用来解决二分类问题。可以说Percptron 是神经网络最初的原型，是神经网络和支持向量机的基础。把分类问题抽象成空间坐标点，那么就可能存在一个超平面分离两种类别，Perceptron旨在找出这个超平面，为了找出超平面引入了基于误分类的损失函数，利用梯度下降得出最优化的损失函数。</span><br></pre></td></tr></table></figure><p>4：Implementing The Perceptron Algorithm In Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"># 重新播种旧版MT19937 BitGenerator</span><br><span class="line">np.random.seed(42)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 输出结果函数</span><br><span class="line">def stepFunction(t):</span><br><span class="line">    if t &gt;= 0:</span><br><span class="line">        return 1</span><br><span class="line">    return 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 预测函数</span><br><span class="line">def prediction(X, W, b):</span><br><span class="line">    # W,X矩阵的乘积</span><br><span class="line">    return stepFunction((np.matmul(X, W) + b)[0])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># def prediction(X, W1, W2, b):</span><br><span class="line">#     return stepFunction()</span><br><span class="line"></span><br><span class="line"># 迭代，更新W,b</span><br><span class="line">def perceptronStep(X, y, W, b, learn_rate=0.00001):</span><br><span class="line">    for i in range(len(X)):</span><br><span class="line">        # 返回预测值</span><br><span class="line">        y_pred = prediction(X[i], W, b)</span><br><span class="line">        if y[i] - y_pred == 1:</span><br><span class="line"></span><br><span class="line">            W[0] += X[i][0] * learn_rate</span><br><span class="line"></span><br><span class="line">            W[1] += X[i][1] * learn_rate</span><br><span class="line"></span><br><span class="line">            b += learn_rate</span><br><span class="line">        elif y[i] - y_pred == -1:</span><br><span class="line">            W[0] -= X[i][0] * learn_rate</span><br><span class="line">            W[1] -= X[i][1] * learn_rate</span><br><span class="line">            b -= learn_rate</span><br><span class="line">    return W, b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def trainPerceptronAlgo(X, y, learn_rate=0.00001, num_epochs=25000):</span><br><span class="line">    # 转置之后取第一个值</span><br><span class="line">    X_max = max(X.T[0])</span><br><span class="line">    # 初始化：随机生成W的array(2,1)</span><br><span class="line">    W = np.array(np.random.rand(2, 1))</span><br><span class="line">    # 初始化：随机生成b</span><br><span class="line">    b = np.random.rand(1)[0] + X_max</span><br><span class="line"></span><br><span class="line">    boundary_lines = []</span><br><span class="line"></span><br><span class="line">    # 开始迭代epoch</span><br><span class="line">    for i in range(num_epochs):</span><br><span class="line">        W, b = perceptronStep(X, y, W, b, learn_rate)</span><br><span class="line"></span><br><span class="line">        boundary_lines.append((-W[0] / W[1], -b / W[1]))</span><br><span class="line"></span><br><span class="line">    return boundary_lines</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = pd.read_csv(&apos;data.csv&apos;)</span><br><span class="line">data.head()</span><br><span class="line">X = data.loc[:, [&apos;math&apos;, &apos;english&apos;]]</span><br><span class="line">y = data.loc[:, &apos;pass&apos;]</span><br><span class="line">X = X.values</span><br><span class="line">y = y.values</span><br><span class="line"></span><br><span class="line">plt.scatter(X[:, 0], X[:, 1], c=y)</span><br><span class="line"></span><br><span class="line">result = trainPerceptronAlgo(X, y)</span><br><span class="line"></span><br><span class="line">for i, j in result:</span><br><span class="line">    print(&quot;w=&quot;, i, &quot;b=&quot;, j)</span><br><span class="line"></span><br><span class="line">plt.scatter(X[:, 0], X[:, 1], c=y)</span><br><span class="line"># W和b的数组，取最后一组</span><br><span class="line">vals = result[-1]</span><br><span class="line">theta = vals[0][0]</span><br><span class="line">intercept = vals[1][0]</span><br><span class="line"># 得到的预测函数</span><br><span class="line">y2 = X * theta + intercept</span><br><span class="line">plt.plot(X, y2, color=&apos;red&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>5：Theory of the MLP (Multi-Layer Perceptron) model in neural networks（多层感知器）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Forword pass：calculates the outputs corresponding to the inputs</span><br><span class="line">backward pass：propagates the error backwards through the network starting at the output units</span><br></pre></td></tr></table></figure><p>6：How to implement Neural Network via Pytorch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torch.utils.data</span><br><span class="line">import torchvision</span><br><span class="line">from torchvision import transforms, datasets</span><br><span class="line">import torch.nn as nn</span><br><span class="line">import torch.nn.functional as F</span><br><span class="line">import torch.optim as optim</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">train = datasets.MNIST(&apos;&apos;, train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))</span><br><span class="line">test = datasets.MNIST(&apos;&apos;, train=False, download=True, transform=transforms.Compose([transforms.ToTensor()]))</span><br><span class="line"></span><br><span class="line"># 网络比较大的时候，batch_size可以设置大一点</span><br><span class="line">trainset = torch.utils.data.DataLoader(train, batch_size=10, shuffle=True)</span><br><span class="line">testset = torch.utils.data.DataLoader(test, batch_size=10, shuffle=True)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Net(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.fc1 = nn.Linear(28 * 28, 64)</span><br><span class="line">        self.fc2 = nn.Linear(64, 64)</span><br><span class="line">        self.fc3 = nn.Linear(64, 64)</span><br><span class="line">        self.fc4 = nn.Linear(64, 10)</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = F.relu(self.fc3(x))</span><br><span class="line">        x = self.fc4(x)</span><br><span class="line">        return F.log_softmax(x, dim=1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line">print(net)</span><br><span class="line"></span><br><span class="line">loss_function = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.Adam(net.parameters(), lr=0.001)</span><br><span class="line"></span><br><span class="line">for epoch in range(3):</span><br><span class="line">    for data in trainset:</span><br><span class="line">        X, y = data</span><br><span class="line">        net.zero_grad()</span><br><span class="line">        output = net(X.view(-1, 784))</span><br><span class="line">        loss = F.nll_loss(output, y)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">    print(loss)</span><br><span class="line"></span><br><span class="line">correct = 0</span><br><span class="line">total = 0</span><br><span class="line">with torch.no_grad():</span><br><span class="line">    for data in testset:</span><br><span class="line">        X, y = data</span><br><span class="line">        output = net(X.view(-1, 784))</span><br><span class="line">        for idx, i in enumerate(output):</span><br><span class="line">            if torch.argmax(i) == y[idx]:</span><br><span class="line">                correct += 1</span><br><span class="line">            total += 1</span><br><span class="line">print(&apos;Accuracy：&apos;, round(correct / total))</span><br><span class="line"></span><br><span class="line">plt.imshow(X[3].view(28, 28))</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(torch.argmax(net[0].view(-1, 784))[0])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1：Introduction to Neural Network&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>numpy</title>
    <link href="https://yanyubing.xyz/2020/03/11/numpy/"/>
    <id>https://yanyubing.xyz/2020/03/11/numpy/</id>
    <published>2020-03-11T10:01:15.455Z</published>
    <updated>2020-03-12T11:29:01.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h3><p>1：Numpy的优势</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Python数学运算慢</span><br><span class="line">完成1000*1000的矩阵运算:</span><br><span class="line">Python的循环时间&gt;10min</span><br><span class="line">Numpy大概0.03s</span><br></pre></td></tr></table></figure><p>2：install numpy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure><p>3： numpy array</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([1, 2, 3])</span><br><span class="line">b = np.array([[1, 2], [3, 4], [5, 6]])</span><br><span class="line">print(a[0])</span><br><span class="line">print(b[0])</span><br><span class="line">print(b[1][1])</span><br><span class="line">M = np.matrix([[1, 2], [3, 4], [5, 6]])</span><br><span class="line">print(&apos;-------------&apos;)</span><br><span class="line">print(b.T)</span><br><span class="line">print(&apos;-------------&apos;)</span><br><span class="line">print(b)</span><br><span class="line">print(&apos;-------------&apos;)</span><br><span class="line">print(b.shape)</span><br><span class="line">print(&apos;-------------&apos;)</span><br><span class="line">print(a.dtype)</span><br><span class="line">print(&apos;-------------&apos;)</span><br><span class="line">print(b.dtype)</span><br><span class="line">print(&apos;-------------&apos;)</span><br><span class="line">d = np.array([1.2, 1.2])</span><br><span class="line">print(d.dtype)</span><br><span class="line">print(&apos;-------------&apos;)</span><br><span class="line">e = np.array([1, 2], dtype=np.float64)</span><br><span class="line">print(e.dtype)</span><br><span class="line">print(a.min())</span><br><span class="line">print(a.max())</span><br></pre></td></tr></table></figure><p>4：Creating specific arrays, Reshape and more（创建特定的数组，整形等）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.zeros((2, 3))</span><br><span class="line">print(a)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line">b = np.ones((3, 2))</span><br><span class="line">print(b)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line">c = np.ones((3, 2), dtype=np.int16)</span><br><span class="line">print(c)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line">d = np.empty((3, 3))</span><br><span class="line">print(d)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line">e = np.empty([3, 3], dtype=np.int16)</span><br><span class="line">print(e)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line"># 类型python的range</span><br><span class="line">f = np.arange(1, 5)</span><br><span class="line">print(f)</span><br><span class="line"># 均匀间隔的样本</span><br><span class="line">g = np.linspace(1, 5)</span><br><span class="line">print(g)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line"># 指定样本数据的个数</span><br><span class="line">h = np.linspace(1, 5, 10)</span><br><span class="line">print(h)</span><br><span class="line"># reshape，重塑数组,数据合一致</span><br><span class="line">c.reshape((3, 2))</span><br><span class="line"># -1表示填充</span><br><span class="line">c.reshape((1, -1))</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line"># 拼接</span><br><span class="line">h = [(1, 2, 3), (4, 3, 2)]</span><br><span class="line">m = np.vstack((a, h))</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Numpy&quot;&gt;&lt;a href=&quot;#Numpy&quot; class=&quot;headerlink&quot; title=&quot;Numpy&quot;&gt;&lt;/a&gt;Numpy&lt;/h3&gt;&lt;p&gt;1：Numpy的优势&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>openCV-python</title>
    <link href="https://yanyubing.xyz/2020/03/06/openCV-python/"/>
    <id>https://yanyubing.xyz/2020/03/06/openCV-python/</id>
    <published>2020-03-06T12:06:09.186Z</published>
    <updated>2020-03-10T20:23:09.558Z</updated>
    
    <content type="html"><![CDATA[<p>1：Introduction to OpenCV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1：Mac ，Windows,Linux系统都可以</span><br><span class="line">2：c,c++,python</span><br><span class="line">3：开源</span><br><span class="line">4：易于安装</span><br></pre></td></tr></table></figure><p>2：How to Install OpenCV for Python on Windows 10</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python</span><br><span class="line">import cv2</span><br><span class="line">cv2.__version__</span><br></pre></td></tr></table></figure><p>3: How to Read, Write, Show Images in OpenCV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line"></span><br><span class="line"># 读取图片,第二个参数0,-1,1含义不同</span><br><span class="line">img = cv2.imread(&quot;lena.jpg&quot;, 0)</span><br><span class="line"></span><br><span class="line">print(img)</span><br><span class="line"># 显示图片</span><br><span class="line">cv2.imshow(&apos;img&apos;, img)</span><br><span class="line"># 增加显示图片的时间,0代表一直显示</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"># 中断程序</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"># Write图片</span><br><span class="line">cv2.imwrite(&apos;lena_copy.png&apos;, img)</span><br></pre></td></tr></table></figure><p>4：How to Read, Write, Show Videos from Camera in OpenCV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line"></span><br><span class="line"># 参数0，代表默认的camera</span><br><span class="line">cap = cv2.VideoCapture(0)</span><br><span class="line"></span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*&apos;XVID&apos;)</span><br><span class="line"># 摄像头视频保存</span><br><span class="line">out = cv2.VideoWriter(&apos;output.avi&apos;, fourcc, 20.0, (640, 480))</span><br><span class="line"># 没有打开正确的摄像头则进不去</span><br><span class="line">while cap.isOpened():</span><br><span class="line">    # 开始读取</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    # 有帧返回</span><br><span class="line">    if ret == True:</span><br><span class="line">        # 获取每一帧的宽和高</span><br><span class="line">        print(cap.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">        print(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">        # 每一帧写出</span><br><span class="line">        out.write(frame)</span><br><span class="line">        # 把每一帧转化为了灰度图片</span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">        # 展示</span><br><span class="line">        cv2.imshow(&apos;frame&apos;, gray)</span><br><span class="line"></span><br><span class="line">        if cv2.waitKey(1) &amp; 0xff == ord(&apos;q&apos;):</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line"># 释放资源</span><br><span class="line">cap.release()</span><br><span class="line">out.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>5：Draw geometric shapes on images using Python OpenCV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;lena.jpg&apos;, 1)</span><br><span class="line"># 转化为黑色图片</span><br><span class="line">img = np.zeros([512, 512, 3], np.uint8)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">直线</span><br><span class="line">图片，起始点，终点，颜色，厚度</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">img = cv2.line(img, (0, 0), (255, 255), (255, 0, 0), 5)</span><br><span class="line"># 箭头</span><br><span class="line">img = cv2.arrowedLine(img, (100, 0), (100, 100), (255, 255, 0), 10)</span><br><span class="line"># 长方形</span><br><span class="line">img = cv2.rectangle(img, (50, 50), (100, 200), (0, 255, 0), 15)</span><br><span class="line"></span><br><span class="line"># 圆</span><br><span class="line">img = cv2.circle(img, (150, 150), 50, (255, 0, 0), 10)</span><br><span class="line"></span><br><span class="line"># font(字形)</span><br><span class="line">font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line">img = cv2.putText(img, &apos;openCV&apos;, (10, 500), font, 4, (255, 255, 255), 10, cv2.LINE_AA)</span><br><span class="line">cv2.imshow(&apos;image&apos;, img)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>6：Show Date and Time on Videos using OpenCV Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(0)</span><br><span class="line">print(cap.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">print(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line"></span><br><span class="line">cap.set(3, 3000)</span><br><span class="line">cap.set(4, 3000)</span><br><span class="line"></span><br><span class="line">while cap.isOpened():</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    if ret == True:</span><br><span class="line">        font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line">        # 文本</span><br><span class="line">        text = &apos;Width:&apos; + str(cap.get(3)) + &apos;  Height&apos; + str(cap.get(4))</span><br><span class="line">        # 时间</span><br><span class="line">        datet = str(datetime.datetime.now())</span><br><span class="line">        # 添加文本</span><br><span class="line">        frame = cv2.putText(frame, datet, (10, 50), font,</span><br><span class="line">                            1, (0, 255, 255), 2, cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line">        cv2.imshow(&apos;frame&apos;, frame)</span><br><span class="line"></span><br><span class="line">        if cv2.waitKey(1) &amp; 0xff == ord(&apos;q&apos;):</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>7：Handle Mouse Events in OpenCV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># # 获取所有的EVENT事件名</span><br><span class="line"># events = [i for i in dir(cv2) if &apos;EVENT&apos; in i]</span><br><span class="line">#</span><br><span class="line"># print(events)</span><br><span class="line"></span><br><span class="line">def click_event(event, x, y, flags, param):</span><br><span class="line">    # 双击事件</span><br><span class="line">    if event == cv2.EVENT_LBUTTONDBLCLK:</span><br><span class="line">        print(x, &apos;,&apos;, y)</span><br><span class="line">        font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line">        strXY = str(x) + &apos;,&apos; + str(y)</span><br><span class="line">        cv2.putText(img, strXY, (x, y), font, .5, (0, 255, 0), 2)</span><br><span class="line">        cv2.imshow(&apos;image&apos;, img)</span><br><span class="line">    # 右键</span><br><span class="line">    if event == cv2.EVENT_RBUTTONDOWN:</span><br><span class="line">        # https://docs.opencv.org/3.4/d5/d98/tutorial_mat_operations.html</span><br><span class="line">        # 获取BGR</span><br><span class="line">        blue = img[y, x, 0]</span><br><span class="line">        green = img[y, x, 1]</span><br><span class="line">        red = img[y, x, 2]</span><br><span class="line"></span><br><span class="line">        font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line">        strBGR = str(blue) + &apos;,&apos; + str(green) + &apos;,&apos; + str(red)</span><br><span class="line">        cv2.putText(img, strBGR, (x, y), font, .5, (0, 255, 255), 2)</span><br><span class="line">        cv2.imshow(&apos;image&apos;, img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># img = np.zeros((512, 512, 3), np.uint8)</span><br><span class="line">img = cv2.imread(&apos;lena.jpg&apos;)</span><br><span class="line">cv2.imshow(&apos;image&apos;, img)</span><br><span class="line"></span><br><span class="line">cv2.setMouseCallback(&apos;image&apos;, click_event)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>8：More Mouse Event Examples in OpenCV Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># # 获取所有的EVENT事件名</span><br><span class="line"># events = [i for i in dir(cv2) if &apos;EVENT&apos; in i]</span><br><span class="line">#</span><br><span class="line"># print(events)</span><br><span class="line"></span><br><span class="line">def click_event(event, x, y, flags, param):</span><br><span class="line">    #</span><br><span class="line">    if event == cv2.EVENT_LBUTTONDOWN:</span><br><span class="line">        cv2.circle(img, (x, y), 3, (0, 0, 225), -1)</span><br><span class="line">        # 点击的点储存在points中</span><br><span class="line">        points.append((x, y))</span><br><span class="line">        # 点超过两次</span><br><span class="line">        if len(points) &gt;= 2:</span><br><span class="line">            cv2.line(img, points[-1], points[-2], (255, 0, 0), 5)</span><br><span class="line">        cv2.imshow(&apos;image&apos;, img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = np.zeros((512, 512, 3), np.uint8)</span><br><span class="line"># img = cv2.imread(&apos;lena.jpg&apos;)</span><br><span class="line">cv2.imshow(&apos;image&apos;, img)</span><br><span class="line"></span><br><span class="line">points = []</span><br><span class="line"></span><br><span class="line">cv2.setMouseCallback(&apos;image&apos;, click_event)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>9：cv.split, cv.merge, cv.resize, cv.add, cv.addWeighted, ROI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import numpy as py</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;messi5.jpg&apos;)</span><br><span class="line">img2 = cv2.imread(&apos;opencv-logo.png&apos;)</span><br><span class="line"></span><br><span class="line">print(img.shape)  # returns a tuple of number of rows,columns,and channels,(342, 548, 3)</span><br><span class="line">print(img.size)  # returns  Total number of pixels is accessed,562248。等于上面长宽通道数的乘积</span><br><span class="line">print(img.dtype)  # returns Image datatype is obtained,返回获得图像数据类型uint8</span><br><span class="line"># 获取b,g,r channel</span><br><span class="line">b, g, r = cv2.split(img)</span><br><span class="line"># 合并b,g,r channel</span><br><span class="line">img = cv2.merge((b, g, r))</span><br><span class="line"></span><br><span class="line"># 获取球的坐标</span><br><span class="line">ball = img[280:340, 330:390]</span><br><span class="line">img[273:333, 100:160] = ball</span><br><span class="line"></span><br><span class="line"># 合并图片,前提是arraySize一致</span><br><span class="line">img = cv2.resize(img, (512, 512))</span><br><span class="line">img2 = cv2.resize(img2, (512, 512))</span><br><span class="line">dst = cv2.add(img, img2)</span><br><span class="line"></span><br><span class="line"># 合并图片2，增加不同的权值,权值之和1</span><br><span class="line">dst2 = cv2.addWeighted(img, 0.8, img2, 0.2, 0)</span><br><span class="line">cv2.imshow(&apos;img&apos;, dst2)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>10：Bitwise Operations (bitwise AND, OR, NOT and XOR)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># 制作两个图片</span><br><span class="line">img1 = np.zeros((250, 500, 3), np.uint8)</span><br><span class="line">img1 = cv2.rectangle(img1, (200, 0), (300, 100), (255, 255, 255), -1)</span><br><span class="line"></span><br><span class="line">img2 = np.zeros((250, 500, 3), np.uint8)</span><br><span class="line">img2 = cv2.rectangle(img2, (250, 0), (500, 250), (255, 255, 255), -1)</span><br><span class="line">cv2.imwrite(&apos;image_1.png&apos;, img1)</span><br><span class="line">cv2.imwrite(&apos;image_2.png&apos;, img2)</span><br><span class="line"></span><br><span class="line"># 读取图片</span><br><span class="line">img1 = cv2.imread(&apos;image_1.png&apos;)</span><br><span class="line">img2 = cv2.imread(&apos;image_2.png&apos;)</span><br><span class="line"></span><br><span class="line"># 二进制操作</span><br><span class="line"># URL:https://docs.opencv.org/2.4/modules/core/doc/operations_on_arrays.html#bitwise-and</span><br><span class="line"># 逻辑and：全白才为白，有黑即为黑,底层进行的是255的二进制&amp;运算</span><br><span class="line">bitAnd = cv2.bitwise_and(img1, img2)</span><br><span class="line"># or,有白就白</span><br><span class="line">bitOr = cv2.bitwise_or(img1, img2)</span><br><span class="line"># not:取反</span><br><span class="line">bitNot1 = cv2.bitwise_not(img1)</span><br><span class="line">bitNot2 = cv2.bitwise_not(img2)</span><br><span class="line"># XOR:一样取黑，不一样取白</span><br><span class="line">bitxor = cv2.bitwise_xor(img1, img2)</span><br><span class="line"># 合并之后的图片展示</span><br><span class="line">cv2.imshow(&apos;bitAnd&apos;, bitAnd)</span><br><span class="line">cv2.imshow(&apos;bitOr&apos;, bitOr)</span><br><span class="line">cv2.imshow(&apos;bitNot1&apos;, bitNot1)</span><br><span class="line">cv2.imshow(&apos;bitNot2&apos;, bitNot2)</span><br><span class="line">cv2.imshow(&apos;bitXor&apos;, bitxor)</span><br><span class="line"></span><br><span class="line"># cv2.imshow(&apos;img1&apos;, img1)</span><br><span class="line"># cv2.imshow(&apos;img2&apos;, img2)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>11：How to Bind Trackbar To OpenCV Windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line"># 创建一个黑图片和window</span><br><span class="line">img = np.zeros((300, 512, 3), np.uint8)</span><br><span class="line">cv2.namedWindow(&apos;image&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def nothing(x):</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建调色栏</span><br><span class="line">cv2.createTrackbar(&apos;B&apos;, &apos;image&apos;, 0, 255, nothing)</span><br><span class="line">cv2.createTrackbar(&apos;G&apos;, &apos;image&apos;, 0, 255, nothing)</span><br><span class="line">cv2.createTrackbar(&apos;R&apos;, &apos;image&apos;, 0, 255, nothing)</span><br><span class="line"></span><br><span class="line"># 创建切换按钮</span><br><span class="line">switch = &apos;0:OFF\n1:ON&apos;</span><br><span class="line">cv2.createTrackbar(switch, &apos;image&apos;, 0, 1, nothing)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    # 展示</span><br><span class="line">    cv2.imshow(&apos;image&apos;, img)</span><br><span class="line">    k = cv2.waitKey(1) &amp; 0xff</span><br><span class="line">    if k == 27:</span><br><span class="line">        break</span><br><span class="line">    # 获取b,r,g</span><br><span class="line">    b = cv2.getTrackbarPos(&apos;B&apos;, &apos;image&apos;)</span><br><span class="line">    r = cv2.getTrackbarPos(&apos;R&apos;, &apos;image&apos;)</span><br><span class="line">    g = cv2.getTrackbarPos(&apos;G&apos;, &apos;image&apos;)</span><br><span class="line">    s = cv2.getTrackbarPos(switch, &apos;image&apos;)</span><br><span class="line">    if s == 0:</span><br><span class="line">        img[:] = 0</span><br><span class="line">    else:</span><br><span class="line">        # 图片三通道赋值</span><br><span class="line">        img[:] = [b, r, g]</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>12：Object Detection and Object Tracking Using HSV Color Space</p><p>（使用HSV颜色空间进行目标检测和目标跟踪：Hue,Saturation and  Valu色相，饱和度和值）</p><p>H指的就是色相，是以红色为0<a href="https://zh.wikipedia.org/wiki/角度" target="_blank" rel="noopener">度</a>（360度）；黄色为60度；绿色为120度；青色为180度；蓝色为240度；品红色为300度 </p><p>S值0-1：色相的权重</p><p>V值0-1：颜色的亮度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def nothing(x):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 摄像头</span><br><span class="line">cap = cv2.VideoCapture(0)</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(&apos;Tracking&apos;)</span><br><span class="line"># ,范围不是很好确定，使用TrackBar来微调</span><br><span class="line">cv2.createTrackbar(&apos;LH&apos;, &apos;Tracking&apos;, 0, 255, nothing)</span><br><span class="line">cv2.createTrackbar(&apos;UH&apos;, &apos;Tracking&apos;, 255, 255, nothing)</span><br><span class="line">cv2.createTrackbar(&apos;LS&apos;, &apos;Tracking&apos;, 0, 255, nothing)</span><br><span class="line">cv2.createTrackbar(&apos;US&apos;, &apos;Tracking&apos;, 255, 255, nothing)</span><br><span class="line">cv2.createTrackbar(&apos;LV&apos;, &apos;Tracking&apos;, 0, 255, nothing)</span><br><span class="line">cv2.createTrackbar(&apos;UV&apos;, &apos;Tracking&apos;, 255, 255, nothing)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    # frame = cv2.imread(&apos;smarties.png&apos;)</span><br><span class="line">    # 转换为摄像头</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    # 转换为hsv</span><br><span class="line">    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)</span><br><span class="line"></span><br><span class="line">    l_h = cv2.getTrackbarPos(&apos;LH&apos;, &apos;Tracking&apos;)</span><br><span class="line">    l_s = cv2.getTrackbarPos(&apos;LS&apos;, &apos;Tracking&apos;)</span><br><span class="line">    l_v = cv2.getTrackbarPos(&apos;LV&apos;, &apos;Tracking&apos;)</span><br><span class="line"></span><br><span class="line">    u_h = cv2.getTrackbarPos(&apos;UH&apos;, &apos;Tracking&apos;)</span><br><span class="line">    u_s = cv2.getTrackbarPos(&apos;US&apos;, &apos;Tracking&apos;)</span><br><span class="line">    u_v = cv2.getTrackbarPos(&apos;UV&apos;, &apos;Tracking&apos;)</span><br><span class="line"></span><br><span class="line">    l_b = np.array([l_h, l_s, l_v])</span><br><span class="line">    u_b = np.array([u_h, u_s, u_v])</span><br><span class="line"></span><br><span class="line">    # # 蓝色低范围</span><br><span class="line">    # l_b = np.array([110, 50, 50])</span><br><span class="line">    # # 蓝色高范围</span><br><span class="line">    # u_b = np.array([130, 255, 255])</span><br><span class="line">    # 标记区间</span><br><span class="line">    mask = cv2.inRange(hsv, l_b, u_b)</span><br><span class="line">    # 结果</span><br><span class="line">    res = cv2.bitwise_and(frame, frame, mask=mask)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(&apos;frame&apos;, frame)</span><br><span class="line">    cv2.imshow(&apos;mask&apos;, mask)</span><br><span class="line">    cv2.imshow(&apos;res&apos;, res)</span><br><span class="line"></span><br><span class="line">    key = cv2.waitKey(1)</span><br><span class="line">    if key == 27:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>13：Simple Image Thresholding</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># Simple Image Thresholding</span><br><span class="line"># 简单阈值:</span><br><span class="line"># 对于每个像素，应用相同的阈值。如果像素值小于阈值，则将其设置为0，</span><br><span class="line"># 否则将其设置为最大值。函数cv.threshold用于应用阈值。</span><br><span class="line"># 第一个参数是源图像，它应该是灰度图像。</span><br><span class="line"># 第二个参数是阈值，用于对像素值进行分类。</span><br><span class="line"># 第三个参数是分配给超过阈值的像素值的最大值。</span><br><span class="line"># OpenCV提供了不同类型的阈值，这由函数的第四个参数给出。</span><br><span class="line"># 通过使用类型cv.THRESH_BINARY完成上述基本阈值处理。所有简单的阈值类型为：</span><br><span class="line"># https://docs.opencv.org/master/d7/d4d/tutorial_py_thresholding.html</span><br><span class="line"></span><br><span class="line">import cv2 as cv</span><br><span class="line">import numpy as np</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line"></span><br><span class="line">img = cv.imread(&apos;gradient.png&apos;, 0)</span><br><span class="line">ret, thresh1 = cv.threshold(img, 127, 255, cv.THRESH_BINARY)</span><br><span class="line">ret, thresh2 = cv.threshold(img, 127, 255, cv.THRESH_BINARY_INV)</span><br><span class="line">ret, thresh3 = cv.threshold(img, 127, 255, cv.THRESH_TRUNC)</span><br><span class="line">ret, thresh4 = cv.threshold(img, 127, 255, cv.THRESH_TOZERO)</span><br><span class="line">ret, thresh5 = cv.threshold(img, 127, 255, cv.THRESH_TOZERO_INV)</span><br><span class="line">titles = [&apos;Original Image&apos;, &apos;BINARY&apos;, &apos;BINARY_INV&apos;, &apos;TRUNC&apos;, &apos;TOZERO&apos;, &apos;TOZERO_INV&apos;]</span><br><span class="line">images = [img, thresh1, thresh2, thresh3, thresh4, thresh5]</span><br><span class="line">for i in range(6):</span><br><span class="line">#绘图</span><br><span class="line">    plt.subplot(2, 3, i + 1), plt.imshow(images[i], &apos;gray&apos;)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>14：Adaptive Thresholding</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;sudoku.png&apos;, 0)</span><br><span class="line">_, th1 = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)</span><br><span class="line"># https://docs.opencv.org/3.4/d7/d1b/group__imgproc__misc.html</span><br><span class="line">th2 = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_MEAN_C,</span><br><span class="line">                            cv2.THRESH_BINARY, 11, 2)</span><br><span class="line">th3 = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,</span><br><span class="line">                            cv2.THRESH_BINARY, 11, 2)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&apos;image&apos;, img)</span><br><span class="line"># cv2.imshow(&apos;th1&apos;, th1)</span><br><span class="line">cv2.imshow(&apos;th2&apos;, th2)</span><br><span class="line">cv2.imshow(&apos;th3&apos;, th3)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>15：matplotlib with OpenCV（ <a href="https://matplotlib.org/" target="_blank" rel="noopener">https://matplotlib.org/</a> ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;lena.jpg&apos;, -1)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&apos;image&apos;, img)</span><br><span class="line"># 图片转换</span><br><span class="line"># img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line">plt.imshow(img)</span><br><span class="line"></span><br><span class="line"># 隐藏坐标</span><br><span class="line"># plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>16：Morphological Transformations</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;smarties.png&apos;, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line">_, mask = cv2.threshold(img, 220, 255, cv2.THRESH_BINARY_INV)</span><br><span class="line"></span><br><span class="line"># 返回给定形状和类型的新数组，并填充为1。</span><br><span class="line">kernel = np.ones((2, 2), np.uint8)</span><br><span class="line"># 通过使用特定的结构元素来扩展图像。</span><br><span class="line">dilation = cv2.dilate(mask, kernel, iterations=2)</span><br><span class="line"># 通过使用特定的结构元素腐蚀图像。</span><br><span class="line">erosion = cv2.erode(mask, kernel, iterations=1)</span><br><span class="line"># morphologyEx可以使用侵蚀和膨胀来执行高级形态转换</span><br><span class="line">opening = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)</span><br><span class="line">closing = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)</span><br><span class="line"></span><br><span class="line">title = [&apos;image&apos;, &apos;mask&apos;, &apos;dilation&apos;, &apos;erosion&apos;, &apos;opening&apos;, &apos;closing&apos;]</span><br><span class="line"></span><br><span class="line">images = [img, mask, dilation, erosion, opening, closing]</span><br><span class="line"></span><br><span class="line">for i in range(6):</span><br><span class="line">    plt.subplot(3, 3, i + 1), plt.imshow(images[i], &apos;gray&apos;)</span><br><span class="line">    plt.title(title[i])</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>17：Smoothing Images | Blurring Images OpenCV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line"></span><br><span class="line"># OpenCV读取的是BGR格式</span><br><span class="line">img = cv2.imread(&apos;lena.jpg&apos;)</span><br><span class="line"># matplotlib读取的是RGB格式，所以需要转换格式</span><br><span class="line">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line">kernel = np.ones((5, 5), np.float32) / 25</span><br><span class="line"># 均质过滤器,进行去噪</span><br><span class="line">dst = cv2.filter2D(img, -1, kernel)</span><br><span class="line"># 模糊化</span><br><span class="line">blur = cv2.blur(img, (5, 5))</span><br><span class="line"># 高斯过滤器</span><br><span class="line">gblur = cv2.GaussianBlur(img, (5, 5), 0)</span><br><span class="line"># Salt-and-pepper noise is a form of noise sometimes seen on images. ...</span><br><span class="line"># This noise can be caused by sharp and sudden disturbances in the image signal.</span><br><span class="line"># It presents itself as sparsely occurring white and black pixels.</span><br><span class="line"># An effective noise reduction method for this type of noise is a median filter or a morphological filter.</span><br><span class="line"># kernelSize的大小为奇数，1除外</span><br><span class="line">median = cv2.medianBlur(img, 5)</span><br><span class="line">titles = [&apos;image&apos;, &apos;2D Convolution&apos;, &apos;blur&apos;, &apos;GaussianBlur&apos;, &apos;median&apos;]</span><br><span class="line">images = [img, dst, blur, gblur, median]</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    plt.subplot(2, 3, i + 1), plt.imshow(images[i], &apos;gray&apos;)</span><br><span class="line">    plt.title(titles[i])</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>18：Image Gradients and Edge Detection</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 图片梯度和边缘检测</span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;sudoku.png&apos;, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line"># 拉普拉斯方法</span><br><span class="line">lap = cv2.Laplacian(img, cv2.CV_64F, ksize=3)  # 转换成拉普拉斯方法适应的数据格式</span><br><span class="line">lap = np.uint8(np.absolute(lap))</span><br><span class="line"></span><br><span class="line"># Sobel方法</span><br><span class="line"># dx=1,dy=0</span><br><span class="line">sobelX = cv2.Sobel(img, cv2.CV_64F, 1, 0)</span><br><span class="line"># dx=0,dy=0</span><br><span class="line">sobelY = cv2.Sobel(img, cv2.CV_64F, 0, 1)</span><br><span class="line"></span><br><span class="line">sobelX = np.uint8(np.absolute(sobelX))</span><br><span class="line">sobelY = np.uint8(np.absolute(sobelY))</span><br><span class="line"></span><br><span class="line">sobelCombined = cv2.bitwise_or(sobelY, sobelY)</span><br><span class="line"></span><br><span class="line">title = [&apos;image&apos;, &quot;laplacian&quot;, &apos;sobelX&apos;, &apos;sobelY&apos;, &apos;sobelCombined&apos;]</span><br><span class="line">images = [img, lap, sobelX, sobelY, sobelCombined]</span><br><span class="line"></span><br><span class="line">for i in range(5):</span><br><span class="line">    plt.subplot(2, 3, i + 1), plt.imshow(images[i], &apos;gray&apos;)</span><br><span class="line">    plt.title(title[i])</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>19：Canny Edge Detection in OpenCV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 图片梯度和边缘检测</span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;messi5.jpg&apos;, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line"># 拉普拉斯方法</span><br><span class="line">lap = cv2.Laplacian(img, cv2.CV_64F, ksize=3)  # 转换成拉普拉斯方法适应的数据格式</span><br><span class="line">lap = np.uint8(np.absolute(lap))</span><br><span class="line"></span><br><span class="line"># Sobel方法</span><br><span class="line"># dx=1,dy=0</span><br><span class="line">sobelX = cv2.Sobel(img, cv2.CV_64F, 1, 0)</span><br><span class="line"># dx=0,dy=0</span><br><span class="line">sobelY = cv2.Sobel(img, cv2.CV_64F, 0, 1)</span><br><span class="line"></span><br><span class="line">sobelX = np.uint8(np.absolute(sobelX))</span><br><span class="line">sobelY = np.uint8(np.absolute(sobelY))</span><br><span class="line"></span><br><span class="line">sobelCombined = cv2.bitwise_or(sobelY, sobelY)</span><br><span class="line"></span><br><span class="line">canny = cv2.Canny(img, 100, 200)</span><br><span class="line"></span><br><span class="line">title = [&apos;image&apos;, &quot;laplacian&quot;, &apos;sobelX&apos;, &apos;sobelY&apos;, &apos;sobelCombined&apos;, &apos;canny&apos;]</span><br><span class="line">images = [img, lap, sobelX, sobelY, sobelCombined, canny]</span><br><span class="line"></span><br><span class="line">for i in range(6):</span><br><span class="line">    plt.subplot(2, 3, i + 1), plt.imshow(images[i], &apos;gray&apos;)</span><br><span class="line">    plt.title(title[i])</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>20： Image Pyramids with Python and OpenCV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># Pyramid, or pyramid representation, is a type of multi-scale signal representation developed by the computer vision,</span><br><span class="line"># image processing and signal processing communities, in which a signal or an image is subject to repeated smoothing and subsampling</span><br><span class="line"># Pyramid representation is a predecessor to scale-space representation and multiresolution analysis.</span><br><span class="line"></span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;lena.jpg&apos;)</span><br><span class="line"># 图片尺寸缩小为1/4</span><br><span class="line">lr1 = cv2.pyrDown(img)</span><br><span class="line">lr2 = cv2.pyrDown(lr1)</span><br><span class="line"># 图片尺寸增大为4倍，但是清晰度降低，因为在缩小过程中部分信息丢失</span><br><span class="line">lh2 = cv2.pyrUp(lr2)</span><br><span class="line"># 高斯金字塔可以解决上面问题</span><br><span class="line">layer = img.copy()</span><br><span class="line">gp = [layer]</span><br><span class="line">for i in range(6):</span><br><span class="line">    layer = cv2.pyrDown(layer)</span><br><span class="line">    gp.append(layer)</span><br><span class="line">    # cv2.imshow(str(i + 1), layer)</span><br><span class="line"></span><br><span class="line"># 拉普拉斯金字塔,显示的不同尺寸的边缘检测</span><br><span class="line"># 获取最后一个图片</span><br><span class="line">layer = gp[-1]</span><br><span class="line">cv2.imshow(&apos;upper level Gaussian Pyramid&apos;, layer)</span><br><span class="line">lp = [layer]</span><br><span class="line">for i in range(5, 0, -1):</span><br><span class="line">    guassian_extened = cv2.pyrUp(gp[i])</span><br><span class="line">    laplacian = cv2.subtract(gp[i - 1], guassian_extened)</span><br><span class="line">    cv2.imshow(str(i), laplacian)</span><br><span class="line"></span><br><span class="line"># cv2.imshow(&apos;Original image&apos;, img)</span><br><span class="line"># cv2.imshow(&apos;pyrDown 1 image&apos;, lr1)</span><br><span class="line"># cv2.imshow(&apos;pyrDown 2 image&apos;, lr2)</span><br><span class="line"># cv2.imshow(&apos;pyrUp 1 image&apos;, lh2)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>21：Image Blending using Pyramids in OpenCV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># 图片之间的融合</span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">apple = cv2.imread(&apos;apple.jpg&apos;)</span><br><span class="line">orange = cv2.imread(&apos;orange.jpg&apos;)</span><br><span class="line"></span><br><span class="line"># 打印尺度</span><br><span class="line">print(apple.shape)</span><br><span class="line">print(orange.shape)</span><br><span class="line"></span><br><span class="line"># 合并</span><br><span class="line">apple_orange = np.hstack((apple[:, :256], orange[:, 256:]))</span><br><span class="line"># 合并的问题是中间存在明显的痕迹，使用高斯金字塔或者拉普拉斯金字塔处理</span><br><span class="line"># step1:高斯金字塔</span><br><span class="line">apple_copy = apple.copy()</span><br><span class="line">gp_apple = [apple_copy]</span><br><span class="line">for i in range(6):</span><br><span class="line">    apple_copy = cv2.pyrDown(apple_copy)</span><br><span class="line">    gp_apple.append(apple_copy)</span><br><span class="line"></span><br><span class="line">orange_copy = orange.copy()</span><br><span class="line">gp_orange = [orange_copy]</span><br><span class="line">for i in range(6):</span><br><span class="line">    orange_copy = cv2.pyrDown(orange_copy)</span><br><span class="line">    gp_orange.append(orange_copy)</span><br><span class="line"></span><br><span class="line"># step2:拉普拉斯金字塔</span><br><span class="line">apple_copy = gp_apple[5]</span><br><span class="line">lp_apple = [apple_copy]</span><br><span class="line">for i in range(5, 0, -1):</span><br><span class="line">    gaussian_expanded = cv2.pyrUp(gp_apple[i])</span><br><span class="line">    laplacian = cv2.subtract(gp_apple[i - 1], gaussian_expanded)</span><br><span class="line">    lp_apple.append(laplacian)</span><br><span class="line"></span><br><span class="line">orange_copy = gp_orange[5]</span><br><span class="line">lp_orange = [orange_copy]</span><br><span class="line">for i in range(5, 0, -1):</span><br><span class="line">    gaussian_expanded = cv2.pyrUp(gp_orange[i])</span><br><span class="line">    laplacian = cv2.subtract(gp_orange[i - 1], gaussian_expanded)</span><br><span class="line">    lp_orange.append(laplacian)</span><br><span class="line"></span><br><span class="line"># step3:合并</span><br><span class="line">apple_orange_pyramid = []</span><br><span class="line">n = 0</span><br><span class="line">for apple_lap, orange_lap in zip(lp_apple, lp_orange):</span><br><span class="line">    n += 1</span><br><span class="line">    cols, rows, ch = apple_lap.shape</span><br><span class="line">    laplacian = np.hstack((apple_lap[:, 0:int(cols / 2)], orange_lap[:, int(cols / 2):]))</span><br><span class="line">    apple_orange_pyramid.append(laplacian)</span><br><span class="line"></span><br><span class="line"># step4:重构</span><br><span class="line">apple_orange_reconstruct = apple_orange_pyramid[0]</span><br><span class="line">for i in range(1, 6):</span><br><span class="line">    apple_orange_reconstruct = cv2.pyrUp(apple_orange_reconstruct)</span><br><span class="line">    print(apple_orange_reconstruct.shape)</span><br><span class="line">    print(apple_orange_pyramid[i].shape)</span><br><span class="line">    apple_orange_reconstruct = cv2.add(apple_orange_pyramid[i], apple_orange_reconstruct)</span><br><span class="line"></span><br><span class="line"># cv2.imshow(&apos;apple_orange&apos;, apple_orange)</span><br><span class="line"># cv2.imshow(&apos;apple&apos;, apple)</span><br><span class="line"># cv2.imshow(&apos;orange&apos;, orange)</span><br><span class="line">cv2.imshow(&apos;apple_orange_reconstruct&apos;, apple_orange_reconstruct)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>22： Find and Draw Contours with OpenCV in Python（绘制轮廓）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 绘制轮廓</span><br><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line"># 读取图片</span><br><span class="line">img = cv2.imread(&apos;opencv-logo.png&apos;)</span><br><span class="line"># 转换成灰度图片</span><br><span class="line">imgray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"># 阈值处理</span><br><span class="line">ret, thresh = cv2.threshold(imgray, 127, 255, 0)</span><br><span class="line"># 轮廓检测</span><br><span class="line">contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)</span><br><span class="line">print(&apos;Number of contours:&apos; + str(len(contours)))</span><br><span class="line"># 绘制轮廓，-1表示所有轮廓，contours为lists</span><br><span class="line">cv2.drawContours(img, contours, -1, (0, 255, 0), 3)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&apos;image&apos;, img)</span><br><span class="line">cv2.imshow(&apos;imagray&apos;, imgray)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>23： Motion Detection and Tracking Using Opencv Contours（使用Opencv轮廓进行运动检测和跟踪 ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line"></span><br><span class="line"># 读取视频</span><br><span class="line">cap = cv2.VideoCapture(&apos;vtest.avi&apos;)</span><br><span class="line"># cap = cv2.VideoCapture(0)</span><br><span class="line"># 获取两个读取对象</span><br><span class="line">ret, frame1 = cap.read()</span><br><span class="line">ret, frame2 = cap.read()</span><br><span class="line"></span><br><span class="line">while cap.isOpened():</span><br><span class="line">    # 获取两个读取对象的不同,用于跟踪</span><br><span class="line">    diff = cv2.absdiff(frame1, frame2)</span><br><span class="line">    # 转换成灰度利于进行轮廓检测</span><br><span class="line">    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    # 模糊化处理</span><br><span class="line">    blur = cv2.GaussianBlur(gray, (5, 5), 0)</span><br><span class="line">    # 阈值处理</span><br><span class="line">    _, thresh = cv2.threshold(blur, 20, 225, cv2.THRESH_BINARY)</span><br><span class="line">    # 扩张处理</span><br><span class="line">    dilated = cv2.dilate(thresh, None, iterations=3)</span><br><span class="line">    # 轮廓检测</span><br><span class="line">    contours, _ = cv2.findContours(dilated, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">    # 绘制轮廓,问题在于所有变化的轮廓都会被绘制出来，且不是矩形边框</span><br><span class="line">    for contour in contours:</span><br><span class="line">        # 轮廓转换成矩形边框</span><br><span class="line">        (x, y, w, h) = cv2.boundingRect(contour)</span><br><span class="line">        # 只处理区域大于700的轮廓(去噪)</span><br><span class="line">        if cv2.contourArea(contour) &lt; 1000:</span><br><span class="line">            continue</span><br><span class="line">        # 绘制矩形框，参数是左上和右下</span><br><span class="line">        cv2.rectangle(frame1, (x, y), (x + w, y + h), (0, 255, 0), 2)</span><br><span class="line">        cv2.putText(frame1, &apos;Status: &#123;&#125;&apos;.format(&apos;Movement&apos;), (10, 20), cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line">                    , 1, (0, 0, 255), 3)</span><br><span class="line">    # cv2.drawContours(frame1, contours, -1, (0, 255, 0), 2)</span><br><span class="line">    # 展示</span><br><span class="line">    cv2.imshow(&apos;inter&apos;, frame1)</span><br><span class="line">    # 赋值,进行循环</span><br><span class="line">    frame1 = frame2</span><br><span class="line">    ret, frame2 = cap.read()</span><br><span class="line"></span><br><span class="line">    if cv2.waitKey(40) == 27:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line">cap.release()</span><br></pre></td></tr></table></figure><p>24：Detect Simple Geometric Shapes using OpenCV in Python(在Python中使用OpenCV检测简单的几何形状)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putText()不支持中文</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># Detect Simple Geometric</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line"># 读取图片</span><br><span class="line">img = cv2.imread(&apos;shape.png&apos;)</span><br><span class="line"># 图片处理</span><br><span class="line">imGrey = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">_, thrash = cv2.threshold(imGrey, 240, 255, cv2.THRESH_BINARY)</span><br><span class="line"># 轮廓检测</span><br><span class="line">contours, _ = cv2.findContours(thrash, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)</span><br><span class="line"></span><br><span class="line">for contour in contours:</span><br><span class="line">    # 获取边的个数</span><br><span class="line">    approx = cv2.approxPolyDP(contour, 0.01 * cv2.arcLength(contour, True), True)</span><br><span class="line">    # 绘制轮廓</span><br><span class="line">    cv2.drawContours(img, [approx], 0, (0, 0, 0), 5)</span><br><span class="line">    # 标记点</span><br><span class="line">    x = approx.ravel()[0]</span><br><span class="line">    # 上移10，更加清晰</span><br><span class="line">    y = approx.ravel()[1]+20</span><br><span class="line">    # 判断</span><br><span class="line">    if len(approx) == 3:</span><br><span class="line">        cv2.putText(img, &quot;sanjiaoxing&quot;, (x, y), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 0, 0))</span><br><span class="line">    elif len(approx) == 4:</span><br><span class="line">        # 获取宽和高,判断是正方形还是一般矩形</span><br><span class="line">        x, y, w, h = cv2.boundingRect(approx)</span><br><span class="line">        aspectRatio = float(w) / h</span><br><span class="line">        if 0.95 &lt;= aspectRatio &lt;= 1.05:</span><br><span class="line">            cv2.putText(img, &quot;zhengfangxing&quot;, (x, y), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 0, 0))</span><br><span class="line">        else:</span><br><span class="line">            cv2.putText(img, &quot;changfangxing&quot;, (x, y), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 0, 0))</span><br><span class="line">    elif len(approx) == 5:</span><br><span class="line">        cv2.putText(img, &quot;wubianxing&quot;, (x, y), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 0, 0))</span><br><span class="line">    elif len(approx) == 6:</span><br><span class="line">        cv2.putText(img, &quot;liubianxing&quot;, (x, y), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 0, 0))</span><br><span class="line">    else:</span><br><span class="line">        cv2.putText(img, &quot;yuan&quot;, (x, y), cv2.FONT_HERSHEY_COMPLEX, 0.5, (0, 0, 0))</span><br><span class="line"></span><br><span class="line">cv2.imshow(&apos;shape&apos;, img)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>25：Understanding image Histograms using OpenCV Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Understanding image Histograms using OpenCV Python</span><br><span class="line"># 使用OpenCV Python了解图像直方图(),横坐标表示像素点的值，纵坐标表示该像素点值的个数</span><br><span class="line">import cv2</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;lena.jpg&apos;)</span><br><span class="line"></span><br><span class="line">hist = cv2.calcHist([img], [0], None, [256], [0, 256])</span><br><span class="line">plt.plot(hist)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>26：Template matching using OpenCV in Python（在Python中使用OpenCV进行模板匹配）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># Template matching using OpenCV in Python</span><br><span class="line"># 用图片的一部分去匹配整个图片</span><br><span class="line"></span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;messi5.jpg&apos;)</span><br><span class="line">grey_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">template = cv2.imread(&apos;messi_face.jpg&apos;, 0)</span><br><span class="line"># 获取需要匹配图片的宽和高</span><br><span class="line">w, h = template.shape[::-1]</span><br><span class="line"></span><br><span class="line"># 得到所有匹配的点的数组</span><br><span class="line">res = cv2.matchTemplate(grey_img, template, cv2.TM_CCOEFF_NORMED)</span><br><span class="line">print(res)</span><br><span class="line"># 设置阈值，去噪</span><br><span class="line">threshold = 0.62</span><br><span class="line"># 得到左上和右下点的数组</span><br><span class="line">loc = np.where(res &gt;= threshold)</span><br><span class="line">print(loc)</span><br><span class="line"></span><br><span class="line">for pt in zip(*loc[::-1]):</span><br><span class="line">    cv2.rectangle(img, pt, (pt[0] + w, pt[1] + h), (0, 0, 255), 2)</span><br><span class="line">cv2.imshow(&apos;img&apos;, img)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>27：Hough Line Transform Theory（霍夫线变换理论）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用于检测形状shape，尽管边缘破损或者有一点点非闭合。</span><br><span class="line">主要理论依据：多点在xy坐标轴上是一条直线，那么在mc（斜率和截距）坐标轴上必定经过同一点！</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;sudoku.png&apos;)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">edges = cv2.Canny(gray, 50, 150, apertureSize=3)</span><br><span class="line">lines = cv2.HoughLines(edges, 1, np.pi / 180, 200)</span><br><span class="line"></span><br><span class="line">for line in lines:</span><br><span class="line">    rho, theta = line[0]</span><br><span class="line">    a = np.cos(theta)</span><br><span class="line">    b = np.sin(theta)</span><br><span class="line">    x0 = a * rho</span><br><span class="line">    y0 = b * rho</span><br><span class="line">#显示结果线没有截止位置</span><br><span class="line">    x1 = int(x0 + 1000 * (-b))</span><br><span class="line">    y1 = int(y0 + 1000 * (a))</span><br><span class="line">    x2 = int(x0 - 1000 * (-b))</span><br><span class="line">    y2 = int(y0 - 1000 * (a))</span><br><span class="line">    cv2.line(img, (x1, y1), (x2, y2), (0, 0, 255), 2)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&apos;img&apos;, img)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>28：Probabilistic Hough Transform using HoughLinesP in OpenCV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># 道路检测一定要确定范围，否则区域内的直线都被检测出来</span><br><span class="line">img = cv2.imread(&apos;test_image.jpg&apos;)</span><br><span class="line">grey = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">edges = cv2.Canny(grey, 50, 150, apertureSize=3)</span><br><span class="line">cv2.imshow(&apos;edges&apos;, edges)</span><br><span class="line"></span><br><span class="line">lines = cv2.HoughLinesP(edges, 1, np.pi / 180, 100, minLineLength=100, maxLineGap=10)</span><br><span class="line">for line in lines:</span><br><span class="line">    x1, y1, x2, y2 = line[0]</span><br><span class="line">    cv2.line(img, (x1, y1), (x2, y2), (0, 255, 0), 2)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&apos;image&apos;, img)</span><br><span class="line">k = cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>29：Circle Detection using OpenCV Hough Circle Transform</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># Circle Detection using OpenCV Hough Circle Transform</span><br><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line"># 读取图片</span><br><span class="line">img = cv2.imread(&apos;shape.png&apos;)</span><br><span class="line">output = img.copy()</span><br><span class="line"># 转换格式</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"># 处理图片</span><br><span class="line">gray = cv2.medianBlur(gray, 5)</span><br><span class="line"># 检测</span><br><span class="line">circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, 1, 20,</span><br><span class="line">                           param1=50, param2=30, minRadius=0, maxRadius=0)</span><br><span class="line"># 格式转换</span><br><span class="line">detected_circles = np.uint16(np.around(circles))</span><br><span class="line">print(detected_circles)</span><br><span class="line">for (x, y, r) in detected_circles[0, :]:</span><br><span class="line">    # 绘制圆</span><br><span class="line">    cv2.circle(output, (x, y), r, (0, 255, 0), 3)</span><br><span class="line">    # 绘制一个圆心</span><br><span class="line">    cv2.circle(output, (x, y), 2, (0, 255, 255), 3)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&apos;output&apos;, output)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>30：Face Detection using Haar Cascade Classifiers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Face Detection using Haar Cascade Classifiers</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">face_cascade = cv2.CascadeClassifier(&apos;haarcascade_frontalface_default.xml&apos;)</span><br><span class="line"># img = cv2.imread(&apos;face.jpg&apos;)</span><br><span class="line">cap = cv2.VideoCapture(0)</span><br><span class="line">while cap.isOpened():</span><br><span class="line">    _, img = cap.read()</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    # 面部检测</span><br><span class="line">    faces = face_cascade.detectMultiScale(gray, 1.1, 4)</span><br><span class="line"></span><br><span class="line">    for (x, y, w, h) in faces:</span><br><span class="line">        cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 3)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(&apos;img&apos;, img)</span><br><span class="line">    # cv2.waitKey()</span><br><span class="line">    if cv2.waitKey(1) &amp; 0xff == ord(&apos;q&apos;):</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line"># cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>31：Eye Detection Haar Feature based Cascade Classifiers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Eye Detection Haar Feature based Cascade Classifiers</span><br><span class="line"></span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">face_cascade = cv2.CascadeClassifier(&apos;haarcascade_frontalface_default.xml&apos;)</span><br><span class="line">eye_cascade = cv2.CascadeClassifier(&apos;haarcascade_eye_tree_eyeglasses.xml&apos;)</span><br><span class="line">cap = cv2.VideoCapture(0)</span><br><span class="line"></span><br><span class="line">while cap.isOpened():</span><br><span class="line">    _, img = cap.read()</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    faces = face_cascade.detectMultiScale(gray, 1.1, 4)</span><br><span class="line"></span><br><span class="line">    for (x, y, w, h) in faces:</span><br><span class="line">        cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 3)</span><br><span class="line">        roi_gray = gray[y:y + h, x:x + w]</span><br><span class="line">        roi_color = img[y:y + h, x:x + w]</span><br><span class="line">        eyes = eye_cascade.detectMultiScale(roi_gray)</span><br><span class="line">        for (ex, ey, ew, eh) in eyes:</span><br><span class="line">            cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 5)</span><br><span class="line">    cv2.imshow(&apos;img&apos;, img)</span><br><span class="line">    if cv2.waitKey(1) &amp; 0xff == ord(&apos;q&apos;):</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">cap.release()</span><br></pre></td></tr></table></figure><p>32：Detect Corners with Harris Corner Detector in OpenCV(使用OpenCV中的Harris角落检测器检测角落 )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;chessboard_img.png&apos;)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&apos;img&apos;, img)</span><br><span class="line"></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">gray = np.float32(gray)</span><br><span class="line">cv2.imshow(&apos;gray&apos;, gray)</span><br><span class="line">dst = cv2.cornerHarris(gray, 2, 3, 0.04)</span><br><span class="line"></span><br><span class="line">dse = cv2.dilate(dst, None)</span><br><span class="line">print(dst)</span><br><span class="line"></span><br><span class="line">img[dst &gt; 0.01 * dst.max()] = [0, 0, 255]</span><br><span class="line">cv2.imshow(&apos;dst&apos;, img)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">if cv2.waitKey(0) &amp; 0xff == 27:</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>33：Detect Corners with Shi Tomasi Corner Detector in OpenCV(使用OpenCV中的Shi Tomasi拐角检测器检测拐角 )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&apos;pic1.png&apos;)</span><br><span class="line"></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">corners = cv2.goodFeaturesToTrack(gray, 100, 0.01, 10)</span><br><span class="line"></span><br><span class="line">corners = np.int0(corners)</span><br><span class="line"></span><br><span class="line">for i in corners:</span><br><span class="line">    x, y = i.ravel()</span><br><span class="line">    cv2.circle(img, (x, y), 3, 255, -1)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&apos;dst&apos;, img)</span><br><span class="line"></span><br><span class="line">if cv2.waitKey() &amp; 0xff == 27:</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>34：How to Use Background Subtraction Methods in OpenCV（如何在OpenCV中使用背景减法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(&apos;vtest.avi&apos;)</span><br><span class="line"></span><br><span class="line">fgbg = cv2.createBackgroundSubtractorMOG2()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    if frame is None:</span><br><span class="line">        break</span><br><span class="line">    fgmask = fgbg.apply(frame)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(&apos;frame&apos;, frame)</span><br><span class="line">    cv2.imshow(&apos;FG MASK Frame&apos;, fgmask)</span><br><span class="line"></span><br><span class="line">    keyboard = cv2.waitKey(30)</span><br><span class="line">    if keyboard == &apos;q&apos; or keyboard == 27:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1：Introduction to OpenCV&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python</title>
    <link href="https://yanyubing.xyz/2020/02/26/Python/"/>
    <id>https://yanyubing.xyz/2020/02/26/Python/</id>
    <published>2020-02-25T19:06:37.540Z</published>
    <updated>2020-03-06T11:43:58.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>1：python是什么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">muti-paradigm programming language</span><br><span class="line">Interpreted language</span><br><span class="line">Supports dybamic data type</span><br><span class="line">Independent from platforms</span><br><span class="line">Focused on development time</span><br><span class="line">Simple and esay grammar </span><br><span class="line">High-level internal object data types</span><br><span class="line">Automatic memory management</span><br><span class="line">It is free(open source)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">多范例编程语言</span><br><span class="line">口译语言</span><br><span class="line">支持动态数据类型</span><br><span class="line">独立于平台</span><br><span class="line">专注于开发时间</span><br><span class="line">简单易懂的语法</span><br><span class="line">高级内部对象数据类型</span><br><span class="line">自动内存管理</span><br><span class="line">它是免费的（开源）</span><br></pre></td></tr></table></figure><p>2：How to Install Python 3 on Windows 10</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.python.org/  3.7</span><br></pre></td></tr></table></figure><p>3：Basic Math, Mathematical Operators and Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">print(3 + 6)</span><br><span class="line">print(1 - 6)</span><br><span class="line">print(3 * 6)</span><br><span class="line">#  / 除法不取整</span><br><span class="line">print(50 / 3)</span><br><span class="line"># // 取整</span><br><span class="line">print(50 // 3)</span><br><span class="line"></span><br><span class="line">print(50.0 / 3.0)</span><br><span class="line"></span><br><span class="line">print(50.0 / 10)</span><br><span class="line"></span><br><span class="line">print(50 / 10)</span><br><span class="line"></span><br><span class="line">print(50 * 4)</span><br><span class="line"></span><br><span class="line">print(10 % 3)</span><br><span class="line"></span><br><span class="line">print(10 ** 10)</span><br><span class="line"># 遵循四则运算的先后</span><br><span class="line">print(3 + 2 + 2 + 2 + 3 * 10)</span><br></pre></td></tr></table></figure><p>4：Variables and Types</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 不需要定义变量的类型，变量名不能以数字开头...</span><br><span class="line">myInt = 9</span><br><span class="line">print(myInt)</span><br><span class="line"></span><br><span class="line">myFloat = 20.5</span><br><span class="line">myNum = 10e10</span><br><span class="line">myString = &quot;Max&quot;</span><br><span class="line"></span><br><span class="line"># 匹配目标类型</span><br><span class="line">myString = myInt</span><br><span class="line">print(myString)</span><br><span class="line"># 类型转换</span><br><span class="line">myFloat = float(myInt)</span><br><span class="line">print(myFloat)</span><br><span class="line"></span><br><span class="line"># type()确定类型</span><br><span class="line">print(type(myFloat))</span><br><span class="line"></span><br><span class="line"># 自动类型转换</span><br><span class="line">sumA = myInt + myFloat</span><br><span class="line">print(sumA)</span><br></pre></td></tr></table></figure><p>5： print() and input() Function</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># print()方法参数</span><br><span class="line">print(&quot;hello World&quot;)</span><br><span class="line"></span><br><span class="line"># 格式化</span><br><span class="line">x = 50</span><br><span class="line">y = 100</span><br><span class="line">print(&quot;&#123;0&#125;*&#123;1&#125;=&#123;2&#125;&quot;.format(x, y, x * y))</span><br><span class="line"></span><br><span class="line"># sep间隔符</span><br><span class="line">print(&quot;hello&quot;, &quot;world&quot;, sep=&quot;----&quot;)</span><br><span class="line"></span><br><span class="line"># %匹配</span><br><span class="line">name = &quot;Max&quot;</span><br><span class="line">print(&quot;hello %s&quot; % name)</span><br><span class="line">age = 22</span><br><span class="line">print(&quot;hello %s ! are you %d years old&quot; % (name, age))</span><br><span class="line">print(&quot;Marks=%f&quot; % 92.1)</span><br><span class="line">print(&quot;Marks=%.2f&quot; % 92.1)</span><br><span class="line"></span><br><span class="line">a = input(&quot;请输入:&quot;)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>6：Python built-in functions and built-in modules </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># https://docs.python.org/3.7/library/functions.html</span><br><span class="line"></span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line">a = math.sqrt(100)</span><br><span class="line">print(a)</span><br><span class="line"># 查看包底下的函数</span><br><span class="line">print(dir(math))</span><br><span class="line"></span><br><span class="line">help(math.sqrt)</span><br><span class="line"></span><br><span class="line"># 查看内置函数</span><br><span class="line">print(dir(__builtins__))</span><br><span class="line"></span><br><span class="line">print(pow(2, 10))</span><br><span class="line"></span><br><span class="line">len(&quot;hello&quot;)</span><br><span class="line"></span><br><span class="line">help(max)</span><br></pre></td></tr></table></figure><p>7：Creating and Executing your First Python Script (Run .py file)</p><p>8：Install PyCharm ( Python IDE ) on Windows 10 + First Project</p><p>9：Install Anaconda Python, Jupyter Notebook And Spyder on Windows 10</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.anaconda.com/</span><br><span class="line">jupyter notebook  :anaconda prompt输入jupyter notebook</span><br></pre></td></tr></table></figure><p>10：Python Strings and Comments</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">单行注释#：shift + /</span><br><span class="line">多行注释三个&quot;&quot;</span><br><span class="line">String: 双引号&quot;&quot;  或者   单引号&apos;&apos;</span><br><span class="line">注意：双引号内可以包含单引号作为字符串类型，单引号内加转义符\&apos;可以表示单引号</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># String的方法</span><br><span class="line">x = &quot;Hello&quot;</span><br><span class="line">y = &apos;hello&apos;</span><br><span class="line"></span><br><span class="line"># 首字母大写</span><br><span class="line">print(x.capitalize())</span><br><span class="line">print(y.capitalize())</span><br><span class="line"></span><br><span class="line"># 全大写</span><br><span class="line">print(x.upper())</span><br><span class="line"></span><br><span class="line"># 全小写</span><br><span class="line">print(y.lower())</span><br><span class="line"></span><br><span class="line"># 固定索引</span><br><span class="line">print(x[1].lower())</span><br><span class="line">print(y[1].upper())</span><br><span class="line"></span><br><span class="line"># 固定索引区域，左闭右开</span><br><span class="line">print(x[0:3])</span><br><span class="line"></span><br><span class="line">x = &quot;   hello&quot;</span><br><span class="line"># 去空格</span><br><span class="line">print(x.strip())</span><br><span class="line"></span><br><span class="line"># 判断是否是大小写</span><br><span class="line">print(x.islower())</span><br><span class="line">print(x.isupper())</span><br><span class="line"></span><br><span class="line"># 替换</span><br><span class="line">print(x.replace(&quot;h&quot;, &quot;M&quot;))</span><br><span class="line"></span><br><span class="line"># 切割</span><br><span class="line">print(x.split(&quot;e&quot;))</span><br><span class="line"></span><br><span class="line"># String类型*数字表示复制多少次</span><br><span class="line">y = x * 10</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p>11：Boolean, Comparison Operators and Logical Operators in Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#Boolean首字母大写</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">False</span><br><span class="line"></span><br><span class="line">False</span><br><span class="line"></span><br><span class="line">true</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &apos;true&apos; is not defined</span><br><span class="line"></span><br><span class="line">falase</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &apos;falase&apos; is not defined</span><br><span class="line"></span><br><span class="line">#逻辑表达式</span><br><span class="line">等于： == </span><br><span class="line">不等于：!=  </span><br><span class="line">大于： &gt; </span><br><span class="line">小于： &lt; </span><br><span class="line">大于等于:&gt;= </span><br><span class="line">小于等于：  &lt;=</span><br><span class="line"></span><br><span class="line">#逻辑操作符</span><br><span class="line">and：都是True则结果为True</span><br><span class="line">or：有一个为True则结果为True</span><br><span class="line">not: 取反</span><br></pre></td></tr></table></figure><p>12：IF ELSE Statements</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = 100</span><br><span class="line"></span><br><span class="line"># is else表达式，子句前面自动空格;条件管子句</span><br><span class="line">if x == 100:</span><br><span class="line">    print(&quot;x = 100&quot;)</span><br><span class="line">if x &gt; 0:</span><br><span class="line">    print(&quot;x大于0&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;x != 10&quot;)</span><br></pre></td></tr></table></figure><p>13：IF…ELIF…ELSE Statements + nested IF statements</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># IF...ELIF...ELSE Statements + nested IF statements</span><br><span class="line">name = input(&quot;输入一个姓名：&quot;)</span><br><span class="line"></span><br><span class="line">if name == &quot;Max&quot;:</span><br><span class="line">    print(&quot;输入的名字是:&quot; + name)</span><br><span class="line">elif name == &quot;Max&quot;:</span><br><span class="line">    print(&quot;输入的名字是:&quot; + name)</span><br><span class="line">elif name == &quot;Loe&quot;:</span><br><span class="line">    print(&quot;输入的名字是:&quot; + name)</span><br><span class="line">elif name == &quot;Roy&quot;:</span><br><span class="line">    print(&quot;输入的名字是:&quot; + name)</span><br><span class="line">elif name == &quot;Eli&quot;:</span><br><span class="line">    print(&quot;输入的名字是:&quot; + name)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;没有找到输入的名字&quot;)</span><br><span class="line"></span><br><span class="line">x = 10</span><br><span class="line">if x &gt; 10:</span><br><span class="line">    print(&quot;x大于0&quot;)</span><br><span class="line">    if x % 2 == 0:</span><br><span class="line">        print(&quot;x是偶数&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;x是奇数&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;x小于0&quot;)</span><br></pre></td></tr></table></figure><p>14：lists</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># Lists，集合</span><br><span class="line">x = [3, 5, 4, 8, 7, 10]</span><br><span class="line"></span><br><span class="line"># lists可以包含多个不同类型的元素</span><br><span class="line">y = [&quot;mark&quot;, 1, [2, 3], x]</span><br><span class="line">z = [x, y]</span><br><span class="line"></span><br><span class="line"># 索引取值,会出现out of range</span><br><span class="line">x1 = x[0]</span><br><span class="line">print(x1)</span><br><span class="line">y1 = y[0][0]</span><br><span class="line">print(y1)</span><br><span class="line"></span><br><span class="line"># 长度</span><br><span class="line">print(len(y))</span><br><span class="line"></span><br><span class="line"># 插入值,插入索引位置后移</span><br><span class="line">y.insert(2, &quot;Tom&quot;)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"># 移除值，移除位置前移</span><br><span class="line"># 只会移除第一个一样的值</span><br><span class="line"># 没有要移除的值会报错</span><br><span class="line">y.remove(&quot;Tom&quot;)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"># 获取最后一个元素,pop只会原来集合会移除最后一个元素</span><br><span class="line">print(y.pop())</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"># 删除lists</span><br><span class="line"># del x</span><br><span class="line"></span><br><span class="line"># 情况</span><br><span class="line">y.clear()</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"># 排序,从小到大</span><br><span class="line">x.sort()</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"># 倒序</span><br><span class="line">x.reverse()</span><br><span class="line"></span><br><span class="line"># 添加</span><br><span class="line">x.append(10)</span><br><span class="line"></span><br><span class="line"># 复制</span><br><span class="line">del y</span><br><span class="line">y = x.copy()</span><br><span class="line"></span><br><span class="line"># 计数</span><br><span class="line">x.count(10)</span><br></pre></td></tr></table></figure><p>15：Tuples</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># Tuples 本身不可变，包括内在元素不可变</span><br><span class="line">x = (1, 2, 3, 5, 4)</span><br><span class="line">y = [1, 2]</span><br><span class="line"></span><br><span class="line"># 查看类型</span><br><span class="line">print(type(x))</span><br><span class="line">print(type(y))</span><br><span class="line"></span><br><span class="line"># 类型互相转换</span><br><span class="line">y = tuple(y)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">y = list(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"># 索引取值</span><br><span class="line">print(x[1])</span><br><span class="line"></span><br><span class="line">y[0] = 2</span><br><span class="line"># 元素值不可变</span><br><span class="line"># x[0] = 2，报错</span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"># 计数</span><br><span class="line">x.count(1)</span><br><span class="line"></span><br><span class="line"># 长度</span><br><span class="line">len(x)</span><br><span class="line"></span><br><span class="line"># 拼接</span><br><span class="line">z = x + x</span><br><span class="line">print(z)</span><br><span class="line"></span><br><span class="line">z = x * 3</span><br><span class="line">print(z)</span><br><span class="line"></span><br><span class="line"># 最大值</span><br><span class="line">max(x)</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">del z</span><br></pre></td></tr></table></figure><p>16:Sets</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"># Sets:无序，无索引，无重复元素的集合</span><br><span class="line">x = &#123;1, 2, 3, 3&#125;</span><br><span class="line">print(type(x))</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"># 类型转换</span><br><span class="line">y = list(x)</span><br><span class="line">print(type(y))</span><br><span class="line"></span><br><span class="line">z = set(y)</span><br><span class="line">print(type(z))</span><br><span class="line"></span><br><span class="line"># 长度</span><br><span class="line">len(x)</span><br><span class="line"></span><br><span class="line"># 添加单一元素</span><br><span class="line">x.add(2)</span><br><span class="line">print(x)</span><br><span class="line"># 添加多个元素</span><br><span class="line">x.update([4, 5, 6])</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"># 无序无索引，下面是错误写法</span><br><span class="line"># x[1]</span><br><span class="line"></span><br><span class="line"># 移除,Set中没有该元素就会报错</span><br><span class="line">x.remove(6)</span><br><span class="line"></span><br><span class="line"># 移除，Set中没有该元素不会报错</span><br><span class="line">x.discard(6)</span><br><span class="line"></span><br><span class="line"># 取出首元素</span><br><span class="line">x.pop()</span><br><span class="line"></span><br><span class="line"># 清空</span><br><span class="line">name = &#123;&quot;max&quot;, &quot;tom&quot;, &quot;den&quot;&#125;</span><br><span class="line">print(name)</span><br><span class="line"></span><br><span class="line">name.clear()</span><br><span class="line">print(name)</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">del name</span><br><span class="line"></span><br><span class="line">A = &#123;1, 2, 3, 4, 6&#125;</span><br><span class="line">B = &#123;3, 4, 5, 6, 7&#125;</span><br><span class="line"># 合并</span><br><span class="line">print(A | B)</span><br><span class="line">print(A.union(B))</span><br><span class="line"># 取交集</span><br><span class="line">print(A &amp; B)</span><br><span class="line">print(A.intersection(B))</span><br><span class="line"># 取差值，在A中，但是不在B中</span><br><span class="line">print(A - B)</span><br><span class="line">print(A.difference(B))</span><br><span class="line"># 取 在A中，但是不在B中   和  在B中不在A中  的合</span><br><span class="line">print(A ^ B)</span><br><span class="line">print(A.symmetric_difference(B))</span><br></pre></td></tr></table></figure><p>17:Dictionary</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># Dictionary，list的key,value键值对,键值对类型多种</span><br><span class="line">D = &#123;&apos;name&apos;: &apos;max&apos;, &apos;age&apos;: 14, &apos;yesr&apos;: 2004&#125;</span><br><span class="line">print(type(D))</span><br><span class="line"></span><br><span class="line"># 取对应的值</span><br><span class="line">print(D[&apos;name&apos;])</span><br><span class="line">print(D.get(&apos;name&apos;))</span><br><span class="line"></span><br><span class="line"># 添加元素,更改元素</span><br><span class="line">D[&quot;性别&quot;] = &quot;男&quot;</span><br><span class="line">print(D)</span><br><span class="line">D[&apos;性别&apos;] = &quot;女&quot;</span><br><span class="line">print(D)</span><br><span class="line"></span><br><span class="line"># 取出元素，需要Key值</span><br><span class="line">D.pop(&quot;性别&quot;)</span><br><span class="line"></span><br><span class="line"># 取出全部key,value,和k-v对</span><br><span class="line">D.keys()</span><br><span class="line">D.values()</span><br><span class="line">D.items()</span><br><span class="line"></span><br><span class="line"># 清空元素</span><br><span class="line">D.clear()</span><br><span class="line">print(D)</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">del D</span><br></pre></td></tr></table></figure><p>18:Slice and Negative index(切片和负索引)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># list</span><br><span class="line">a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"># tuple</span><br><span class="line">b = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line"># String</span><br><span class="line">c = &quot;0123456789&quot;</span><br><span class="line"></span><br><span class="line"># slice(start,stop,step)</span><br><span class="line">x = slice(0, 5, 2)</span><br><span class="line"></span><br><span class="line">print(a[x])</span><br><span class="line">&quot;&quot;&quot;&quot;</span><br><span class="line">a[start:end] :end-1</span><br><span class="line">a[start:]</span><br><span class="line">a[:end]</span><br><span class="line">a[:]</span><br><span class="line">a[start:stop:step]</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print(a[0:5])</span><br><span class="line"></span><br><span class="line">print(a[1:2])</span><br><span class="line">print(a[2])</span><br><span class="line">print(a[:3])</span><br><span class="line">print(a[:])</span><br><span class="line">print(a[1:4:2])</span><br><span class="line"></span><br><span class="line"># 索引负数表示从后往前，-1表示最后一位索引</span><br><span class="line">print(a[-1])</span><br><span class="line"></span><br><span class="line"># 步长为-1，表示倒序</span><br><span class="line">print(a[::-1])</span><br></pre></td></tr></table></figure><p>19：while loop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># while loop</span><br><span class="line">i = 0</span><br><span class="line">while i &lt; 5:</span><br><span class="line">    print(&quot;i小于5&quot;)</span><br><span class="line">    i += 1  # i=i+1</span><br><span class="line">print(&quot;while循环结束&quot;)</span><br><span class="line"></span><br><span class="line"># 类型转换,input为str类型，str + int操作的时候需要把int转换为str</span><br><span class="line">num = 1</span><br><span class="line">sumA = 0</span><br><span class="line">while num != 0:</span><br><span class="line">    num = int(input(&quot;请输入一个数字,输入0表示结束循环\n:&quot;))</span><br><span class="line">    sumA = sumA + num</span><br><span class="line">print(&quot;循环结束，合计:&quot; + str(sumA))</span><br><span class="line"># ,拼接字符串会有一个空格</span><br><span class="line">print(&quot;循环结束，合计:&quot;, str(sumA))</span><br><span class="line"></span><br><span class="line">s = &quot;循环结束，合计:&quot;, str(sumA)</span><br><span class="line"># &lt;class &apos;tuple&apos;&gt;</span><br><span class="line">print(type(s))</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"># 死循环</span><br><span class="line">while True:</span><br><span class="line">    print(&quot;循环中&quot;)</span><br><span class="line">    break</span><br></pre></td></tr></table></figure><p>20：for loop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># for loop</span><br><span class="line">A = [1, 2, 3, 4, 5]  # list</span><br><span class="line">B = (1, 2, 3, 4, 5)  # tuple</span><br><span class="line">C = &#123;1, 2, 3, 4, 5&#125;  # set</span><br><span class="line">D = &apos;1,2,3,4,5&apos;  # String</span><br><span class="line">E = &#123;&apos;name&apos;: &apos;Tom&apos;, &apos;age&apos;: 18&#125;  # dict</span><br><span class="line"></span><br><span class="line"># in 在内</span><br><span class="line">print(0 in A)</span><br><span class="line"></span><br><span class="line"># for 表示one by one，用于遍历</span><br><span class="line">for x in A:</span><br><span class="line">    print(x)</span><br><span class="line">    print(&quot;x在A里面&quot;)</span><br><span class="line"></span><br><span class="line">a = [A, A]</span><br><span class="line">for y in a:</span><br><span class="line">    print(y)</span><br><span class="line">    for z in y:</span><br><span class="line">        print(z)</span><br><span class="line"></span><br><span class="line"># 遍历Key</span><br><span class="line">for key in E:</span><br><span class="line">    print(key)</span><br><span class="line">for key in E.keys():</span><br><span class="line">    print(key)</span><br><span class="line"># 遍历value</span><br><span class="line">for value in E.values():</span><br><span class="line">    print(value)</span><br><span class="line"># 遍历键值对</span><br><span class="line">for keyValue in E.items():</span><br><span class="line">    print(keyValue)</span><br><span class="line">for key, value in E.items():</span><br><span class="line">    print(key, &quot;   &quot;, value)</span><br><span class="line"></span><br><span class="line"># range(num) ：0到该参数num-1</span><br><span class="line"># range(start,stop)</span><br><span class="line"># range(start,stop,step)</span><br><span class="line">for x in range(6):</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><p>21：break, continue statement</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># break, continue statement</span><br><span class="line">a = [0, 1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line"># for loop</span><br><span class="line">for x in a:</span><br><span class="line">    if x == 3:</span><br><span class="line">        break</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">print(&quot;---------------------&quot;)</span><br><span class="line"></span><br><span class="line"># while loop</span><br><span class="line">x = 0</span><br><span class="line">while x &lt; 5:</span><br><span class="line">    x += 1</span><br><span class="line">    if x == 1:</span><br><span class="line">        continue  # 跳过当前循环，进行下一次</span><br><span class="line">    if x == 3:</span><br><span class="line">        break</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><p>22：Functions</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Functions，分为自建函数和系统自带函数</span><br><span class="line">def testMax(arg1, arg2):</span><br><span class="line">    if type(arg1) != type(arg2) != int:</span><br><span class="line">        print(&quot;类型不匹配&quot;)</span><br><span class="line">        return</span><br><span class="line">    if arg1 &gt; arg2:</span><br><span class="line">        print(&quot;较大值为&quot;, arg1)</span><br><span class="line">        return arg1</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;较大值为&quot;, arg2)</span><br><span class="line">        return arg2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testMax(1234, 123)</span><br><span class="line">testMax(1, &quot;12&quot;)</span><br></pre></td></tr></table></figure><p>23：Default Arguments, <em>args and *</em>kwargs (Variable-length Arguments)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># Arguments</span><br><span class="line">def student(name, age):</span><br><span class="line">    print(&quot;name:&quot;, name)</span><br><span class="line">    print(&quot;age&quot;, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student(&quot;Tom&quot;, 18)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 默认参数</span><br><span class="line">def stu(name=&quot;unknown&quot;, age=0):</span><br><span class="line">    print(&quot;name:&quot;, name)</span><br><span class="line">    print(&quot;age&quot;, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 多个参数</span><br><span class="line">#   *  可以提供多个参数，和tuple类似</span><br><span class="line">#  **  提供键值对类型参数，和dict类似</span><br><span class="line">def stu2(name, age, *location, **marks):</span><br><span class="line">    print(&quot;name:&quot;, name)</span><br><span class="line">    print(&quot;age&quot;, age)</span><br><span class="line">    print(&quot;location&quot;, location)</span><br><span class="line">    print(&quot;marks&quot;, marks)</span><br><span class="line">    for x in marks:</span><br><span class="line">        print(x)</span><br><span class="line"></span><br><span class="line">    print(type(location))</span><br><span class="line">    print(type(marks))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu2(&quot;tom&quot;, 22, &quot;wuhan&quot;, &quot;jiangxiaqu&quot;, english=70, math=80)</span><br></pre></td></tr></table></figure><p>24：Introduction to Object-Oriented Programming （OOP面向对象）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Classes and Objects in Python (OOP)</span><br><span class="line">class Car:</span><br><span class="line">    pass  # 相当于占位符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Ford = Car()</span><br><span class="line">Honda = Car()</span><br><span class="line">Audi = Car()</span><br><span class="line"></span><br><span class="line">Ford.speed = 200</span><br><span class="line">Honda.speed = 220</span><br><span class="line">Audi.speed = 250</span><br><span class="line"></span><br><span class="line">Ford.color = &quot;red&quot;</span><br><span class="line">Honda.color = &quot;blue&quot;</span><br><span class="line">Audi.color = &quot;Black&quot;</span><br><span class="line"></span><br><span class="line">print(type(Ford))</span><br><span class="line">print(Ford.speed)</span><br></pre></td></tr></table></figure><p>25：Python <strong>init</strong> and self in class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    # 创建Car对象就会被执行,init方法中含有其他参数，则在创建对象时候必须提供</span><br><span class="line">    # self可以换成其他词汇，但是约定俗成</span><br><span class="line">    def __init__(self, speed, color):</span><br><span class="line">        print(&quot;init方法执行了！&quot;)</span><br><span class="line">        # 初始化speed属性</span><br><span class="line">        self.speed = speed</span><br><span class="line">        print(speed)</span><br><span class="line">        print(color)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ford = Car(100, &quot;red&quot;)</span><br><span class="line"></span><br><span class="line">print(ford.speed)</span><br></pre></td></tr></table></figure><p>26：Is it possible to define multiple constructors in Python?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Is it possible to define multiple constructors in Python?</span><br><span class="line"># 不允许多个初始化方法，如果有多个，则依照后面的一个初始化方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Hello:</span><br><span class="line">    def __init__(self, name=&quot;max&quot;, *args, **kwargs):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = 10  # 允许</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hello = Hello()</span><br><span class="line">hello = Hello(&quot;name&quot;)</span><br></pre></td></tr></table></figure><p>27：Encapsulation（封装形式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Car:</span><br><span class="line">    def __init__(self, speed, color):</span><br><span class="line">        self.__speed = speed</span><br><span class="line">        self.__color = color</span><br><span class="line"></span><br><span class="line">    # 封装</span><br><span class="line">    def set_speed(self, value):</span><br><span class="line">        self.__speed = value</span><br><span class="line"></span><br><span class="line">    def get_speed(self):</span><br><span class="line">        return self.__speed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ford = Car(200, &quot;red&quot;)</span><br><span class="line">ford.set_speed(300)</span><br><span class="line"># 加入双下划线之后就无法直接对该属性赋值，是能通过set方法赋值</span><br><span class="line"># ford.__speed = 100</span><br><span class="line">print(ford.get_speed())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 双下划线开头相当于private的，无法在外面访问</span><br><span class="line"># 单下划线可以表示protected</span><br><span class="line">class Hello:</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.a = 10</span><br><span class="line">        self._b = 20</span><br><span class="line">        self.__c = 30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hello = Hello(&quot;name&quot;)</span><br><span class="line">print(hello.a)</span><br><span class="line">print(hello._b)</span><br><span class="line"># print(hello.__c)</span><br></pre></td></tr></table></figure><p>28：Private methods in Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Private methods in Python</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Hello:</span><br><span class="line">    def __init__(self, name): pass</span><br><span class="line"></span><br><span class="line">    def public_method(self):</span><br><span class="line">        print(&quot;公共方法运行了&quot;)</span><br><span class="line">        # 可以通过self调用私有方法</span><br><span class="line">        self.__private_method()</span><br><span class="line"></span><br><span class="line">    # 双下划线方法外面无法访问</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def __private_method():</span><br><span class="line">        print(&quot;私有方法运行了&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hello = Hello(&quot;Tom&quot;)</span><br><span class="line"></span><br><span class="line">hello.public_method()</span><br></pre></td></tr></table></figure><p>29：Inheritance（继承）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># Inheritance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Polygon:</span><br><span class="line">    __width = None</span><br><span class="line">    __height = None</span><br><span class="line"></span><br><span class="line">    def set_values(self, width, height):</span><br><span class="line">        self.__width = width</span><br><span class="line">        self.__height = height</span><br><span class="line"></span><br><span class="line">    def get_width(self):</span><br><span class="line">        return self.__width</span><br><span class="line"></span><br><span class="line">    def get_height(self):</span><br><span class="line">        return self.__height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 父类在()内,子类无法继承父类的私有属性,需要在父类添加get,set方法</span><br><span class="line">class Rectangle(Polygon):</span><br><span class="line">    def area(self):</span><br><span class="line">        return self.get_width() * self.get_height()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Triangle(Polygon):</span><br><span class="line">    def area(self):</span><br><span class="line">        return self.get_width() * self.get_height() / 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rect = Rectangle()</span><br><span class="line">tri = Triangle()</span><br><span class="line"></span><br><span class="line">rect.set_values(40, 50)</span><br><span class="line"></span><br><span class="line">print(rect.area())</span><br></pre></td></tr></table></figure><p>30：Abstract Classes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from abc import ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Abstract Classes,python没有抽象类，但是可以通过上面方式创建,Shape就属于抽象类</span><br><span class="line"></span><br><span class="line">class Shape(ABC):</span><br><span class="line">    @abstractmethod  # 子类必须继承的方法</span><br><span class="line">    def area(self):</span><br><span class="line">        print(&quot;父类的area方法&quot;)</span><br><span class="line"></span><br><span class="line">    @abstractmethod</span><br><span class="line">    def perimeter(self):</span><br><span class="line">        print(&quot;父类的perimeter方法&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Square(Shape):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;初始化方法执行了&quot;)</span><br><span class="line"></span><br><span class="line">    def area(self):</span><br><span class="line">        print(&quot;子类重写了area方法&quot;)</span><br><span class="line"></span><br><span class="line">    def perimeter(self):</span><br><span class="line">        print(&quot;子类重写了perimeter方法&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">square = Square()</span><br><span class="line">square.area()</span><br></pre></td></tr></table></figure><p>31：Exception handling + Python Try Except</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Exception handling + Python Try Except</span><br><span class="line"></span><br><span class="line">import builtins  # 可以查看Error内建函数</span><br><span class="line"></span><br><span class="line"># help(builtins)</span><br><span class="line"></span><br><span class="line">result = None</span><br><span class="line">a = float(input(&quot;输入数字a:&quot;))</span><br><span class="line">b = float(input(&quot;输入数字b:&quot;))</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    # 发生异常10/0之后在此位置就会终止程序,捕捉异常之后会继续执行</span><br><span class="line">    result = a / b</span><br><span class="line">except ZeroDivisionError:  # except后面没有具体的Error会提示too broad exception clause</span><br><span class="line">    print(&quot;ZeroDivisionError&quot;)</span><br><span class="line"># except Exception as e:</span><br><span class="line">#     print(e)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>32：Try Except Else Finally (Python Exception handling)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># Exception handling + Python Try Except</span><br><span class="line"></span><br><span class="line">import builtins  # 可以查看Error内建函数</span><br><span class="line"></span><br><span class="line"># help(builtins)</span><br><span class="line"></span><br><span class="line">result = None</span><br><span class="line">a = float(input(&quot;输入数字a:&quot;))</span><br><span class="line">b = float(input(&quot;输入数字b:&quot;))</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    # 发生异常10/0之后在此位置就会终止程序,捕捉异常之后会继续执行</span><br><span class="line">    result = a / b</span><br><span class="line">except ZeroDivisionError:  # except后面没有具体的Error会提示too broad exception clause</span><br><span class="line">    print(&quot;ZeroDivisionError&quot;)</span><br><span class="line"></span><br><span class="line"># 无异常的时候会执行else和finally</span><br><span class="line"># 有异常的时候不会执行else，会执行finally</span><br><span class="line">else:</span><br><span class="line">    print(&quot;__else__&quot;)</span><br><span class="line">    # 不管有无异常都必须执行的语句</span><br><span class="line">finally:</span><br><span class="line">    print(&quot;__finally__&quot;)</span><br><span class="line"></span><br><span class="line"># except Exception as e:</span><br><span class="line">#     print(e)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>33:Raising Exceptions In Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Raising Exceptions In Python</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CoffeeCup:</span><br><span class="line">    def __init__(self, temperature):</span><br><span class="line">        self.__temperature = temperature</span><br><span class="line"></span><br><span class="line">    def drink_coffee(self):</span><br><span class="line">        if self.__temperature &gt; 85:</span><br><span class="line">            # print(&quot;热&quot;)</span><br><span class="line">            raise Exception(&quot;热&quot;)</span><br><span class="line">        elif self.__temperature &lt; 65:</span><br><span class="line">            # print(&quot;冷&quot;)</span><br><span class="line">            raise Exception(&quot;冷&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;ok&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cup = CoffeeCup(175)</span><br><span class="line">cup.drink_coffee()</span><br></pre></td></tr></table></figure><p>34:Raising Custom Exceptions (Writing and Using Custom Exceptions)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># Raising Exceptions In Python</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;自定义异常类&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CoffeeTooHotException(Exception):</span><br><span class="line">    def __init__(self, msg):</span><br><span class="line">        super().__init__(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CoffeeCup:</span><br><span class="line">    def __init__(self, temperature):</span><br><span class="line">        self.__temperature = temperature</span><br><span class="line"></span><br><span class="line">    def drink_coffee(self):</span><br><span class="line">        if self.__temperature &gt; 85:</span><br><span class="line">            # print(&quot;热&quot;)</span><br><span class="line">            raise CoffeeTooHotException(&quot;热&quot;)</span><br><span class="line">        elif self.__temperature &lt; 65:</span><br><span class="line">            # print(&quot;冷&quot;)</span><br><span class="line">            raise Exception(&quot;冷&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;ok&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cup = CoffeeCup(175)</span><br><span class="line">cup.drink_coffee()</span><br></pre></td></tr></table></figure><p>35:Idea behind : if <strong>name</strong> == “<strong>main</strong>“</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">math.py</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def add(a, b):</span><br><span class="line">    return a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 可以保证在其他项目导包的时候不会执行该条件的子句</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    print(add(10, 16))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line"></span><br><span class="line">print(math.add(7, 6))</span><br></pre></td></tr></table></figure><p>36:Create a Text File and Write in It Using Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># file,打开文件写入</span><br><span class="line">fh = open(&quot;demo.txt&quot;, &quot;w&quot;)</span><br><span class="line"></span><br><span class="line">for i in range(10):</span><br><span class="line">    fh.write(str(i) + &quot;\n&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 关闭系统占用</span><br><span class="line">fh.close()</span><br><span class="line"></span><br><span class="line"># 追加文件，使用finally关资源</span><br><span class="line">fh = open(&quot;demo.txt&quot;, &quot;a&quot;)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        fh.write(str(i) + &quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    # 关闭系统占用</span><br><span class="line">    fh.close()</span><br><span class="line"></span><br><span class="line"># 一般使用以下代码来打开文件，根据简洁</span><br><span class="line">with open(&quot;demo.txt&quot;, &quot;a&quot;) as fh:</span><br><span class="line">    for i in range(10):</span><br><span class="line">        fh.write(str(i) + &quot;\n&quot;)</span><br></pre></td></tr></table></figure><p>37： Reading Files in Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># coding=gbk</span><br><span class="line"></span><br><span class="line"># 读取文件注意编码问题</span><br><span class="line">fh = open(&quot;demo.txt&quot;)</span><br><span class="line"></span><br><span class="line"># read()参数是读取多少个</span><br><span class="line">print(fh.read())</span><br><span class="line"></span><br><span class="line"># 读取一行</span><br><span class="line">print(fh.readline())</span><br><span class="line"></span><br><span class="line"># 读取所有行,返回值list，固定索引可以读取固定行</span><br><span class="line">print(fh.readlines())</span><br><span class="line"></span><br><span class="line"># 循环读取每一行</span><br><span class="line">for line in fh:</span><br><span class="line">    print(line)</span><br><span class="line">    # 获取每一行的长度</span><br><span class="line">    print(len(line))</span><br><span class="line">    # 切割</span><br><span class="line">    print(line.split(&quot;&quot;))</span><br><span class="line"></span><br><span class="line">fh.close()</span><br></pre></td></tr></table></figure><p>38:Working With JSON Data in Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line"># 创建json格式数据</span><br><span class="line">a = &#123;</span><br><span class="line">    &quot;name&quot;: &quot;max&quot;,</span><br><span class="line">    &quot;age&quot;: 22,</span><br><span class="line">    &quot;marks&quot;: [90, 50, 80, 40],</span><br><span class="line">    &quot;pass&quot;: True,</span><br><span class="line">    &quot;object&quot;: &#123;</span><br><span class="line">        &quot;color&quot;: (&quot;red&quot;, &quot;blue&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># dumps()参数可以是大多数数据类型,indent给值，表示格式化前面空格个数</span><br><span class="line"># separators()替换连接符,sort_keys是否排序</span><br><span class="line">print(json.dumps(a, indent=5, separators=(&quot;=&quot;, &quot;==&quot;), sort_keys=True))</span><br><span class="line"></span><br><span class="line"># 创建json文件，写入,with打开文件，不需要close文件</span><br><span class="line">with open(&quot;demo.json&quot;, &quot;w&quot;)as fh:</span><br><span class="line">    fh.write(json.dumps(a, indent=2))</span><br><span class="line"></span><br><span class="line"># 解析json数据</span><br><span class="line">with open(&quot;demo.json&quot;, &quot;r&quot;) as fh:</span><br><span class="line">    # json读取出来是str类型</span><br><span class="line">    json_str = fh.read()</span><br><span class="line">    print(json_str)</span><br><span class="line"></span><br><span class="line">    # loads返回的是dict类型</span><br><span class="line">    json_value = json.loads(json_str)</span><br><span class="line">    print(type(json_value))</span><br><span class="line"></span><br><span class="line">    # 可以根据key值获取对应的value</span><br><span class="line">    print(json_value[&quot;name&quot;])</span><br></pre></td></tr></table></figure><p>39:Iterators</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># Iterators</span><br><span class="line">a = [1, 2, 3, 5, 6, 7, 6]</span><br><span class="line"></span><br><span class="line"># 创建迭代器对象</span><br><span class="line">it = iter(a)</span><br><span class="line"></span><br><span class="line">print(next(it))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ListIterator:</span><br><span class="line">    def __init__(self, list):</span><br><span class="line">        self.__list = list</span><br><span class="line">        self.__index = -1</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        self.__index += 1</span><br><span class="line">        if self.__index == len(self.__list):</span><br><span class="line">            raise StopIteration</span><br><span class="line">        return self.__list[self.__index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [1, 2, 3, 4, 2, 3, 4, 5]</span><br><span class="line">myList = ListIterator(a)</span><br><span class="line">it = iter(myList)</span><br><span class="line"></span><br><span class="line"># 迭代器遍历</span><br><span class="line">for i in it:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>40：Generators</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Generators返回迭代器对象</span><br><span class="line"># 一个带有 yield 的函数就是一个 generator，它和普通函数不同，生成一个 generator 看起来像函数调用，</span><br><span class="line"># 但不会执行任何函数代码，直到对其调用 next()（在 for 循环中会自动调用 next()）才开始执行。</span><br><span class="line"># 虽然执行流程仍按函数的流程执行，但每执行到一个 yield 语句就会中断，并返回一个迭代值，下次执行时从 yield 的下一个语句继续执行。</span><br><span class="line"># 看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。</span><br><span class="line"># yield 的好处是显而易见的，把一个函数改写为一个 generator 就获得了迭代能力，比起用类的实例保存状态来计算下一个 next() 的值，不仅代码简洁，而且执行流程异常清晰。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def list_iterator(list1):</span><br><span class="line">    for i in list1:</span><br><span class="line">        yield i  # 创建了生成器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [1, 2, 3, 4, 3, 2, 1]</span><br><span class="line"></span><br><span class="line">myList = list_iterator(a)</span><br><span class="line"></span><br><span class="line">print(next(myList))</span><br><span class="line"></span><br><span class="line"># 对迭代器遍历</span><br><span class="line">for x in myList:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><p>41：Command Line Arguments in Python with</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import argparse</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # 初始化解析器</span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        # 参数的描述</span><br><span class="line">        description=&quot;my math script&quot;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # 添加参数,位置参数和可选参数,通过type可以固定参数类型</span><br><span class="line">    # 命令行中可以通过-n=1，来给num1参数赋值，而不是空格</span><br><span class="line">    parser.add_argument(&apos;-n&apos;, &apos;num1&apos;, help=&apos;number 1&apos;, type=float)</span><br><span class="line">    # --表示可选的参数，可选提供的时候可以换位子</span><br><span class="line">    parser.add_argument(&apos;--num2&apos;, help=&apos;number 2&apos;, type=float)</span><br><span class="line">    # default表示提供了默认的参数</span><br><span class="line">    parser.add_argument(&apos;operation&apos;, help=&apos;provide operator&apos;, default=&quot;+&quot;)</span><br><span class="line"></span><br><span class="line">    # 解析参数，参数储存在了args中</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    # &lt;class &apos;argparse.Namespace&apos;&gt;</span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line">    result = None</span><br><span class="line">    # args.直接可以获取参数的值</span><br><span class="line">    if args.operation == &quot;+&quot;:</span><br><span class="line">        result = args.num1 + args.num2</span><br><span class="line"></span><br><span class="line">    if args.operation == &quot;-&quot;:</span><br><span class="line">        result = args.num1 - args.num2</span><br><span class="line"></span><br><span class="line">    if args.operation == &quot;*&quot;:</span><br><span class="line">        result = args.num1 * args.num2</span><br><span class="line"></span><br><span class="line">    if args.operation == &quot;/&quot;:</span><br><span class="line">        result = args.num1 / args.num2</span><br><span class="line"></span><br><span class="line">    print(&quot;result:&quot;, result)</span><br></pre></td></tr></table></figure><p>42：Lambda, filter, reduce and map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># Lambda</span><br><span class="line"># 导包</span><br><span class="line">from functools import reduce</span><br><span class="line"></span><br><span class="line"># 普通函数</span><br><span class="line"># def double(x):</span><br><span class="line">#     return x * 2</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># def add(x, y):</span><br><span class="line">#     return x + y</span><br><span class="line">#</span><br><span class="line"># 普通函数可以这样定义，和lamdba函数类似，lamdba并没有简化多少，为什么要lamdba函数</span><br><span class="line"># def product(x, y, z):  return x * y * z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># lambda函数，前面是参数，冒号后面是返回值</span><br><span class="line">double = lambda x: x * 2</span><br><span class="line">add = lambda x, y: x * y</span><br><span class="line">product = lambda x, y, z: x * y * z</span><br><span class="line"></span><br><span class="line"># 直接使用变量函数</span><br><span class="line">print(double(2))</span><br><span class="line"></span><br><span class="line"># filter, reduce and map</span><br><span class="line">myList = [2, 35, 8, 10, 9, 3]</span><br><span class="line">myList2 = [1, 3, 81, 11, 92, 1]</span><br><span class="line"></span><br><span class="line"># 使函数作用于每一个myList的元素</span><br><span class="line">a = map(lambda x: x * 2, myList)</span><br><span class="line"></span><br><span class="line"># 需要使用list强转</span><br><span class="line">print(list(a))</span><br><span class="line"></span><br><span class="line"># 每个myList的元素赋值给x，同时每个myList2的函数赋值给y</span><br><span class="line">b = map(lambda x, y: x + y, myList, myList2)</span><br><span class="line"></span><br><span class="line">print(list(b))</span><br><span class="line"></span><br><span class="line"># filter的第一个参数为Boolean值，True才返回</span><br><span class="line">c = filter(lambda x: x % 2 == 0, myList)</span><br><span class="line"></span><br><span class="line">print(list(c))</span><br><span class="line"></span><br><span class="line">d = filter(lambda x: x &gt; 5, myList2)</span><br><span class="line"></span><br><span class="line">print(list(d))</span><br><span class="line"></span><br><span class="line"># reduce,mylist中的前一个元素为x,后一个元素为y，计算的结果为x，后一个没使用到的为y，依次</span><br><span class="line">e = reduce(lambda x, y: x + y, myList)</span><br><span class="line"></span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><p>43：Closures + nested functions（闭包+嵌套函数 ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># Closures + nested functions,闭包+嵌套函数</span><br><span class="line"></span><br><span class="line"># 闭包：</span><br><span class="line"></span><br><span class="line"># 在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，</span><br><span class="line"># 并且外函数的返回值是内函数的引用。这样就构成了一个闭包。</span><br><span class="line"># 闭包可以保存变量值</span><br><span class="line"></span><br><span class="line">def pop(list):</span><br><span class="line">    def get_last_item(my_list):</span><br><span class="line">        return my_list[len(list) - 1]</span><br><span class="line"></span><br><span class="line">    list.remove(get_last_item(list))</span><br><span class="line">    return list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [1, 2, 3, 4, 6]</span><br><span class="line"></span><br><span class="line">print(pop(a))</span><br><span class="line">print(pop(a))</span><br><span class="line">print(pop(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def nth_power(exponent):</span><br><span class="line">    def pow_of(base):</span><br><span class="line">        return pow(base, exponent)</span><br><span class="line"></span><br><span class="line">    return pow_of</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># nth_power(2) 返回的是pow(2,exponent)，闭包可以记录值</span><br><span class="line">square = nth_power(2)</span><br><span class="line"># 下面提供的2就是exponent参数</span><br><span class="line">print(square(2))</span><br><span class="line">print(square(3))</span><br></pre></td></tr></table></figure><p>44：Decorators</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># Decorators</span><br><span class="line"># Python中的装饰器</span><br><span class="line"># 在Python中，函数是第一类对象，这意味着:</span><br><span class="line"># 功能是对象；它们可以被引用，传递给变量并从其他函数返回。</span><br><span class="line"># 函数可以在另一个函数中定义，也可以作为参数传递给另一个函数。</span><br><span class="line"># 装饰器是Python中非常强大且有用的工具，因为它允许程序员修改函数或类的行为。</span><br><span class="line"># 装饰器允许我们包装另一个函数以扩展包装函数的行为，而无需对其进行永久性修改。</span><br><span class="line">#</span><br><span class="line"># 在Decorators中，将函数作为另一个函数的参数，然后在包装函数内部调用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def decorator_x(func):</span><br><span class="line">    # 函数进来之后返回该函数，但是可以在不改变该函数的前提下进行操作该函数</span><br><span class="line">    def wrapper_func():</span><br><span class="line">        print(&quot;x&quot; * 20)</span><br><span class="line">        func()</span><br><span class="line">        print(&quot;x&quot; * 20)</span><br><span class="line"></span><br><span class="line">    return wrapper_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def decorator_y(func):</span><br><span class="line">    # 函数进来之后返回该函数，但是可以在不改变该函数的前提下进行操作该函数</span><br><span class="line">    def wrapper_func():</span><br><span class="line">        print(&quot;y&quot; * 20)</span><br><span class="line">        func()</span><br><span class="line">        print(&quot;y&quot; * 20)</span><br><span class="line"></span><br><span class="line">    return wrapper_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># @注释等价于decorator_fun(say_hello),</span><br><span class="line"># 两个装饰器等价于hello = decorator_x(decorator_y(say_hello)),靠近的在外层</span><br><span class="line">@decorator_y</span><br><span class="line">@decorator_x</span><br><span class="line">def say_hello():</span><br><span class="line">    print(&quot;hello,world&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hello = decorator_x(decorator_y(say_hello))</span><br><span class="line">hello()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># hello = decorator_fun(say_hello)</span><br><span class="line"># hello()</span><br><span class="line"># say_hello()</span><br><span class="line"></span><br><span class="line"># 装饰器使得函数更加饱满</span><br><span class="line">def decorator_divide(func):</span><br><span class="line">    def wrapper_func(a, b):</span><br><span class="line">        print(&apos;divide&apos;, a, &apos;and&apos;, b)</span><br><span class="line">        if b == 0:</span><br><span class="line">            print(&apos;division with zero is not allowed&apos;)</span><br><span class="line">            return</span><br><span class="line">        return a / b</span><br><span class="line"></span><br><span class="line">    return wrapper_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@decorator_divide</span><br><span class="line">def divide(x, y):</span><br><span class="line">    return x / y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(divide(16, 2))</span><br></pre></td></tr></table></figure><p>45：Operator Overloading</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># Operator Overloading</span><br><span class="line"># 操作符对应不同的数据类型，效果不一样</span><br><span class="line"></span><br><span class="line">print(2 + 2)</span><br><span class="line">print(2 * 3)</span><br><span class="line">print(&apos;2&apos; + &apos;2&apos;)</span><br><span class="line">print(&apos;2&apos; * 3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Number:</span><br><span class="line">    def __init__(self, num):</span><br><span class="line">        self.num = num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1 = Number(1)</span><br><span class="line">n2 = Number(2)</span><br><span class="line"># 没有定义n1,n2的数据类型，无法使用+操作符</span><br><span class="line"># print(n1 + n2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Circle:</span><br><span class="line">    def __init__(self, radius):</span><br><span class="line">        self.__radius = radius</span><br><span class="line"></span><br><span class="line">    def setRadius(self, radius):</span><br><span class="line">        self.__radius = radius</span><br><span class="line"></span><br><span class="line">    def getRadius(self):</span><br><span class="line">        return self.__radius</span><br><span class="line"></span><br><span class="line">    def area(self):</span><br><span class="line">        return math.pi * self.__radius ** 2</span><br><span class="line"></span><br><span class="line">    # https://www.codespeedy.com/operator-overloading-in-python/</span><br><span class="line">    # 操作符对应的方法在上网站，操作符的重载</span><br><span class="line">    def __add__(self, circle_object):</span><br><span class="line">        # 返回半径之和的Circle()方法，添加了__add__就是对应的+操作符的运算</span><br><span class="line">        return Circle(self.__radius + circle_object.__radius)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = Circle(2)</span><br><span class="line">c2 = Circle(3)</span><br><span class="line"></span><br><span class="line">c = c1 + c2</span><br><span class="line">print(c1.getRadius())</span><br><span class="line">print(c2.getRadius())</span><br><span class="line">print(c.getRadius())</span><br></pre></td></tr></table></figure><p>46：An Introduction to Python Debugger (pdb)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Terminal（命令行输入）</span><br><span class="line">：python -m pdb test.py</span><br><span class="line">：help(获取帮助)</span><br><span class="line">：n(next)移动</span><br><span class="line">：c(continue)</span><br><span class="line">whitis  x：输出x的数据类型</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 命令行debug示例代码</span><br><span class="line"></span><br><span class="line">import pdb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(x, y):</span><br><span class="line">    sum = x + y</span><br><span class="line">    return sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    x = input(&quot;num1:&quot;)</span><br><span class="line">    y = input(&quot;num2:&quot;)</span><br><span class="line">    # 断点，在命令行运行在这里中断</span><br><span class="line">    pdb.set_trace()</span><br><span class="line">    z = x + y</span><br><span class="line">    print(z)</span><br></pre></td></tr></table></figure><p>47：How to use PyCharm to debug Python code</p><p>48：How to use Pip and PyPI for managing Python packages</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">官网：pypi.org(python package index)</span><br><span class="line">①打开prompt,命令行输入pip install packageName</span><br><span class="line">②pip show packageName：查看是否安装好</span><br><span class="line">③pip list 查看已经安装列表</span><br><span class="line">④pip uninstall 卸载</span><br></pre></td></tr></table></figure><p>49： How to use Pip and PyPI for managing Python packages</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file - settings - project Intepreter - + -</span><br></pre></td></tr></table></figure><p>50：Global, Local and Nonlocal variables in Python（Python中的全局，局部和非局部变量 ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># variables变量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    global x</span><br><span class="line">    # 此时的x没有提前定义,需要把x改为全局变量</span><br><span class="line">    # 全局变量随着执行顺序可以改变值</span><br><span class="line">    print(&apos;1-------&apos;, x)</span><br><span class="line">    x = &apos;local&apos;</span><br><span class="line">    print(&apos;2-------&apos;, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = &apos;global&apos;</span><br><span class="line">func()</span><br><span class="line">print(&apos;3--------&apos;, x)</span><br></pre></td></tr></table></figure><p>51：OpenCV</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中文官方文档：https://docs.python.org/zh-cn/3/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1：安装anaconda</span><br><span class="line">2：python --version 查看是否安装成功（windows系统）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def canny(image):</span><br><span class="line">    # ①Convert image to grayscale,图片转换为灰度</span><br><span class="line">    gray = cv2.cvtColor(lane_image, cv2.COLOR_RGB2GRAY)</span><br><span class="line"></span><br><span class="line">    # ②reduce Noise,return blur(去除噪声之后的结果)</span><br><span class="line">    blur = cv2.GaussianBlur(gray, (5, 5), 0)</span><br><span class="line"></span><br><span class="line">    # Canny用于边缘检测</span><br><span class="line">    canny = cv2.Canny(blur, 50, 150)</span><br><span class="line"></span><br><span class="line">    return canny</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def region_of_interest(image):</span><br><span class="line">    height = image.shape[0]</span><br><span class="line">    polygons = np.array([</span><br><span class="line">        [(200, height), (1100, height), (550, 250)</span><br><span class="line">         ]])</span><br><span class="line">    mask = np.zeros_like(image)</span><br><span class="line">    cv2.fillPoly(mask, polygons, 255)</span><br><span class="line"></span><br><span class="line">    # 二进制运算，圈起来内的可以保持原样，外部运算之后全变黑</span><br><span class="line">    masked_image = cv2.bitwise_and(image, mask)</span><br><span class="line"></span><br><span class="line">    return masked_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def display_lines(image, lines):</span><br><span class="line">    # 空白图片</span><br><span class="line">    line_image = np.zeros_like(image)</span><br><span class="line">    if lines is not None:</span><br><span class="line">        for line in lines:</span><br><span class="line">            x1, y1, x2, y2 = line.reshape(4)</span><br><span class="line">            # 划车道线</span><br><span class="line">            cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 10)</span><br><span class="line"></span><br><span class="line">    return line_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image = cv2.imread(&apos;test_image.jpg&apos;)</span><br><span class="line"></span><br><span class="line">lane_image = np.copy(image)</span><br><span class="line"></span><br><span class="line">canny = canny(lane_image)</span><br><span class="line"></span><br><span class="line">cropped_image = region_of_interest(canny)</span><br><span class="line"></span><br><span class="line"># 从白线中确定车道</span><br><span class="line">lines = cv2.HoughLinesP(cropped_image, 2, np.pi / 180, 100, np.array([]), minLineLength=40, maxLineGap=5)</span><br><span class="line"></span><br><span class="line">line_image = display_lines(lane_image, lines)</span><br><span class="line"># 车道线和原图片合成</span><br><span class="line">combo_image = cv2.addWeighted(lane_image, 0.8, line_image, 1, 1)</span><br><span class="line"># plt.imshow(canny)</span><br><span class="line"></span><br><span class="line"># plt.show()</span><br><span class="line"></span><br><span class="line">cv2.imshow(&apos;result&apos;, combo_image)</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure><p>52：Getting started with pytest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装单元测试：pip install pytest</span><br><span class="line">测试代码：pytest +test.py或者直接py.test</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def add(x, y=2):</span><br><span class="line">    return x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def product(x, y=2):</span><br><span class="line">    return x * y</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#使用py.test的时候，文件名也要test开头</span><br><span class="line">import math_func</span><br><span class="line"></span><br><span class="line">#前缀需要test开头</span><br><span class="line">def test_add():</span><br><span class="line">    assert math_func.add(7, 3) == 10</span><br><span class="line">    assert math_func.add(7) == 9</span><br><span class="line">    assert math_func.add(5) == 7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_product():</span><br><span class="line">    assert math_func.product(5, 5) == 25</span><br><span class="line">    assert math_func.product(5) == 10</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h1&gt;&lt;p&gt;1：python是什么&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>android开发</title>
    <link href="https://yanyubing.xyz/2020/01/19/android%E5%BC%80%E5%8F%91/"/>
    <id>https://yanyubing.xyz/2020/01/19/android%E5%BC%80%E5%8F%91/</id>
    <published>2020-01-19T02:33:24.991Z</published>
    <updated>2020-02-25T14:28:23.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="android开发"><a href="#android开发" class="headerlink" title="android开发"></a>android开发</h1><p>1：安装和配置jdk（环境变量等）</p><p>2：安装android studio，配置</p><p>3：first  Android App(Hello World)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">①注意选择API level</span><br><span class="line">②activity是主页面</span><br><span class="line">③sdk配置</span><br><span class="line">④虚拟设备驱动设置，AVD manager；我们使用真实机器（需要安装驱动abd）</span><br></pre></td></tr></table></figure><p>4：Genymotion安装（这里我们没使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Genymotion是一套完整的工具，它提供了Android虚拟环境。 它简直就是开发者、测试人员、推销者甚至是游戏玩家的福音。 Genymotion支持Windows、Linux和Mac OS等操作系统，容易安装和使用：按简单的安装过程，选择一款Android虚拟设备，开启后就体验Genymotion带来的快感吧。</span><br><span class="line"></span><br><span class="line">加速程序运行</span><br></pre></td></tr></table></figure><p>5：android app基本概述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">activity :开发者可以在上面做很多activities，是一个screen。</span><br><span class="line">project:整个项目</span><br><span class="line">package：包</span><br><span class="line">android：最重要的，android app</span><br><span class="line">res/drawable：放置png图片，</span><br><span class="line">res/layout：放置主activity的xml文件，设计手机对应的主界面，用来设计的</span><br><span class="line">textview：最基本的视图之一</span><br><span class="line">layout：activity的设计</span><br></pre></td></tr></table></figure><p>6：分布式教程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">activity生命周期：https://developer.android.com/reference/android/app/Activity</span><br><span class="line">oncreate()：</span><br></pre></td></tr></table></figure><p>7：测试生命周期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">①定义日志名称</span><br><span class="line">②输出日志Log.i()</span><br><span class="line">③设置logcat控制台</span><br><span class="line">④选择自己日志名称对应</span><br><span class="line">⑤运行程序，可以看到对应的生命周期输出</span><br><span class="line">⑥关闭，打开，暂停应用程序，可以看到对应的日志</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.example.testapplication;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    public static final String MY_TAG = &quot;the_custom_message&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Log.i(MY_TAG, &quot;onCreate&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8：app:add to numble</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里学到如何让取值，如何设置值，如何展示，button点击触发方法</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.example.testapplication;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.annotation.SuppressLint;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //求和点击button</span><br><span class="line">    @SuppressLint(&quot;SetTextI18n&quot;)</span><br><span class="line">    public void add(View v) &#123;</span><br><span class="line">        //获取第一个输入框的数值</span><br><span class="line">        EditText e1 = (EditText) findViewById(R.id.editText);</span><br><span class="line">        //获取第二个输入框的数值</span><br><span class="line">        EditText e2 = (EditText) findViewById(R.id.editText2);</span><br><span class="line">        //获取结果框的值</span><br><span class="line">        TextView t1 = (TextView) findViewById(R.id.textView);</span><br><span class="line">        //解析输入框为int类型</span><br><span class="line">        int num1 = Integer.parseInt(e1.getText().toString());</span><br><span class="line">        int num2 = Integer.parseInt(e2.getText().toString());</span><br><span class="line">        int sum = num1 + num2;//求和</span><br><span class="line">        //结果展示到Text文本框</span><br><span class="line">        t1.setText(Integer.toString(sum));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9：layout填充方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match_parent：满填充</span><br><span class="line">fill_parent：满填充</span><br><span class="line">wrap_content：填充少一部分</span><br></pre></td></tr></table></figure><p>10：app:show the password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">学到的东西：输入框的类，Toast类（弹框）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.example.showpassword;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private EditText pass_word;</span><br><span class="line">    private Button button_sbm;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        showPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void showPassword() &#123;</span><br><span class="line">        pass_word = (EditText) findViewById(R.id.editText);</span><br><span class="line">        button_sbm = (Button) findViewById(R.id.show);</span><br><span class="line">        button_sbm.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        Toast.makeText(</span><br><span class="line">                                MainActivity.this, pass_word.getText(),</span><br><span class="line">                                Toast.LENGTH_SHORT</span><br><span class="line">                        ).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11：Checkbox Basics and Example（复选框基础和示例）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">学到:①复选框逻辑判断②点击出发事件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.example.checkbox;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.CheckBox;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private CheckBox checkBox1, checkBox2, checkBox3;</span><br><span class="line"></span><br><span class="line">    private Button button;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        addListenerOnButton();</span><br><span class="line">        toast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void toast() &#123;</span><br><span class="line">        checkBox1 = (CheckBox) findViewById(R.id.checkBox1);</span><br><span class="line">        checkBox1.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        if ((checkBox1).isChecked()) &#123;</span><br><span class="line">                            Toast.makeText(MainActivity.this, &quot;Cat is seketed&quot;,</span><br><span class="line">                                    Toast.LENGTH_LONG).show();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void addListenerOnButton() &#123;</span><br><span class="line"></span><br><span class="line">        checkBox1 = (CheckBox) findViewById(R.id.checkBox1);</span><br><span class="line">        checkBox2 = (CheckBox) findViewById(R.id.checkBox2);</span><br><span class="line">        checkBox3 = (CheckBox) findViewById(R.id.checkBox3);</span><br><span class="line"></span><br><span class="line">        button = (Button) findViewById(R.id.show);</span><br><span class="line"></span><br><span class="line">        button.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                StringBuffer result = new StringBuffer();</span><br><span class="line">                result.append(&quot;Dog : &quot;).append(checkBox1.isChecked());</span><br><span class="line">                result.append(&quot;\nCat : &quot;).append(checkBox2.isChecked());</span><br><span class="line">                result.append(&quot;\nCow : &quot;).append(checkBox3.isChecked());</span><br><span class="line"></span><br><span class="line">                Toast.makeText(MainActivity.this, result.toString(),</span><br><span class="line">                        Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12：RadioButton （单选框）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">①radio group：组，把单选框框选</span><br><span class="line">②radio button：单选框</span><br><span class="line">③获取单选框选择的id，然后获取id的值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.example.rediobutton;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.RadioButton;</span><br><span class="line">import android.widget.RadioGroup;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private static Button button;</span><br><span class="line">    private static RadioGroup radioGroup;</span><br><span class="line">    private static RadioButton radioButton;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        submit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //提交方法，获取单选框的id，再获取值，之后展示</span><br><span class="line">    public void submit() &#123;</span><br><span class="line">        //赋值</span><br><span class="line">        radioGroup = (RadioGroup) findViewById(R.id.radioGroup);</span><br><span class="line">        button = (Button) findViewById(R.id.button);</span><br><span class="line">        //button出发事件</span><br><span class="line">        button.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                //获取单选框的id</span><br><span class="line">                int select_Id = radioGroup.getCheckedRadioButtonId();</span><br><span class="line">                radioButton = findViewById(select_Id);</span><br><span class="line">                Toast.makeText(MainActivity.this,</span><br><span class="line">                        radioButton.getText().toString(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13：RatingBar（星级评分条）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.example.ratingbarbasics;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.RatingBar;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private static Button button_sbm;</span><br><span class="line">    private static TextView text_v;</span><br><span class="line">    private static RatingBar rating_b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        listenerForRatingBar();</span><br><span class="line">        onButtonClickListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void listenerForRatingBar() &#123;</span><br><span class="line">        rating_b = (RatingBar) findViewById(R.id.ratingBar);</span><br><span class="line">        text_v = (TextView) findViewById(R.id.textView);</span><br><span class="line">        rating_b.setOnRatingBarChangeListener(</span><br><span class="line">                new RatingBar.OnRatingBarChangeListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onRatingChanged(RatingBar ratingBar, float rating, boolean fromUser) &#123;</span><br><span class="line">                        text_v.setText(String.valueOf(rating));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onButtonClickListener() &#123;</span><br><span class="line">        rating_b = (RatingBar) findViewById(R.id.ratingBar);</span><br><span class="line">        button_sbm = (Button) findViewById(R.id.button);</span><br><span class="line"></span><br><span class="line">        button_sbm.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        Toast.makeText(MainActivity.this,</span><br><span class="line">                                String.valueOf(rating_b.getRating()),</span><br><span class="line">                                Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>14：Alert Dialog</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.example.alertdialog;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AlertDialog;</span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.content.DialogInterface;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private static Button button_sbm;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        onButtonClickListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onButtonClickListener() &#123;</span><br><span class="line">        button_sbm = (Button) findViewById(R.id.button);</span><br><span class="line">        button_sbm.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        AlertDialog.Builder a_builder = new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">                        a_builder.setMessage(&quot;Do you want to Close this App !!!&quot;).</span><br><span class="line">                                setCancelable(false)</span><br><span class="line">                                .setPositiveButton(&quot;Yes&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                                    @Override</span><br><span class="line">                                    public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                                        finish();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;).setNegativeButton(&quot;No&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                                dialog.cancel();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        AlertDialog alert = a_builder.create();</span><br><span class="line">                        alert.setTitle(&quot;Alert!!!&quot;);</span><br><span class="line">                        alert.show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>15： How to Start New Activity On Button Click via Intent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.example.howtostartnewactivityonbuttonclickviaintent;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private static Button button_sbm;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        onClickButtonListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onClickButtonListener() &#123;</span><br><span class="line">        button_sbm = (Button) findViewById(R.id.button);</span><br><span class="line">        button_sbm.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        Intent intent = new Intent(&quot;android.intent.action.Main2Activity&quot;);</span><br><span class="line">                        startActivity(intent);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>16：Analogclock And Digitalclock</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">高的api中已经被弃用，如果要使用搜索第三方时钟控件</span><br></pre></td></tr></table></figure><p>17：Login Screen</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package com.example.loginscreen;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.annotation.SuppressLint;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class Login extends AppCompatActivity &#123;</span><br><span class="line">    private static EditText username;</span><br><span class="line">    private static EditText password;</span><br><span class="line">    private static TextView attempts_count;</span><br><span class="line">    private static Button login_btn;</span><br><span class="line">    private int attempt_counter = 5;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_login);</span><br><span class="line">        LoginButton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void LoginButton() &#123;</span><br><span class="line">        username = (EditText) findViewById(R.id.editText_username);</span><br><span class="line">        password = (EditText) findViewById(R.id.editText_password);</span><br><span class="line">        attempts_count = (TextView) findViewById(R.id.textView_count);</span><br><span class="line">        login_btn = (Button) findViewById(R.id.button);</span><br><span class="line">        attempts_count.setText(Integer.toString(attempt_counter));</span><br><span class="line">        login_btn.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        if (username.getText().toString().equals(&quot;YanYuBing&quot;) &amp;&amp;</span><br><span class="line">                                password.getText().toString().equals(&quot;123456&quot;)) &#123;</span><br><span class="line">                            Toast.makeText(Login.this, &quot;User and Password is correct&quot;,</span><br><span class="line">                                    Toast.LENGTH_SHORT).show();</span><br><span class="line">                            Intent intent = new Intent(&quot;android.intent.action.User&quot;);</span><br><span class="line">                            startActivity(intent);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            Toast.makeText(Login.this, &quot;User and Password is not correct&quot;,</span><br><span class="line">                                    Toast.LENGTH_SHORT).show();</span><br><span class="line">                            attempt_counter--;</span><br><span class="line">                            attempts_count.setText(Integer.toString(attempt_counter));</span><br><span class="line">                            if (attempt_counter == 0) &#123;</span><br><span class="line">                                login_btn.setEnabled(false);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>18：Android ImageView example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.example.imageview;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line"></span><br><span class="line">import android.widget.ImageView;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private static Button button;</span><br><span class="line">    private static ImageView imageView;</span><br><span class="line">    private int img_index;</span><br><span class="line">    private int[]imageViews=&#123;R.mipmap.haizeiwang01,R.mipmap.haizeiwang02,R.mipmap.haizeiwang03,R.mipmap.haizeiwang04&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        onClickButton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onClickButton() &#123;</span><br><span class="line">        imageView = (ImageView) findViewById(R.id.imageView);</span><br><span class="line">        button = (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        img_index++;</span><br><span class="line">                        img_index = img_index % imageViews.length;</span><br><span class="line">                        imageView.setImageResource(imageViews[img_index]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>19：ListView</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.example.listview;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.AdapterView;</span><br><span class="line">import android.widget.ArrayAdapter;</span><br><span class="line">import android.widget.ListView;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private static ListView list_View;</span><br><span class="line">    private static String[] NAMES = new String[]&#123;&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;&#125;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        listView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void listView() &#123;</span><br><span class="line">        list_View = (ListView) findViewById(R.id.listview);</span><br><span class="line">        ArrayAdapter&lt;String&gt; arrayAdapter = new ArrayAdapter&lt;String&gt;(</span><br><span class="line">                this, R.layout.list_name, NAMES);</span><br><span class="line">        list_View.setAdapter(arrayAdapter);</span><br><span class="line">        list_View.setOnItemClickListener(</span><br><span class="line">                new AdapterView.OnItemClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;</span><br><span class="line">                        String value = (String) list_View.getItemAtPosition(position);</span><br><span class="line">                        Toast.makeText(MainActivity.this,</span><br><span class="line">                                &quot;位置为:&quot; + position + &quot;   值:&quot; + value, Toast.LENGTH_LONG).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>20：SeekBar（拖动条）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.example.seekbar;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.annotation.SuppressLint;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.widget.SeekBar;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private static SeekBar seek_Bar;</span><br><span class="line">    private static TextView text_View;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        seebbarr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressLint(&quot;SetTextI18n&quot;)</span><br><span class="line">    public void seebbarr() &#123;</span><br><span class="line">        seek_Bar = (SeekBar) findViewById(R.id.seekBar);</span><br><span class="line">        text_View = (TextView) findViewById(R.id.textView);</span><br><span class="line">        text_View.setText(&quot;音量:&quot; + seek_Bar.getProgress() + &quot;/&quot; + seek_Bar.getMax());</span><br><span class="line">        seek_Bar.setOnSeekBarChangeListener(</span><br><span class="line">                new SeekBar.OnSeekBarChangeListener() &#123;</span><br><span class="line">                    int progress_value;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) &#123;</span><br><span class="line">                        progress_value = progress;</span><br><span class="line">                        text_View.setText(&quot;音量:&quot; + seek_Bar.getProgress() + &quot;/&quot; + seek_Bar.getMax());</span><br><span class="line">                        Toast.makeText(MainActivity.this, &quot;音量改变中&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onStartTrackingTouch(SeekBar seekBar) &#123;</span><br><span class="line">                        Toast.makeText(MainActivity.this, &quot;开始调整音量&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onStopTrackingTouch(SeekBar seekBar) &#123;</span><br><span class="line">                        text_View.setText(&quot;音量:&quot; + progress_value + &quot;/&quot; + seekBar.getMax());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>21：WebView</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.example.webview;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.webkit.WebView;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private EditText editText;</span><br><span class="line">    private WebView webView;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        goWeb();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void goWeb() &#123;</span><br><span class="line">        editText = (EditText) findViewById(R.id.editText);</span><br><span class="line">        webView = (WebView) findViewById(R.id.webView);</span><br><span class="line">        Button button_sbm = (Button) findViewById(R.id.button);</span><br><span class="line">        button_sbm.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        String url = editText.getText().toString();</span><br><span class="line">                        webView.getSettings().setLoadsImagesAutomatically(true);</span><br><span class="line">                        webView.getSettings().setJavaScriptEnabled(true);</span><br><span class="line">                        webView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);</span><br><span class="line">                        webView.loadUrl(url);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>22：Gestures (Using Touch Gestures)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">package com.example.gestures;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line">import androidx.core.view.GestureDetectorCompat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import android.view.MotionEvent;</span><br><span class="line">import android.view.GestureDetector;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity implements GestureDetector.OnGestureListener,</span><br><span class="line">        GestureDetector.OnDoubleTapListener &#123;</span><br><span class="line"></span><br><span class="line">    private static TextView textView;</span><br><span class="line">    private GestureDetectorCompat gestureDetect;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = (TextView) findViewById(R.id.textView);</span><br><span class="line">        gestureDetect = new GestureDetectorCompat(this, this);</span><br><span class="line">        gestureDetect.setOnDoubleTapListener(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        gestureDetect.onTouchEvent(event);</span><br><span class="line">        return super.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //单击确认</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onSingleTapConfirmed(MotionEvent e) &#123;</span><br><span class="line">        textView.setText(&quot;单击确认&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //双击</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onDoubleTap(MotionEvent e) &#123;</span><br><span class="line">        textView.setText(&quot;双击&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //双击事件</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onDoubleTapEvent(MotionEvent e) &#123;</span><br><span class="line">        textView.setText(&quot;双击事件&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //下拉</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onDown(MotionEvent e) &#123;</span><br><span class="line">        textView.setText(&quot;下拉&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //按压</span><br><span class="line">    @Override</span><br><span class="line">    public void onShowPress(MotionEvent e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //一次向上点击</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onSingleTapUp(MotionEvent e) &#123;</span><br><span class="line">        textView.setText(&quot;一次点击&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //滚动</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) &#123;</span><br><span class="line">        textView.setText(&quot;滚动&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //长按</span><br><span class="line">    @Override</span><br><span class="line">    public void onLongPress(MotionEvent e) &#123;</span><br><span class="line">        textView.setText(&quot;长按&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //猛按</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) &#123;</span><br><span class="line">        textView.setText(&quot;猛按&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>23：AutoCompleteTextView Control</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.example.autocompletetextviewcontrol;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.widget.ArrayAdapter;</span><br><span class="line">import android.widget.AutoCompleteTextView;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private AutoCompleteTextView acTextView;</span><br><span class="line">    private String[] Names = &#123;&quot;鄢玉兵&quot;, &quot;鄢小弟&quot;, &quot;鄢小哥&quot;, &quot;鄢大哥&quot;, &quot;鄢大弟&quot;&#125;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        acTextView = (AutoCompleteTextView) findViewById(R.id.autoCompleteTextView);</span><br><span class="line"></span><br><span class="line">        ArrayAdapter arrayAdapter = new ArrayAdapter(this, android.R.layout.select_dialog_item, Names);</span><br><span class="line"></span><br><span class="line">        acTextView.setThreshold(1);</span><br><span class="line">        acTextView.setAdapter(arrayAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>24：TimePicker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.example.timepicker;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.TimePicker;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private TimePicker time_Picker;</span><br><span class="line">    private Button button_show_time;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        showTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void showTime() &#123;</span><br><span class="line">        time_Picker = (TimePicker) findViewById(R.id.timePicker);</span><br><span class="line">        button_show_time = (Button) findViewById(R.id.button);</span><br><span class="line">        button_show_time.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        Toast.makeText(getBaseContext(), time_Picker.getCurrentHour() +</span><br><span class="line">                                &quot;:&quot; + time_Picker.getCurrentMinute(), Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>25:TimePicker Dialog</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.example.timepickerdialog;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.app.Dialog;</span><br><span class="line">import android.app.TimePickerDialog;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.TimePicker;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    Button button_stp;</span><br><span class="line">    static final int DIALOG_id = 0;</span><br><span class="line">    int hour_x;</span><br><span class="line">    int minute_x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        showTimePickerDialog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void showTimePickerDialog() &#123;</span><br><span class="line">        button_stp = (Button) findViewById(R.id.button);</span><br><span class="line">        button_stp.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        showDialog(DIALOG_id);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Dialog onCreateDialog(int id) &#123;</span><br><span class="line">        if (id == DIALOG_id) &#123;</span><br><span class="line">            return new TimePickerDialog(MainActivity.this, kTimePickerListner, hour_x, minute_x, false);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected TimePickerDialog.OnTimeSetListener kTimePickerListner =</span><br><span class="line">            new TimePickerDialog.OnTimeSetListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onTimeSet(TimePicker view, int hourOfDay, int minute) &#123;</span><br><span class="line">                    hour_x = hourOfDay;</span><br><span class="line">                    minute_x = minute;</span><br><span class="line">                    Toast.makeText(MainActivity.this, hour_x + &quot;:&quot; + minute_x, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>26：DatePicker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package com.example.datepickerdialog;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.app.DatePickerDialog;</span><br><span class="line">import android.app.Dialog;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.DatePicker;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">import java.util.Calendar;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    Button btn;</span><br><span class="line">    int year_x, month_x, day_x;</span><br><span class="line">    static final int DIALOG_ID = 0;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        final Calendar cal = Calendar.getInstance();</span><br><span class="line">        year_x = cal.get(Calendar.YEAR);</span><br><span class="line">        month_x = cal.get(Calendar.MONTH);</span><br><span class="line">        day_x = cal.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        showDialogOnButtonClick();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void showDialogOnButtonClick() &#123;</span><br><span class="line">        btn = (Button) findViewById(R.id.button);</span><br><span class="line">        btn.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        showDialog(DIALOG_ID);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Dialog onCreateDialog(int id) &#123;</span><br><span class="line">        if (id == DIALOG_ID) &#123;</span><br><span class="line">            return new DatePickerDialog(this, dpickerListner, year_x, month_x, day_x);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected DatePickerDialog.OnDateSetListener dpickerListner = new DatePickerDialog.OnDateSetListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) &#123;</span><br><span class="line">            year_x = year;</span><br><span class="line">            month_x = month+1;</span><br><span class="line">            day_x = dayOfMonth;</span><br><span class="line">            Toast.makeText(MainActivity.this, year_x + &quot;/&quot; + month_x + &quot;/&quot; + day_x, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>27：sqlite</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">1:Main</span><br><span class="line"></span><br><span class="line">package com.example.sqlite;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AlertDialog;</span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.content.DialogInterface;</span><br><span class="line">import android.database.Cursor;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    EditText editName, editSurname, editMarks, editId;</span><br><span class="line">    DatabaseHelper myDb;</span><br><span class="line">    Button btnAddData;</span><br><span class="line">    Button btnViewAll;</span><br><span class="line">    Button btnUpdate;</span><br><span class="line">    Button btnDeleteDate;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        myDb = new DatabaseHelper(this);</span><br><span class="line">        editName = (EditText) findViewById(R.id.editText_name);</span><br><span class="line">        editSurname = (EditText) findViewById(R.id.editText_surname);</span><br><span class="line">        editMarks = (EditText) findViewById(R.id.editText_marks);</span><br><span class="line">        editId = (EditText) findViewById(R.id.ediText_id);</span><br><span class="line">        btnAddData = (Button) findViewById(R.id.button);</span><br><span class="line">        btnViewAll = (Button) findViewById(R.id.button2);</span><br><span class="line">        btnUpdate = (Button) findViewById(R.id.button3);</span><br><span class="line">        btnDeleteDate = (Button) findViewById(R.id.button4);</span><br><span class="line">        addData();</span><br><span class="line">        viewAll();</span><br><span class="line">        update();</span><br><span class="line">        deleteData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void update() &#123;</span><br><span class="line">        btnUpdate.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                boolean isUpdate = myDb.updateData(editId.getText().toString(),</span><br><span class="line">                        editName.getText().toString(),</span><br><span class="line">                        editSurname.getText().toString(),</span><br><span class="line">                        editMarks.getText().toString());</span><br><span class="line">                if (isUpdate) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.this, &quot;数据更新成功&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.this, &quot;数据插入失败&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addData() &#123;</span><br><span class="line">        btnAddData.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        boolean isInsertData = myDb.insertData(editName.getText().toString(),</span><br><span class="line">                                editSurname.getText().toString(),</span><br><span class="line">                                editMarks.getText().toString());</span><br><span class="line">                        if (isInsertData) &#123;</span><br><span class="line">                            Toast.makeText(MainActivity.this, &quot;数据插入成功&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            Toast.makeText(MainActivity.this, &quot;数据插入失败&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void viewAll() &#123;</span><br><span class="line">        btnViewAll.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        Cursor res = myDb.getAllData();</span><br><span class="line">                        if (res.getCount() == 0) &#123;</span><br><span class="line">                            showMessage(&quot;Error&quot;, &quot;没有数据&quot;);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            StringBuffer buffer = new StringBuffer();</span><br><span class="line">                            while (res.moveToNext()) &#123;</span><br><span class="line">                                buffer.append(&quot;id:&quot; + res.getString(0) + &quot;\n&quot;);</span><br><span class="line">                                buffer.append(&quot;姓名:&quot; + res.getString(1) + &quot;\n&quot;);</span><br><span class="line">                                buffer.append(&quot;学科:&quot; + res.getString(2) + &quot;\n&quot;);</span><br><span class="line">                                buffer.append(&quot;分数:&quot; + res.getString(3) + &quot;\n&quot;);</span><br><span class="line">                                buffer.append(&quot;\n&quot;);</span><br><span class="line">                            &#125;</span><br><span class="line">                            showMessage(&quot;数据:&quot;, buffer.toString());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void deleteData() &#123;</span><br><span class="line">        btnDeleteDate.setOnClickListener(</span><br><span class="line">                new View.OnClickListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onClick(View v) &#123;</span><br><span class="line">                        Integer deleteRow = myDb.deleteData(editId.getText().toString());</span><br><span class="line">                        if (deleteRow &gt; 0) &#123;</span><br><span class="line">                            Toast.makeText(MainActivity.this, &quot;数据删除成功&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            Toast.makeText(MainActivity.this, &quot;数据删除失败&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void showMessage(String title, String Message) &#123;</span><br><span class="line">        AlertDialog.Builder builder = new AlertDialog.Builder(this);</span><br><span class="line">        builder.setCancelable(true);</span><br><span class="line">        builder.setTitle(title);</span><br><span class="line">        builder.setMessage(Message);</span><br><span class="line">        builder.setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                dialog.dismiss();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        builder.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">package com.example.sqlite;</span><br><span class="line"></span><br><span class="line">import android.content.ContentValues;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.database.Cursor;</span><br><span class="line">import android.database.sqlite.SQLiteDatabase;</span><br><span class="line">import android.database.sqlite.SQLiteOpenHelper;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line"></span><br><span class="line">import androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line">public class DatabaseHelper extends SQLiteOpenHelper &#123;</span><br><span class="line">    public static final String DATABASE_NAME = &quot;Student.db&quot;;</span><br><span class="line">    public static final String TABLE_NAME = &quot;Student_table&quot;;</span><br><span class="line">    public static final String COL_1 = &quot;ID&quot;;</span><br><span class="line">    public static final String COL_2 = &quot;NAME&quot;;</span><br><span class="line">    public static final String COL_3 = &quot;SURNAME&quot;;</span><br><span class="line">    public static final String COL_4 = &quot;MARKS&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public DatabaseHelper(@Nullable Context context) &#123;</span><br><span class="line">        super(context, DATABASE_NAME, null, 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(SQLiteDatabase db) &#123;</span><br><span class="line">        String sql = &quot;create table &quot; + TABLE_NAME + &quot;(&quot; + COL_1 + &quot;INTEGER PRIMARY KEY AUTOINCREMENT,&quot; + COL_2 + &quot;,TEXT,&quot; + COL_3 + &quot;,TEXT,&quot; + COL_4 + &quot;,TEXT)&quot;;</span><br><span class="line">        db.execSQL(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</span><br><span class="line">        String sql = &quot;DROP TABLE &quot; + TABLE_NAME;</span><br><span class="line">        db.execSQL(sql);</span><br><span class="line">        onCreate(db);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //插入数据</span><br><span class="line">    public boolean insertData(String name, String surname, String marks) &#123;</span><br><span class="line">        SQLiteDatabase db = this.getWritableDatabase();</span><br><span class="line">        ContentValues contentValues = new ContentValues();</span><br><span class="line">        contentValues.put(COL_2, name);</span><br><span class="line">        contentValues.put(COL_3, surname);</span><br><span class="line">        contentValues.put(COL_4, marks);</span><br><span class="line">        long result = db.insert(TABLE_NAME, null, contentValues);</span><br><span class="line">        return result != -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //查看所有数据</span><br><span class="line">    public Cursor getAllData() &#123;</span><br><span class="line">        SQLiteDatabase db = this.getWritableDatabase();</span><br><span class="line">        Cursor res = db.rawQuery(&quot;select * from &quot; + TABLE_NAME, null);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //更改数据</span><br><span class="line">    public boolean updateData(String id, String name, String surname, String marks) &#123;</span><br><span class="line">        SQLiteDatabase db = this.getWritableDatabase();</span><br><span class="line">        ContentValues contentValues = new ContentValues();</span><br><span class="line">        contentValues.put(COL_1, id);</span><br><span class="line">        contentValues.put(COL_2, name);</span><br><span class="line">        contentValues.put(COL_3, surname);</span><br><span class="line">        contentValues.put(COL_4, marks);</span><br><span class="line">        db.update(TABLE_NAME, contentValues, &quot;ID = ?&quot;, new String[]&#123;id&#125;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //删除数据</span><br><span class="line">    public Integer deleteData(String id) &#123;</span><br><span class="line">        SQLiteDatabase db = this.getWritableDatabase();</span><br><span class="line">        return db.delete(TABLE_NAME, &quot;ID = ?&quot;, new String[]&#123;id&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>28：ActionBar</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.example.actionbar;</span><br><span class="line"></span><br><span class="line">import androidx.annotation.NonNull;</span><br><span class="line">import androidx.appcompat.app.ActionBar;</span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.Menu;</span><br><span class="line">import android.view.MenuInflater;</span><br><span class="line">import android.view.MenuItem;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        ActionBar ab = getSupportActionBar();</span><br><span class="line">        assert ab != null;</span><br><span class="line">        ab.setLogo(R.mipmap.ic_launcher);</span><br><span class="line">        ab.setDisplayUseLogoEnabled(true);</span><br><span class="line">        ab.setDisplayShowHomeEnabled(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onCreateOptionsMenu(Menu menu) &#123;</span><br><span class="line">        MenuInflater menuInflater = getMenuInflater();</span><br><span class="line">        menuInflater.inflate(R.menu.main_activity_menu, menu);</span><br><span class="line">        return super.onCreateOptionsMenu(menu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onOptionsItemSelected(@NonNull MenuItem item) &#123;</span><br><span class="line">        switch (item.getItemId()) &#123;</span><br><span class="line">            case R.id.info_id:</span><br><span class="line">                Toast.makeText(getApplicationContext(), &quot;提示框被选择了！&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">                break;</span><br><span class="line">            case R.id.setting_id:</span><br><span class="line">                Toast.makeText(getApplicationContext(), &quot;设置框被选择了！&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return super.onOptionsItemSelected(item);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>29：Introduction to Services and Creating Started Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.example.service;</span><br><span class="line"></span><br><span class="line">import android.app.Service;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.os.IBinder;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">import androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line">public class TheService extends Service &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">        Toast.makeText(TheService.this,&quot;service Started&quot;,Toast.LENGTH_LONG).show();</span><br><span class="line">        return START_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        Toast.makeText(TheService.this,&quot;service Destroy&quot;,Toast.LENGTH_LONG).show();</span><br><span class="line">        super.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>30：Service and Thread in Android</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.example.ServiceandThreadinAndroid;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void startService(View view) &#123;</span><br><span class="line">        Intent intent = new Intent(this, TheService.class);</span><br><span class="line">        startService(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void stopService(View view) &#123;</span><br><span class="line">        Intent intent = new Intent(this, TheService.class);</span><br><span class="line">        stopService(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.example.ServiceandThreadinAndroid;</span><br><span class="line"></span><br><span class="line">import android.app.Service;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.os.IBinder;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">import androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line">public class TheService extends Service &#123;</span><br><span class="line">    final class TheThread implements Runnable &#123;</span><br><span class="line">        int serviceId;</span><br><span class="line"></span><br><span class="line">        TheThread(int serviceId) &#123;</span><br><span class="line">            this.serviceId = serviceId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            synchronized (this) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    wait(20000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                stopSelf(this.serviceId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">        Toast.makeText(TheService.this, &quot;service Started&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line"></span><br><span class="line">        Thread thread = new Thread(new TheThread(startId));</span><br><span class="line">        thread.start();</span><br><span class="line">        return START_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        Toast.makeText(TheService.this, &quot;service Destroy&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">        super.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>31：Bound Services</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.example.boundservices;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.content.ComponentName;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.content.ServiceConnection;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.os.IBinder;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    MyService myService;</span><br><span class="line">    boolean isBound = false;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Intent intent = new Intent(this, MyService.class);</span><br><span class="line">        bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void getRandomNumber(View view) &#123;</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.textView);</span><br><span class="line">        textView.setText(Integer.toString(myService.getRandom()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ServiceConnection serviceConnection = new ServiceConnection() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">            MyService.LocalBinder binder = (MyService.LocalBinder) service;</span><br><span class="line">            myService = binder.getService();</span><br><span class="line">            isBound = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class="line">            isBound = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.example.boundservices;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import android.app.Service;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.os.Binder;</span><br><span class="line">import android.os.IBinder;</span><br><span class="line"></span><br><span class="line">import androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MyService extends Service &#123;</span><br><span class="line">    private final IBinder iBinder = new LocalBinder();</span><br><span class="line">    private final Random mGenerator = new Random();</span><br><span class="line"></span><br><span class="line">    public class LocalBinder extends Binder &#123;</span><br><span class="line">        MyService getService() &#123;</span><br><span class="line">            return MyService.this;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyService() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return iBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getRandom() &#123;</span><br><span class="line">        return mGenerator.nextInt(200);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>32：Applying Styles on Components</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Base application theme. --&gt;</span><br><span class="line">    &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class="line">        &lt;!-- Customize your theme here. --&gt;</span><br><span class="line">        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style name=&quot;myStyle1&quot; parent=&quot;@android:style/TextAppearance.Large&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:textColor&quot;&gt;#FF0000&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:textAppearance&quot;&gt;@android:style/TextAppearance.Large&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style name=&quot;myStyle1.myStyle2&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;android:textStyle&quot;&gt;italic&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:textColor&quot;&gt;#008000&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:textAppearance&quot;&gt;@android:style/TextAppearance.Large&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure><p>33：How to Save a File on Internal Storage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package com.example.saveafileoninternalstorage;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    EditText editText;</span><br><span class="line">    TextView textView;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        editText = (EditText) findViewById(R.id.editText);</span><br><span class="line">        textView = (TextView) findViewById(R.id.textView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void read(View view) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            FileInputStream fis = openFileInput(&quot;myText.txt&quot;);</span><br><span class="line">            InputStreamReader inputStreamReader = new InputStreamReader(fis);</span><br><span class="line">            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</span><br><span class="line">            StringBuffer stringBuffer = new StringBuffer();</span><br><span class="line">            String lines;</span><br><span class="line">            while ((lines = bufferedReader.readLine()) != null) &#123;</span><br><span class="line">                stringBuffer.append(lines + &quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            textView.setText(stringBuffer.toString());</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void write(View view) &#123;</span><br><span class="line">        String MyTextMessage = editText.getText().toString();</span><br><span class="line">        try &#123;</span><br><span class="line">            FileOutputStream fos = openFileOutput(&quot;myText.txt&quot;, MODE_PRIVATE);</span><br><span class="line">            fos.write(MyTextMessage.getBytes());</span><br><span class="line">            fos.close();</span><br><span class="line">            Toast.makeText(getApplicationContext(), &quot;文件已保存&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">            editText.setText(&quot;&quot;);</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;android开发&quot;&gt;&lt;a href=&quot;#android开发&quot; class=&quot;headerlink&quot; title=&quot;android开发&quot;&gt;&lt;/a&gt;android开发&lt;/h1&gt;&lt;p&gt;1：安装和配置jdk（环境变量等）&lt;/p&gt;
&lt;p&gt;2：安装android studi
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>李宏毅机器学习</title>
    <link href="https://yanyubing.xyz/2020/01/16/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yanyubing.xyz/2020/01/16/%E6%9D%8E%E5%AE%8F%E6%AF%85%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-01-16T03:24:18.795Z</published>
    <updated>2020-01-22T11:35:19.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="李宏毅机器学习"><a href="#李宏毅机器学习" class="headerlink" title="李宏毅机器学习"></a>李宏毅机器学习</h1><p>1：Regression（回归）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">机器学习步骤：①找一个model（function set）②根据Training data找到合适的function，实际上是合适的参数（这里是定义Loss function,L(f)=L(w,b)损失函数来表示我们函数的好坏，损失函数越大，则函数越差）③获得最好的function，损失函数最小</span><br><span class="line"></span><br><span class="line">线性回归：y=wx+b  w:weight b:bias</span><br><span class="line"></span><br><span class="line">Gradient Descent（梯度下降）作用：求出最小的损失函数L(w,b)。</span><br><span class="line">①随机选取w0，对L(w,b)求导，涉及到学习率，更新w0</span><br><span class="line">②重复，直到w0处，L(w,b)最低，Local optimal</span><br><span class="line">③梯度下降的worry：存在多个最小损失函数值（多个局部最小值）</span><br><span class="line">④定义合适的损失函数，使得局部最低值就是全局最低值</span><br><span class="line"></span><br><span class="line">总结：①选取合适的模型②通过损失函数最小值，来获取最合适的参数③模型越复杂，在train data上得到的损失函数值可能越低，但是同时可能在test data上得到的损失值越高，这要看如何把控。</span><br><span class="line"></span><br><span class="line">Regularization（正则化）：回归可能会出现在train data上损失函数很低，但是在test data上出现损失函数过高的情况。这里可以使用正则化，在损失函数最后+λ∑（wi）²,使得曲线边平滑，得到低的test data损失函数，正则化的过程不需要考虑b（bias）。2：梯度下降代码实现</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># 梯度下降</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">x_data = [338., 333., 328., 207., 226., 25., 179., 60., 208., 606.]</span><br><span class="line">y_data = [640., 633., 619., 393., 428., 27., 192., 66., 226., 1591.]</span><br><span class="line"># ydata=b+w*xdata</span><br><span class="line">x = np.arange(-200, -100, 1)  # bias</span><br><span class="line">y = np.arange(-5, 5, 0.1)  # weight</span><br><span class="line">z = np.zeros((len(x), len(y)))</span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line">for i in range(len(x)):</span><br><span class="line">    for j in range(len(y)):</span><br><span class="line">        b = x[i]</span><br><span class="line">        w = y[j]</span><br><span class="line">        z[j][i] = 0</span><br><span class="line">        for n in range(len(x_data)):</span><br><span class="line">            z[j][i] = z[j][i] + (y_data[n] - b - w * x_data[n]) ** 2</span><br><span class="line">        z[j][i] = z[j][i] / len(x_data)</span><br><span class="line">b = -120</span><br><span class="line">w = -4</span><br><span class="line">lr = 1  # learning rate</span><br><span class="line">iteration = 100000</span><br><span class="line"></span><br><span class="line"># store initial</span><br><span class="line">b_history = [b]</span><br><span class="line">w_history = [w]</span><br><span class="line"></span><br><span class="line">lr_b = 0</span><br><span class="line">lr_w = 0</span><br><span class="line"># Iterations</span><br><span class="line">for i in range(iteration):</span><br><span class="line">    b_grad = 0.0</span><br><span class="line">    w_grad = 0.0</span><br><span class="line">    for n in range(len(x_data)):</span><br><span class="line">        b_grad = b_grad - 2.0 * (y_data[n] - b - w * x_data[n]) * 1.0</span><br><span class="line">        w_grad = w_grad - 2.0 * (y_data[n] - b - w * x_data[n]) * x_data[n]</span><br><span class="line"></span><br><span class="line">    lr_b = lr_b + b_grad ** 2</span><br><span class="line">    lr_w = lr_w + w_grad ** 2</span><br><span class="line">    # 更新参数</span><br><span class="line">    b = b - lr / np.sqrt(lr_b) * b_grad</span><br><span class="line">    w = w - lr / np.sqrt(lr_w) * w_grad</span><br><span class="line"></span><br><span class="line">    # store parameters</span><br><span class="line">    b_history.append(b)</span><br><span class="line">    w_history.append(w)</span><br><span class="line"></span><br><span class="line"># plot the figure</span><br><span class="line">plt.contourf(x, y, z, 50, alpha=0.5, cmap=plt.get_cmap(&apos;jet&apos;))</span><br><span class="line">plt.plot([-188.4], [2.67], &apos;x&apos;, ms=12, markeredgewidth=3, color=&apos;orange&apos;)</span><br><span class="line">plt.plot(b_history, w_history, &apos;o-&apos;, ms=3, lw=1.5, color=&apos;black&apos;)</span><br><span class="line">plt.ylim(-5, 5)</span><br><span class="line">plt.xlabel(r&apos;$b$&apos;, fontsize=16)</span><br><span class="line">plt.ylabel(r&apos;$w$&apos;, fontsize=16)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>2：误差哪里来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">error due to &apos;bias&apos;（偏差） and  error due to &apos;variance&apos; （方差）</span><br><span class="line">概率论中的方差和期望。</span><br><span class="line">最优的方式是Low Bias ，Low Variance</span><br><span class="line">①简单的model模型：Bias比较大，但是Variance比较小；复杂的model，则相反</span><br><span class="line">②当Bias较大时，可能需要重新设计你的model</span><br><span class="line">③当Variance较大时，需要更多的data(很难)【但是可以通过变化增加数据】，或者Regularization(正则化)【正则化可能会增加Bias】</span><br></pre></td></tr></table></figure><p>3：data set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Training Set一般分为训练集和验证集：一部分用来训练模型，验证集部分来选择模型。</span><br><span class="line">原因：在training set 上产生的error一定是要小于实际的Testing Set上面的error，所有提前在training data上就知道error大小</span><br><span class="line">可行方案：把training set分为三等分，分别选择一份为验证集，得到avg error 最低的模型，把该模型在返回来在整个trainning上面</span><br></pre></td></tr></table></figure><p>4：Gradient Descent（梯度下降）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Loss function（损失函数）：求一组参数，使得损失函数最小</span><br><span class="line">①随机选取初始参数w,b</span><br><span class="line">②计算参数的偏微分</span><br><span class="line">③更新w,b</span><br><span class="line">④继续操作，得到偏微分=0（最小值）</span><br><span class="line"></span><br><span class="line">learning rate(学习率):</span><br><span class="line">学习率比较小的时候，可能很慢达到最低点</span><br><span class="line">学习率比较大的时候，可能达不到最低点，持续震荡趋势</span><br><span class="line">①学习率自动更新：开始时候较大，最后靠近最低点的时候变得越小</span><br><span class="line">②对不同的参数给不同的学习率，同时学习率根据前面的数据改变：</span><br><span class="line">方案一（Adagrad）</span><br><span class="line">b = b - lr / np.sqrt(lr_b) * b_grad</span><br><span class="line">w = w - lr / np.sqrt(lr_w) * w_grad</span><br><span class="line"></span><br><span class="line">stochastic Gradient Descent（随机梯度下降）：一次example就更新一次参数</span><br><span class="line"></span><br><span class="line">feature scaling（特征缩放）：y=b+w1*x1+w2*x2，当x1,x2的缩放不一致的时候，把其中大的变小</span><br></pre></td></tr></table></figure><p>5:分类：概率生成模型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">二分分类：已知training data，有100只狗，做完训练之后需要用该模型去判断不在这个training data中的1只狗是狗的概率。</span><br><span class="line">①把training data中的feature提取出来，做正太分布，求出μ和∑，得到正态分布函数</span><br><span class="line">②将检测对象的特征带入到正太分布函数，得到概率</span><br><span class="line"></span><br><span class="line">maximum likelihood（极大似然估计）：求μ和∑所用的方式</span><br><span class="line"></span><br><span class="line">Three steps步骤：</span><br><span class="line">①function set （input x ，output P（概率））</span><br><span class="line">②goodness of a function :极大似然估计求出μ和∑</span><br><span class="line">③找到最好的function</span><br></pre></td></tr></table></figure><p>6：逻辑回归</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">①function set </span><br><span class="line">P（w,b）=σ（z）=1/(1+exp(-z))</span><br><span class="line">z=w*x+b</span><br><span class="line">逻辑回归与线性回归比较：</span><br><span class="line">逻辑回归output在0-1之间</span><br><span class="line">②goodness of a function</span><br><span class="line">损失函数最小化</span><br><span class="line">③找到最优函数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;李宏毅机器学习&quot;&gt;&lt;a href=&quot;#李宏毅机器学习&quot; class=&quot;headerlink&quot; title=&quot;李宏毅机器学习&quot;&gt;&lt;/a&gt;李宏毅机器学习&lt;/h1&gt;&lt;p&gt;1：Regression（回归）&lt;/p&gt;
&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>李宏毅线性代数</title>
    <link href="https://yanyubing.xyz/2020/01/10/%E6%9D%8E%E5%AE%8F%E6%AF%85%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    <id>https://yanyubing.xyz/2020/01/10/%E6%9D%8E%E5%AE%8F%E6%AF%85%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</id>
    <published>2020-01-10T01:21:30.708Z</published>
    <updated>2020-01-15T11:06:11.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="李宏毅线性代数"><a href="#李宏毅线性代数" class="headerlink" title="李宏毅线性代数"></a>李宏毅线性代数</h1><h3 id="1：我们将学习什么"><a href="#1：我们将学习什么" class="headerlink" title="1：我们将学习什么"></a>1：我们将学习什么</h3><p>1：系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">系统（function）：给定输入，得到输出</span><br><span class="line">线性系统：①输入和输出倍数增长②输入x1输出y1，输入x2输出y2；则输入x1+x2，得到y1+y2</span><br></pre></td></tr></table></figure><p>2：线性系统举例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">电路系统</span><br><span class="line">信号和系统</span><br><span class="line">PM2.5，温度等：线性系统是近似取值，不一定实际真的是线性！y=w1*x1+w2*x2+w3*x3；参数w就是自己设置的初始化权值参数！最终通过机器学习得到最优的w参数！</span><br><span class="line">预测房价</span><br><span class="line">谷歌PageRank，网页重要性排序</span><br></pre></td></tr></table></figure><p>3：线性方程组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线性系统一定可以写成一个线性方程组</span><br></pre></td></tr></table></figure><p>4：向量（Vectors）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">二维向量，三维向量，等等...</span><br><span class="line">向量的倍数扩展和求和</span><br><span class="line">n维向量的集合记作Rn(n为上标)</span><br><span class="line">向量的交换律:u+v=v+u</span><br><span class="line">向量0+u=u</span><br><span class="line">u&apos;+u=0，u&apos;为u的-1倍</span><br><span class="line">(ab)u=a(bu)</span><br><span class="line">(a+b)u=au+bu</span><br><span class="line">a(u+v)=au+av</span><br><span class="line">不是向量有以上特质，而是有这些特质的叫做向量</span><br></pre></td></tr></table></figure><p>5：矩阵（Matrix）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">把n个m维度的向量放在一起，就是m*n的矩阵,m行n列，m-rows，先行在列</span><br><span class="line">矩阵的转置：A是m*n的矩阵，则AT是n*m的矩阵</span><br></pre></td></tr></table></figure><p>6：矩阵-向量的乘法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">矩阵和向量相乘：m*n的矩阵只能和n维向量相乘，得到m维向量</span><br><span class="line">矩阵向量的运算：A,B是m*n的矩阵；u，v是n维的向量，则：</span><br><span class="line">A(u+v)=Au+Av</span><br><span class="line">A(cu)=c(Au)=(cA)u</span><br><span class="line">(A+B)u=Au+Bu</span><br></pre></td></tr></table></figure><p>7：是否可解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果两个向量不是平行的，则这两个向量可以组合扫描过整个二维空间；即u≠cv，au+bv可以得到任意的二维空间向量。</span><br><span class="line">非平行-有解；有解不一定非平行，也可能平行。</span><br><span class="line">Span:扩张</span><br><span class="line">Ax=b有没有解：①b是不是A的线性组合②b是不是A做span形成的</span><br></pre></td></tr></table></figure><p>8：有多少解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">①只有可能是唯一解和无穷多解</span><br><span class="line">②dependent：对于矩阵A&#123;a1,a2,a3...an&#125;，如果存在x1,x2,x3...xn（不全是0），使得x1*a1+x2*a2+x3*a3+...xn*an=0，则A是dependent的。即在A中存在ai，使得ai可以是其他向量的结合。</span><br><span class="line">③如果Ax=b有解，且A是dependent，则有无穷多解 </span><br><span class="line">④如果Ax=b有无穷多解，则A是dependent</span><br><span class="line">⑤矩阵的Rank数为矩阵中最大的independent的列数</span><br><span class="line">⑥矩阵的Nullity数=矩阵列的数-Rank数</span><br><span class="line">⑦一个矩阵中只有一个非0向量的时候，该矩阵是independent</span><br></pre></td></tr></table></figure><p>9：求解线性方程系统（上）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">等价（equivalent）：如果两个方程有相同的解，则这两个方程等价</span><br><span class="line">高斯消去法：</span><br><span class="line">①等式顺序交换</span><br><span class="line">②等式乘以n倍</span><br><span class="line">③等式乘以n倍在加上另一个等式</span><br><span class="line"></span><br><span class="line">多元多次方程组的系数可以看成矩阵，未知数看成向量，等式右边可以看成向量。最终求解的就是未知数的向量。通过高斯消去法，最终得到</span><br><span class="line">1 0 0 3</span><br><span class="line">0 1 0 4</span><br><span class="line">0 0 1 7 这样的矩阵，即:</span><br><span class="line">1*x1+0*x2+0*x3=3</span><br><span class="line">0*x1+1*x2+0*x3=4</span><br><span class="line">0*x1+0*x2+1*x3=7</span><br><span class="line">得到最终的解，RREF（Reduced Row echelon form）就是最终可以直接看出来解的矩阵。REF可能有多个，但是RREF是惟一的。</span><br></pre></td></tr></table></figure><p>10：求解线性方程系统（下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">步骤：</span><br><span class="line">①第一个row下面第一行全为0</span><br><span class="line">②交换row的位置</span><br><span class="line">③继续把下面的行变为0</span><br><span class="line">④把第一位非0的值变为1</span><br><span class="line">⑤得到最终的RREF</span><br><span class="line">对于RREF，可以直接看出是唯一解，还是无穷多解，还是无解</span><br></pre></td></tr></table></figure><p>11：从RREF中可以学到什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A=[a1...an]通过RREF得到R=[r1...rn]</span><br><span class="line">①如果a5=-a1+a4则r5=-r1+r4;同理，如果R中有关系，则对应的A中也有这种关系</span><br><span class="line">②[A b]通过RREF得到[R b&apos;]则A通过RREF得到R</span><br><span class="line">③[A b]通过RREF得到[R b&apos;]，则Ax=b和Rx=b&apos;解相同</span><br><span class="line">④A通过REFF得到R，则Ax=0与Rx=0解相同</span><br><span class="line">⑤矮胖型的一定依赖的，即n个m行的矩阵，如果m&lt;n，则一定是依赖的，例如二维空间，两个(非平行)向量一定可以组合成第三个向量；同理三维（非平面）向量一定可以组成第四个向量...</span><br></pre></td></tr></table></figure><p>12：矩阵相乘</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">矩阵A为m*n，矩阵B为n*p，A*B之后得到m*p的矩阵，可以把B看成p个含有n个元素的列向量 </span><br><span class="line">composition:x通过f(x)结果在通过g(x)，则叫做composition</span><br><span class="line">①矩阵的乘法可以看成：n*1的矩阵和1*p的矩阵相乘，之后求和得到最终n*p的矩阵。</span><br><span class="line">②partition：矩阵可以分割变为小的矩阵，进行组合再运算，结果是一样，注意：partition一定要是可以进行运算的，并且进行partition是可以简化运算的</span><br><span class="line"></span><br><span class="line">Diagonal Matrix：只有对角线有值</span><br><span class="line">Symmetric Matrix:A转置=A</span><br></pre></td></tr></table></figure><p>13：矩阵的逆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A*B=I，则A，B互为逆</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;李宏毅线性代数&quot;&gt;&lt;a href=&quot;#李宏毅线性代数&quot; class=&quot;headerlink&quot; title=&quot;李宏毅线性代数&quot;&gt;&lt;/a&gt;李宏毅线性代数&lt;/h1&gt;&lt;h3 id=&quot;1：我们将学习什么&quot;&gt;&lt;a href=&quot;#1：我们将学习什么&quot; class=&quot;header
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
